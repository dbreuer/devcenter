{
    "docs": [
        {
            "location": "/", 
            "text": "In short \nBitrise\n is a \nContinuous Integration\n\n  and \nDelivery\n (CI/CD) Platform as a Service (PaaS)\n  with a main focus on mobile app development (\niOS\n, \nAndroid\n, \nXamarin\n, ...).\n\n\nAutomate the testing and deployment of your apps with just a few clicks.\n\n\nWhen you trigger a build a Virtual Machine is assigned to host\n  your build and your defined Workflow (series of build Steps) will be executed, step by step.\n\n\nA \nWorkflow\n consists of one or more build \nSteps\n (open source git repositories\n  which can be executed with the \nopen source Bitrise CLI\n).\n  \nYou can create and share your own build Steps too\n.\n  You are able to define more workflows for the very same app,\n  and define \ntriggers\n to specify which workflow should be selected for\n  each trigger.\n\n\nThe steps can do anything that can be implemented by command line scripts / programs:\n  send emails, \ntext messages\n,\n  pass values to each other, \ncreate Xcode archives\n,\n  gather system information about the Virtual Machine\n  running the build, notify other users (e.g. on Slack)\n  or even \npublish to iTunes Connect\n, and many more.\n  You can read more at \nBuilds and Workflows\n.\n\n\nAfter a build is finished the Virtual Machine is destroyed and you can browse\n  the logs of every step that ran during the workflow.\n  You can read more at \nCode Security\n.\n\n\n## Bitrise CLI - the open source, offline, automation runner\n\n\nTo run a \nbitrise\n build on your machine, you can install our \nopen source runner\n\n  and use the \nbitrise\n command to execute your workflows locally.\n  \nNo \nbitrise.io\n account required to use the Bitrise CLI.\n\n\nIt's a great help when you're developing steps, debugging builds,\n  or just want to use Bitrise for \nany kind of automation\n on your machine.\n\n\nYou can find more information about the offline runner\n  in the \nBitrise CLI and bitrise.yml\n section of the DevCenter.", 
            "title": "Bitrise DevCenter - What is Bitrise? "
        }, 
        {
            "location": "/connecting-a-repository/", 
            "text": "After you've selected adding a new app, you will find yourself on the \nCreate app\n page.\n\n\n\nBitrise will give you options to connect any kind of git repository to it. \nGitHub\n and \nBitbucket\n are supported out of the box.\nIf you've already authorized Bitrise with your GitHub for example,\nyou will see Bitrise automatically listing all your repositories, so you can just click on the one you'd like to connect.\n\n\n\n!!! note \nConnect any git repository to Bitrise\n\nYou can connect any private or public git repository to Bitrise.\nWe will automatically create an SSH key that you can use to setup the connection with your provider.\n\n\n\n\n\n\nIf you haven't authorized Bitrise against the provider hosting your repository, it will ask for permission.\n\n\n\n\n\n\nIt will then list your repositories as above. If you'd like to connect git repository hosted by other than GitHub or Bitbucket,\nselect the \nOther / Manual\n tab.\n\n\n\n\n\n\nYou will have to add the git url of the repository you would like to connect.\n\n\n\n!!! warning \nUse SSH URLs for private repositories\n\nPlease note, that if you are connecting a private repository,\nBitrise will try to clone it through SSH, so it's necessary to provide an SSH URL to your repository here.\n\n\n\nBitrise will add an SSH key to your repository at a later step.\nRead more about how to add SSH keys automatically, or manually at \nSSH keys\n.", 
            "title": "Connecting a repository"
        }, 
        {
            "location": "/setting-up-configuration/", 
            "text": "After \nSetting up the SSH key\n for\nyour project, Bitrise will download your code to make sure it can access the repository\nand will run an automatic repository scanner script to find the best initial configuration for your project.\nCurrently Bitrise will detect \niOS\n, \nAndroid\n, \nXamarin\n and \nfastlane\n projects out of the box.\n\n\n\nYou can configure other types of projects too, but that will require manual\nconfiguration.\n\n\n\nProject configuration with automatic repository scanner\n\n\n\nTo validate and automatically scan your project you only need to tell Bitrise\nthe default branch of your repository.\nDuring validation Bitrise will make sure it has access to the given branch,\nusing the \nSSH key\n you set up.\n\n\n\nAfter successful validation Bitrise will scan your repository and give you a default workflow\n\n\n\nSkipping the scanner - full manual configuration\n\n\n\nIf for some reason you want to skip the scanner, you can choose\nthe \nConfigure manually without project scanning\n option,\nin the \nValidation setup\n section.\n\n\n\n\n\n\nBy choosing this option \nbitrise.io\n will only\nvalidate the access to the repository, but it won't run the scanner.\nInstead, it'll present you the manual configuration options\nin the \nProject build configuration\n section.", 
            "title": "Setting up configuration"
        }, 
        {
            "location": "/setting-up-ssh-keys/", 
            "text": "SSH keys serve the role of secure transfer between services. In the case of Bitrise, it will ask for your permission to be authorized at your git source provider, e.g. GitHub. Read more about how to \nauthorize Bitrise\n.\n\n\n\nThe reason behind the need for being authorized, is that Bitrise has to have a working SSH connection to your repository to be able to clone it. There are several ways to make it work. Automatically, by adding it manually, or by using your own key.\n\n\n\n!!! warning \nUse SSH URLs everywhere\n\nMost services support SSH key based authentication \nonly\n for SSH URLs (ex: \ngit@github.com:bitrise-io/bitrise.git\n), and \nnot\n for HTTPS URLs (ex: \nhttps://github.com/bitrise-io/bitrise.git\n)! This means, that \nevery private repository you want to use have to be addressed with the SSH URL\n. If you have direct private git repo references in your \nPodfile\n you'll have to use the SSH URL there as well! Same applies for \nsubmodules\n and every other private git repository URL you want to use with the SSH key you register on \nBitrise.io\n!\n\n\n\nAutomatic setup\n\n\n\nIn case of \nGitHub\n and \nBitbucket\n repository setups, Bitrise will generate a public and private SSH key pair and ask whether you like the idea of adding that into your repository automatically as deploy key, or you'd like to add it by hand.\n\n\n\n\n\n\nAs the description tells, you are able to auto-add the key to the repository if you have admin rights for it. In any other case, you are able to copy the public key from here and add it to your repository at your provider.\n\n\n\nThe auto-add option will add the generated key as a read-only \ndeploy key\n to your repository, it's the best for your security.\n\n\n\nManual setup\n\n\n\nIf you have private dependencies, you have to add the generated SSH key manually to your profile at your provider instead. That's because deploy keys are only valid for only one repository.\n\n\n\n!!! note \nA bot user\n\nThere's an easy way to work around modifying your own profile by adding a \nbot\n user with the SSH key to the repositories. \nAdd the SSH key you would like to use to the user and add the user to the projects\n. You don't have to add the \nbot\n user with read and write permission, it is enough to assign read permissions. After that you can use the SSH key to clone to the repository or any submodule. It\u2019s that simple.\n\n\n\n!!! warning\n\nDo not\n add the key to the repository Deploy Keys. Add it to the user's account who has access to the repositories.\n\n\n\nGitHub\n\n\n\n\n\n\nBitbucket\n\n\n\n\n\n\nGitLab\n\n\n\n\n\n\nUse your own key\n\n\n\nThis option can be used if you also have the private key of the given user. You just have to paste the private key and \nBitrise\n will be able to access the repositories.", 
            "title": "Setting up SSH keys"
        }, 
        {
            "location": "/android-tips-and-tricks/", 
            "text": "What are Gradle tasks and how can I get the list of available tasks in my project?\n\n\n\nA \ngradle\n task is a process you can run with \ngradle\n.\nYou can run these tasks by running \ngradle TASK-TO-RUN\n in your Command Line / Terminal.\n\n\n\nA standard Android Gradle project includes a lot of tasks by default, things like:\n\n\n\n\n\nandroidDependencies - Displays the Android dependencies of the project.\n\n\nassemble - Assembles all variants of all applications and secondary packages.\n\n\nassembleAndroidTest - Assembles all the Test applications.\n\n\nclean - Deletes the build directory\n\n\n\n\n\nYou can get the base task list by calling \ngradle tasks\n in your Android app's directory,\nor to see all the available tasks you can call \ngradle tasks --all\n.\n\n\n\nRunning \ngradle tasks\n you'll get a list of available Gradle tasks in the format:\n\n\n\n$ gradle task\n\n:tasks\n\n------------------------------------------------------------\nAll tasks runnable from root project\n------------------------------------------------------------\n\nAndroid tasks\n-------------\nandroidDependencies - Displays the Android dependencies of the project.\nsigningReport - Displays the signing info for each variant.\nsourceSets - Prints out all the source sets defined in this project.\n\nBuild tasks\n-----------\nassemble - Assembles all variants of all applications and secondary packages.\nassembleAndroidTest - Assembles all the Test applications.\nassembleDebug - Assembles all Debug builds.\nassembleRelease - Assembles all Release builds.\n...\n\n\n\n\nYou can run any of the tasks on bitrise from a \nScript\n step by calling \ngradle task-name-to-run\n (for example: \ngradle assemle\n)\nor by using our \nGradle Runner\n step (\nhttps://github.com/bitrise-io/steps-gradle-runner\n)\nand specifying the task as the value of the \ngradle_task\n input.\n\n\n\nInstead of running \ngradle\n directly, you should run the gradle commands through \ngradlew\n (the Gradle Wrapper)!\n\nThe \nGradle Runner\n step does this, and as you can see it in the related input description of the step:\n\n\n\n\n\nUsing a Gradle Wrapper (gradlew) is strongly suggested, as the wrapper is what makes sure\nthat the right Gradle version is installed and used for the build.\n\n\nYou can find more information about the Gradle Wrapper (gradlew),\nand about how you can generate one (if you would not have one already)\n\nin the official guide at: \nhttps://docs.gradle.org/current/userguide/gradle_wrapper.html\n.\n\n\n\n\n\nHow to install an additional Android SDK package\n\n\n\nThe preferred way to do this is to use the \nInstall missing Android tools\n step.\nPlease only use a Script solution if you really have to, as you'll have to update\nthe Script if the Android tools change (which did happen).\n\n\n\nAll you have to do is to add a \nScript\n step to your workflow,\nand use the Android \nsdkmanager\n tool to install the additional packages you want to.\n\n\n\nAs an example, to install the Android SDK v18 and the related \nbuild-tools\n v18.0.1,\nyou can add a \nScript\n step (can be the very first step in the Workflow)\nwith the following content:\n\n\n\n#!/bin/bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\n# write your script here\nsdkmanager \nplatforms;android-18\n\nsdkmanager \nbuild-tools;18.0.1\n\n\n\n\n\nYou can get the full list of available packages\n by running:\n\nsdkmanager --list --include_obsolete --verbose\n.\nYou can run this on your own machine if you have \n$ANDROID_HOME/tools/bin\n in your \n$PATH\n.\nIf not then you can run it with \n/PATH/TO/ANDROID-SDK-HOME/tools/bin/sdkmanager ...\n.\n\n\n\nEnable Gradle debug options\n\n\n\nIf your Gradle build fails and you can't find any information in the logs you can try to call it with\n\n--stacktrace --debug\n flags (ex: \ngradle ... --stacktrace --debug\n) to get more detailed logs.\n\n\n\nIn most cases \n--stacktrace\n should be enough, and the \nGradle Runner\n step includes\nthis flag by default.\n\n\n\nRun a bitrise Android build on your Mac/PC, with Docker\n\n\n\nYou can run your build on your Mac/PC, inside the same \ndocker\n container you use on \nbitrise.io\n,\nto fully test your build in an identical environment! You can find the detailed guide here:\n\nHow to run your build locally in Docker\n\n\n\nMemory (RAM) limit\n\n\n\nYou can specify the amount allowed RAM for the JVM by adding two \nEnvironment Variables\n to your Workflow,\ne.g. as \nApp Env Var\ns:\n\n\n\n\n\nGRADLE_OPTS: '-Dorg.gradle.jvmargs=\n-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError\n'\n\n\n_JAVA_OPTIONS: \n-Xms512m -Xmx1024m\n\n\n\n\n\nThis method can be used to limit the allowed RAM the Gradle JVM process can use,\nwhich can be useful in case there's not enough RAM available in the system.\n\n\n\nEmulators\n\n\n\nYou can find and use our Android emulator steps to create \n boot emulators:\n\nhttp://www.bitrise.io/integrations\n.\n\n\n\nFirst you have to create an emulator with a \nCreate Android emulator\n step,\nwhere you can set the Android version and a couple of other parameters for the new emulator,\nthen you can boot this emulator with the \nStart Android emulator\n step,\nwhich makes sure that the emulator is booted and ready for subsequent steps.\n\n\n\nEmulator with Google APIs\n\n\n\nInstead of using a Script step to create an android emulator please use the \nCreate Android emulator\n step!\nThere are simply too many edge cases to cover here, as well as the commands and working configurations change quite frequently.\n\n\n\nThe section below is kept here for referencing purposes, and might be outdated.\n\n\n\nNote about Android SDK versions:\n at this time there are lots of known issues reported for Android Emulators\nwith Android SDK version 22 \n 23 when combined with Google Play services\n(see \n1\n\nand \n2\n).\nThe script above creates an emulator with SDK version 21, which should work properly with Google Play services.\n\n\n\nThere are possible workarounds for newer versions\n(see \n1\n\nand \n2\n),\nbut that requires some customization in your project.\n\n\n\nInstalling / Using Java version X\n\n\n\n!!! note \nJava 8 is now pre-installed\n\nJava 8 is now the pre-installed Java version on the Bitrise.io Linux Stack.\nThis section is kept here for future reference, in case you'd need another Java version.\n\n\n\nIf you'd need a Java / JDK version which is not preinstalled on the Android stacks,\nyou can follow this guide to install it. This example will install Java/JDK 8,\nplease adapt it to the version you need.\n\n\n\nIf your build requires JDK 8, you can install and activate it with a \nScript\n step:\n\n\n\n#!/bin/bash\nset -ex\n\nadd-apt-repository -y ppa:openjdk-r/ppa\napt-get update -qq\napt-get install -y openjdk-8-jdk\nupdate-java-alternatives -s /usr/lib/jvm/java-1.8.0-openjdk-amd64\necho \ndone\n\n\n\n\n\nThat's all, just add the \nScript\n step to the Workflow with the content above,\nand start a new build. \nThis \nScript\n step can be the very first step in the Workflow,\nas it does not depend on anything else.", 
            "title": "Android tips and tricks"
        }, 
        {
            "location": "/android-code-signing/", 
            "text": "hello", 
            "title": "Android Code Signing"
        }, 
        {
            "location": "/frequent-android-issues/", 
            "text": "Could not find an android package or you have not accepted the license agreements\n\n\n\nError\n\n\n\n A problem occurred configuring project ':lib'.\n   \n You have not accepted the license agreements of the following SDK components:\n     [Google Repository].\n     Before building your project, you need to accept the license agreements and complete the installation of the missing components using the Android Studio SDK Manager.\n     Alternatively, to learn how to transfer the license agreements from one workstation to another, go to http://d.android.com/r/studio-ui/export-licenses.html\n\n\n\n\nor\n\n\n\nCould not find com.android.support:appcompat-v7:24.2.0.\n\n\n\n\nSolution\n\n\n\nPlease use the \nInstall missing Android tools\n step. The section below is kept only for referencing purposes!\n\n\n\nThe error means that your build requires an Android package which is either not (yet) preinstalled\n(\nyou can see which packages are preinstalled \nhere, on GitHub\n -\nfeel free to send us a Pull Request if you'd want to add a new preinstalled package!\n),\n\nor outdated\n.\n\n\n\nThe solution is quite simple, you just have to install/update the related package(s).\nTo do that add a \nScript\n step to your workflow -\nshould be before the step where you get the error, it can be the very first step in the workflow -\nwith the following content:\n\n\n\n#!/bin/bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\n# For newer Android SDK:\nsdkmanager \nextras;android;m2repository\n\nsdkmanager \nextras;google;m2repository\n\n\n# For older Android SDK:\necho y | android update sdk --no-ui --all --filter extra-android-m2repository | grep 'package installed'\necho y | android update sdk --no-ui --all --filter extra-google-m2repository | grep 'package installed'\n\n\n\n\nIn most cases you don't need both packages to be updated, so you can try to remove them one\nby one, but having all three in the script covers most of the cases related to this error.\n\n\n\n!!! note \nWe update the preinstalled Android packages on every weekend\n\nso if the error is related to an outdated package, the workaround\nwe describe here can be removed from your build after that weekend's update.\n\n\n\nAlternative solution for the license error\n\n\n\nPlease use the \nInstall missing Android tools\n step. The section below is kept only for referencing purposes!\n\n\n\nAn alternative solution for the \nYou have not accepted the license agreements of the following SDK components\n\nerror, as printed in the log:\n\n\n\nBefore building your project, you need to accept the license agreements and complete the installation of the missing components using the Android Studio SDK Manager.\n  Alternatively, to learn how to transfer the license agreements from one workstation to another, go to http://d.android.com/r/studio-ui/export-licenses.html\n\n\n\n\nYou can find more info at the link printed in the log (\nhttp://d.android.com/r/studio-ui/export-licenses.html\n),\nbut in short this can be done by:\n\n\n\nLocate the licenses on your Mac/PC\n:\n\n\n\n\n\nIf you have accepted the license agreements on one workstation, but wish to build your projects on a different one,\nyou can export your licenses by copying the accepted licenses folder from the Android Sdk Home\nfolder (this should be located at \nandroid sdk home path\n/licenses\n) of your current workstation,\nto the Android Sdk Home directory of the machine where you now want to build your projects.\n\n\n\n\n\nCreate an \nandroid-licenses\n directory in the root directory of your git repository,\nand copy the license files into this directory\n,\nthen in your Workflow copy the licenses to the right location using a \nScript\n step.\n\n\n\nAdd the \nScript\n step right after the \nGit Clone\n step\n (that's when your code is available\non the build virtual machine), with the content:\n\n\n\n#!/bin/bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\nrsync -avhP ./android-licenses/ \n$ANDROID_HOME/licenses/\n\n\n\n\n\nThat's all, this script copies the licenses from the \nandroid-licenses\n (from your repository)\ninto the system's Android SDK Home path under \nlicenses\n directory.\n\n\n\nInstall an additional Android package\n\n\n\nPlease see \nthis section\n.", 
            "title": "Frequent Android issues"
        }, 
        {
            "location": "/the-environment/", 
            "text": "Hardware\n\n\n\nWe're still experimenting with new VM providers and VM configurations, but in general, what you can expect:\n\n\n\n\n\nat least 7.5GB RAM\n\n\nat least 2 CPU cores\n\n\n64 bit CPU\n\n\nat least 10GB free disk space\n\n\n\n\n\nEnvironment\n\n\n\nWe use standard \nDocker\n images, published on \nDocker Hub\n,\nand the related \nDockerfile\n (the description file which describes the docker image / environment,\nand which is directly used to build the image) can be found on \nGitHub\n.\n\n\n\nRight now we have three docker images, built on top of each other:\n\n\n\n\n\nBitrise Base\n image ( \nGitHub\n / \nDocker Hub\n )\n\n\n\nincludes all the non-Android tools and environment setup\n\n\nideal to be used for non-Android projects as a base image, if you want to use it locally too, as this is\nthe smallest image\n\n\nRuby\n, \nGo\n, \nPython\n, \ngit\n and the \nbitrise command line tools\n are all preinstalled and ready to use.\n\n\nOS: \nUbuntu 16.04\n, 64 bit\n\n\nRelated \nDockerfile\n where you can see what's preinstalled in this image:\n\nhttps://github.com/bitrise-docker/bitrise-base/blob/master/Dockerfile\n\n\n\n\n\n\nBase Android\n image (  \nGitHub\n / \nDocker Hub\n )\n\n\n\nextends the Bitrise Base image\n with Android specific tools and environments.\n\n\nMultiple Android SDK, Build Tool and system image versions are preinstalled, as well as \ngradle\n and \nmaven\n.\n\n\nYou can use the \n$ANDROID_HOME\n environment variable to point to the location of the pre-installed Android SDK\n\n\nRelated \nDockerfile\n where you can see what's preinstalled in this image:\n\nhttps://github.com/bitrise-docker/android/blob/master/Dockerfile\n\n\n\n\n\n\nAndroid NDK\n image (  \nGitHub\n / \nDocker Hub\n )\n\n\n\nbuilt on the Base Android image\n, extends it with the latest Android NDK.\n\n\nYou can use the \n$ANDROID_NDK_HOME\n environment variable to point to the location of the preinstalled Android NDK, and it's also added to \n$PATH\n\n\nRelated \nDockerfile\n where you can see what's preinstalled in this image:\n\nhttps://github.com/bitrise-docker/android-ndk/blob/master/Dockerfile\n\n\n\n\n\n\n\n\n\nYou can find the pre-installed tools \n System Report\n of this Stack at:\n\nhttps://github.com/bitrise-io/bitrise.io/blob/master/system_reports/linux-docker-android.log\n\n\n\nDocker \n Virtual Machines\n\n\n\nEvery build runs in a new VM\n (which is destroyed right after the build),\nnot just in a new container! This allows us to grant you full control over \nDocker\n\nand the whole environment.\n\n\n\nWhen your build starts on the Docker based Stack we volume mount the \n/var/run/docker.sock\n socket\ninto your container (similar to calling \ndocker run -v /var/run/docker.sock:/var/run/docker.sock ...\n;\nyou can find a description about this access granting method at:\n\nhttps://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/\n).\n\nNote: The \ndocker\n binary have to be installed inside the base Docker image\n(we install Docker in every one of our Docker images so that you don't have to do anything if you use our image,\nor you base your own image on our Docker images),\nbecause docker started to migrate from a single-binary solution to dynamically loaded components,\nand simply sharing the \ndocker\n binary is not sufficient anymore.\n\n\n\nThis means that you have access to \ndocker\n in your container, and can use other tools which use docker,\nlike \ndocker-compose\n.\nYou can, for example, configure and run tests and other automations on website projects using \ndocker-compose\n.\n\n\n\nYou can call \ndocker info\n, \ndocker build\n, \ndocker run\n, \ndocker login\n, \ndocker push\n,\netc. exactly how you would on your own machine.\n\n\n\nShared volumes\n\n\n\n!!! warning\n\nImportant Note if you want to run \ndocker\n in your build, and share volumes\n: because of how \ndocker\n handles volume sharing,\nonly those volumes can be shared which are shared with the base docker container (the one your build is running in).\nEverything under \n/bitrise\n can be mounted as a volume, but no other path is guaranteed to work with \n--volume\n mapping.\n\n\n\nPractically this means\n that if you use the standard paths and you use relative paths to mount volumes it'll work as expected,\nas the default source code directory is located inside \n/bitrise\n (by default it's \n/bitrise/src\n in our Docker images).\n\nWhat won't work\n is if you change the source code directory to be located \noutside\n of \n/bitrise\n,\nor you want to mount a folder with an absolute path outside of \n/bitrise\n.", 
            "title": "The Android/Linux/Docker environment"
        }, 
        {
            "location": "/app-status-badge/", 
            "text": "With the App Status (/ Badge) API you can get an embeddable SVG badge image,\nor a JSON message, reflecting the status of the app, or a specific branch of the app.\n\n\n\nThe easiest way to configure a Badge image is to open your App on \nbitrise.io\n\nand click the badge image, right next to the app's name.\n\n\n\nThis will open a popup where you can optinally set a branch, and get copy-paste ready embed\ncodes for the SVG badge image.\n\n\n\nExample SVG URL:\n\n\n\nhttps://www.bitrise.io/app/APP-ID/status.svg?token=APP-STATUS-BADGE-TOKEN\nbranch=master\n\n\n\n\nTo get the JSON equivalent of the status badge simply replace \n.svg\n in the embed\nURL with \n.json\n.\n\n\n\nExample JSON URL:\n\n\n\nhttps://www.bitrise.io/app/APP-ID/status.json?token=APP-STATUS-BADGE-TOKEN\nbranch=master\n\n\n\n\nNote: the \nAPP-STATUS-BADGE-TOKEN\n is a special token which can only be used\nfor calling this endpoint (you can find this token in the Badge configurator popup).\n\nNo other information can be retrieved with this token\n,\nand it's not the same as the API Token which you can find on the \nCode\n tab!\n\n\n\nJSON response\n\n\n\nThe JSON response returns a very simple JSON object:\n\n\n\n{\n    \nstatus\n: \nSIMPLIFIED-STATUS-AS-TEXT\n\n}\n\n\n\n\nWhere \nSIMPLIFIED-STATUS-AS-TEXT\n can be:\n\n\n\n\n\nsuccess\n : if the last finished build on the specified branch was successful\n\n\nerror\n : if the last finished build failed or was aborted on the specified branch\n\n\nunknown\n : in any other case, including if there was no (finished) build on the specified branch\n\n\n\n\n\nHTTP Codes and Errors\n\n\n\nIf the \nAPP-ID\n and the \nAPP-STATUS-BADGE-TOKEN\n parameters are correct,\nand identify an existing app, a \n200\n HTTP code is returned alongside the JSON response,\neven if the branch parameter points to a non existing branch (the JSON\nresponse in this case will be \n{\nstatus\n: \nunknown\n}\n with a 200 HTTP code).\n\n\n\nIf the \nAPP-ID\n or the \nAPP-STATUS-BADGE-TOKEN\n (or both) is not correct,\nyou'll get a HTTP \n403\n code \nwith an empty response\n body.", 
            "title": "App Status / Badge API"
        }, 
        {
            "location": "/build-trigger/", 
            "text": "Note: the \nwww\n endpoint is now deprecated. Please use the \nhttps://app.bitrise.io/app/APP-SLUG/build/start.json\n endpoint instead.\n\n\n\nWith the Build Trigger API you can start a new build of your app with a simple API call.\n\n\n\nYou can define parameters for the build like what \nbranch\n, \ntag\n or \ngit commit\n to use\nand what \nbuild message\n to present on the Build's details page.\n\n\n\n!!! note \nInteractive cURL call configurator\n\nYou can find an interactive cURL call configurator by clicking on the \nStart/Schedule a build\n\nbutton on your app's \nbitrise.io\n page\nand switching to \nAdvanced\n mode in the popup.\nAt the bottom of the popup you can find a \ncurl\n call,\nbased on the parameters you specify in the popup.\n\n\n\nHow to start a build by calling the Trigger API?\n\n\n\nYou have to call your build trigger with a \nPOST\n request with a JSON body.\n\n\n\n!!! note \nAPI Token and App Slug\n\nWhen you use the Bitrise Trigger API you have to specify the App's \nAPI Token\n and \nApp Slug\n.\nYou can view both and regenerate your App's API Token anytime you want to,\non the \nCode\n tab of the app.\n\n\n\nJSON body\n\n\n\nThe JSON body has to contain at least:\n\n\n\n\n\na \nhook_info\n object with:\n\n\n\na \ntype\n key and \nbitrise\n as its value\n\n\nan \napi_token\n key and your \nAPI Token\n as its value\n\n\n\n\n\n\na \nbuild_params\n object, with at least a \ntag\n, \nbranch\n or \nworkflow_id\n parameter specified\n\n\n\n\n\nA minimal sample JSON body, which specifies \nmaster\n as the \nbranch\n parameter:\n\n\n\n{\n  \nhook_info\n: {\n    \ntype\n: \nbitrise\n,\n    \napi_token\n: \n...\n\n  },\n  \nbuild_params\n: {\n    \nbranch\n: \nmaster\n\n  }\n}\n\n\n\n\nTo pass this JSON payload\n you can either pass it as the \nbody\n of the request \nas string\n (the JSON object serialized to string),\nor if you want to pass it as an object (e.g. if you want to call it from JavaScript) then you have to include a root \npayload\n\nelement, or set the JSON object as the value of the \npayload\n POST parameter.\n\n\n\njQuery example using the \npayload\n parameter:\n\n\n\n$.post(\nhttps://app.bitrise.io/app/APP-SLUG/build/start.json\n, {\n    \npayload\n:{\n        \nhook_info\n:{\n            \ntype\n:\nbitrise\n,\n            \napi_token\n:\nAPP-API-TOKEN\n\n        },\n        \nbuild_params\n:{\n            \nbranch\n:\nmaster\n\n        }\n    }\n})\n\n\n\n\nBuild Params\n\n\n\nThe following parameters are supported in the \nbuild_params\n object:\n\n\n\nGit related:\n\n\n\n\n\nbranch\n (string): The (Source) Branch to build. In case of a standard git commit this is the branch of the commit.\nIn case of a Pull Request build this is the source branch, the one the PR was started from.\n\n\ntag\n (string): The git Tag to build.\n\n\ncommit_hash\n (string): The git commit hash to build.\n\n\ncommit_message\n (string): The git commit message (or build's message).\n\n\n\n\n\nBitrise.io specific:\n\n\n\n\n\nworkflow_id\n: (string): Force the use of the specified workflow ID. If not defined then the workflow will be selected\nbased on the project's \nTrigger Map config\n.\n\n\nenvironments\n (array of objects): See the \nSpecify Environment Variables\n section for more info\nabout the \nenvironments\n objects.\n\n\nskip_git_status_report\n (bool): Skip sending build status for the connected git provider\n\n\n\n\n\nPull Request specific:\n\n\n\n\n\nbranch_dest\n (string): Used only in case of Pull Request builds: the destination/target branch of the Pull Request,\nthe one the PR will be merged \ninto\n. Example: \nmaster\n.\n\n\npull_request_id\n (int): Pull Request ID on the source code hosting system (e.g. the PR number on GitHub)\n\n\npull_request_repository_url\n (string): repository url from where the Pull Request is sent. E.g. if\nit's created from a fork this should be the fork's URL. Example: \nhttps://github.com/xyz/bitrise.git\n.\n\n\npull_request_merge_branch\n (string): the pre-merge branch, \nif the source code hosting system supports \n provides\n\nthe pre-merged state of the PR on a special \nmerge branch\n (ref). Probably only GitHub supports this.\nExample: \npull/12/merge\n.\n\n\npull_request_head_branch\n (string): the Pull Request's \nhead branch\n (\nrefs/\n) \nif the source code hosting system supports \n provides\n this.\nThis special git \nref\n should point to the \nsource\n of the Pull Request. Supported by GitHub and GitLab.\nExample: \npull/12/head\n (github) / \nmerge-requests/12/head\n (gitlab).\n\n\n\n\n\n!!! note \nGit Clone - parameter priority\n\nIf you provide a \ntag\n, the \nbranch\n parameter will be ignored by the \nGit Clone\n step.\nIf you provide a \ncommit_hash\n parameter then both the \ntag\n and the \nbranch\n parameters will be ignored.\nThese will still be logged, will be available for steps and will be visible on the Build's details page,\nbut the \nGit Clone\n step will use the the most specific parameter for checkout.\n\n\n\nSpecify Environment Variables\n\n\n\nYou can define additional \nenvironment variables\n for your build.\n\n\n\nThese variables will be handled with priority between \nSecrets\n and \nApp Env Vars\n,\nwhich means that you can not overwrite environment variables defined in\nyour build configuration (e.g. App Env Vars), only Secrets.\nFor more information see:\n\nAvailability order of environment variables\n\n\n\nIt's important that this parameter have to be an \narray of objects\n,\nand that every item of the array have to include\nat least a \nmapped_to\n (the key of the Environment Variable, without a dollar sign (\n$\n))\nand a \nvalue\n property (the value of the variable). By default environment variable names inside values will be replaced in triggered build by actual value from target environment. This behavior can be disabled by setting \nis_expand\n flag to \nfalse\n.\n\n\n\nExample:\n\n\n\nenvironments\n:[\n  {\nmapped_to\n:\nAPI_TEST_ENV\n,\nvalue\n:\nThis is the test value\n,\nis_expand\n:true},\n  {\nmapped_to\n:\nHELP_ENV\n,\nvalue\n:\n$HOME variable contains user's home directory path\n,\nis_expand\n:false},\n]\n\n\n\n\nWorkflow to be used for the build\n\n\n\nBy default the Workflow for your Build will be selected based on the\n\nbuild_params\n and your app's \nTrigger Map\n.\nThis is the same as how \nWebhooks\n select the workflow for the build\nautomatically (based on the \nTrigger Map\n), and how you can\ndefine separate Workflows for separate branches, tags or pull requests\nwithout the need to specify the workflow manually for every build.\n\n\n\nWith the Trigger API you can however \noverwrite\n this selection\nand specify exactly which Workflow you want to use.\n\n\n\nAll you have to do is add a \nworkflow_id\n parameter to your \nbuild_params\n\nand specify the Workflow you want to use for that specific build.\n\n\n\nAn example \nbuild_params\n with \nbranch\n and \nworkflow_id\n:\n\n\n\nbuild_params\n:{\nbranch\n:\nmaster\n,\nworkflow_id\n:\ndeploy\n}'\n\n\n\n\ncurl\n example generator\n\n\n\nYou can find an interactive cURL call configurator by clicking on the \nStart/Schedule a build\n\nbutton on your app's \nbitrise.io\n page\nand switching to \nAdvanced\n mode in the popup.\nAt the bottom of the popup you can find a \ncurl\n call, based on the parameters you specify in the popup.\n\n\n\nA base curl call would look like this (with \nmaster\n specified as the \nbranch\n build parameter):\n\n\n\ncurl -H 'Content-Type: application/json' https://app.bitrise.io/app/APP-SLUG/build/start.json --data '{\nhook_info\n:{\ntype\n:\nbitrise\n,\napi_token\n:\nAPP-API-TOKEN\n},\nbuild_params\n:{\nbranch\n:\nmaster\n}}'\n\n\n\n\nNote: please don't forget to add \nContent-Type\n header with \napplication/json\n value\n\n\n\nA more advanced example: let's say you want to build the \nmaster\n \nbranch\n\nusing the \ndeployment\n workflow,\nspecify a build message (\ncommit_message\n)\nand set a test environment variable (\nAPI_TEST_ENV\n),\nthe call will look like this:\n\n\n\ncurl  -H 'Content-Type: application/json' https://app.bitrise.io/app/APP-SLUG/build/start.json --data '{\nhook_info\n:{\ntype\n:\nbitrise\n,\napi_token\n:\nAPP-API-TOKEN\n},\nbuild_params\n:{\nbranch\n:\nmaster\n,\ncommit_message\n:\nEnvironment in API params test\n,\nworkflow_id\n:\ndeployment\n,\nenvironments\n:[{\nmapped_to\n:\nAPI_TEST_ENV\n,\nvalue\n:\nThis is the test value\n,\nis_expand\n:true}]}}'", 
            "title": "Build Trigger API"
        }, 
        {
            "location": "/outgoing-webhooks/", 
            "text": "By setting up outgoing webhooks you can make Bitrise send notifications about specific events to your web service, so you can create custom integrations.\n\n\n\nYou can set the URL of your web service and select which events should trigger a notification in the Code tab of your app. Currently only build events are supported: a notification is sent when a build starts or finishes.\n\n\n\nThe event type that triggered the webhook is sent in a custom header:\n\n\n\nBitrise-Event-Type\n: \nbuild/triggered\n # or \nbuild/finished\n\n\n\n\n\nThe recent delivery attempts of a webhook can be found on the Code tab, so you can inspect the sent payload and the given response, and even request a redelivery of a given item. (Please note that Bitrise tries to deliver an item only once, no automatic retry attempts are made: it can be requested manually.)\n\n\n\nBuild events\n\n\n\nNote: the available values of the build status parameter can be found at the \nbuild list part of the Bitrise API documentation\n\n\n\nBuild triggered\n\n\n\nCustom header:\n\n\n\nBitrise-Event-Type\n: \nbuild/triggered\n\n\n\n\n\nPayload example:\n\n\n\n{\n  \nbuild_slug\n:\n1234abcd\n,\n  \nbuild_number\n:3,\n  \napp_slug\n:\nabcd1234\n,\n  \nbuild_status\n:0,\n  \ngit\n: {\n    \nprovider\n:\ngithub\n,\n    \nsrc_branch\n:\nfeature/branch\n,\n    \ndst_branch\n:\nmaster\n, # If the build was triggered by a pull request\n    \npull_request_id\n:32, # If the build was triggered by a pull request\n    \ntag\n:\nv1.0\n # If the build was triggered by tag\n  }\n}\n\n\n\n\nBuild finished\n\n\n\nCustom header:\n\n\n\nBitrise-Event-Type\n: \nbuild/finished\n\n\n\n\n\nPayload example:\n\n\n\n{\n  \nbuild_slug\n:\n1234abcd\n,\n  \nbuild_number\n:3,\n  \napp_slug\n:\nabcd1234\n,\n  \nbuild_status\n:1,\n  \ngit\n: {\n    \nprovider\n:\ngithub\n,\n    \nsrc_branch\n:\nfeature/branch\n,\n    \ndst_branch\n:master, # If the build was triggered by a pull request\n    \npull_request_id\n:32 # If the build was triggered by a pull request\n    \ntag\n:\nv1.0\n # If the build was triggered by tag\n  }\n}", 
            "title": "Outgoing Webhooks"
        }, 
        {
            "location": "/basics-of-bitrise-yml/", 
            "text": "A bare minimal \nbitrise.yml\n is as simple as:\n\n\n\nformat_version: 1.3.1\n\n\n\n\nThis configuration is valid, everything else is optional, but does not include anything to execute,\nthere's nothing to \nrun\n.\n\n\n\nA minimal configuration which you can \nbitrise run\n:\n\n\n\nformat_version: 1.3.1\nworkflows:\n  test:\n\n\n\n\nThis configuration can be executed with \nbitrise run test\n, and the \nbitrise\n CLI\nwon't give you any errors, but of course there's still nothing declared to do.\n\n\n\nLet's continue with our example from the previous guide,\nwhich executes a single Script step when you run it with \nbitrise run test\n,\nand talk about what's what in the configuration:\n\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\napp:\n  envs:\n  - MY_NAME: My Name\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        inputs:\n        - content: echo \nHello ${MY_NAME}!\n\n\n\n\n\nA quick walk through of this sample configuration:\n\n\n\n\n\nformat_version\n : this property declares the minimum Bitrise CLI format version.\nYou can get your Bitrise CLI's supported highest format version with: \nbitrise version --full\n.\nIf you set the \nformat_version\n to \n1.3.1\n that means that Bitrise CLI versions which\ndon't support the format version \n1.3.1\n or higher won't be able to run the configuration.\nThis is important if you use features which are not available in older Bitrise CLI versions.\n\n\ndefault_step_lib_source\n : specifies the source to use when no other source is defined for a step.\nMore info a bit later, in the \n- script@1.1.3:\n step description.\n\n\napp\n - \nenvs\n : the \napp: envs:\n section specifies Environment Variables which will be available for\nevery build, every workflow, every step.\n\n\nworkflows\n : the workflows section is the collection of separate build configurations\nwhich you can run with \nbitrise run WORKFLOWID\n.\nIn this example the only workflow is \ntest\n, which you can perform with \nbitrise run test\n.\nIf you'd have a second workflow called \nmain\n, you could run both \nbitrise run test\n and \nbitrise run main\n.\n\n\nsteps:\n : the list of steps which should be executed when the workflow is performed.\nIn this example the \ntest\n workflow includes only a single \nscript\n step. If more than one\nstep is declared, the steps are performed one by one, after each other.\n\n\n- script@1.1.3:\n : a step (reference) to perform. This reference does not have a \nStepLib Source\n declaration,\nwhich means that the \ndefault_step_lib_source\n will be used as the StepLib Source.\nFor more information check the \nStep reference section of the Steps guide\n.\n\n\ninputs:\n : the inputs you want to specify for the given step.\nA step can have many inputs,\nbut \nyou only have to specify those in the \nbitrise.yml\n which you want to set/overwrite.\n\nFor more information see the \nSteps documentation\n.\n\n\n- content:\n : the input we want to set. In this example we only wanted to specify the Content\nof the Script step, all other inputs are irrelevant.\n\n\necho \nHello ${MY_NAME}!\n : this is the \nvalue\n we specified for the \ncontent\n input.\n\n\n\n\n\nRead on to learn more about how you can use multiple workflows,\ndefine multiple steps to execute for a given workflow and for\nmore advanced concepts. You'll be able to define your perfect automation\nconfiguration in no time!", 
            "title": "Basics of bitrise.yml"
        }, 
        {
            "location": "/create-your-own-step/", 
            "text": "Creating your own Step is as simple as running a \nbitrise\n CLI (v1.6.1+) command and following the guide it prints.\n\n\n\nPlease make sure that you have at least v1.6.1 of the CLI installed on your Mac/Linux, the step plugin was introduced as a core plugin in that version (related announcement post: \nhttps://discuss.bitrise.io/t/monthly-release-of-bitrise-cli-tools-and-summary-of-updates-may-2017-cli-v1-6-1/1690\n).\n\n\n\n\n\nIf you don't have the \nbitrise\n CLI installed you can find the installation guide \nhere\n\n\nYou can find the \nstep\n plugin's development discussion thread at \nhttps://discuss.bitrise.io/t/step-create-plugin-quickly-generate-a-new-step/1609\n\n\n\n\n\nOnce you have the Bitrise CLI installed, to generate a new Bitrise Step all you have to do is:\n\n\n\n# If this is the very first time you use the CLI / if you just installed the CLI run this:\nbitrise setup\n\n# If you want to update the step plugin to the latest version:\nbitrise plugin update step\n\n# And to generate a new step simply run this command and follow the guide it prints:\nbitrise :step create\n\n\n\n\nThe generated Step's README also describes how you can run your step locally,\nbefore you'd even commit the code, as well as how you can test and use your step\nin any build by using \nthe \ngit::\n step reference\n, and finally (and optionally)\nhow you can share your step with others through the Bitrise StepLib.\n\n\n\nIf you'd have any questions visit our \ncommunity discussion site\n or \ncontact us\n!\n\n\n\nNeed some inspiration for a new step idea?\n Look no further, we have a list! \nThis way please\n :)", 
            "title": "Create your own Step"
        }, 
        {
            "location": "/installation/", 
            "text": "Installing the Bitrise CLI is super simple.\n\n\n\nThe Bitrise CLI is distributed as a single binary, so\nyou just have to download this binary file, make it executable,\nand run \nbitrise setup\n to download all the core plugins\nand tools required for running a build.\n\n\n\nIf you'd forget to run \nbitrise setup\n that's not an issue either,\nthe first time you run \nbitrise run\n it will perform the \nsetup\n\nif it was not performed for the current version of the CLI yet.\n\nbitrise setup\n can be called any time to validate the CLI installation.\n\n\n\nUpgrading the CLI works exactly the same way: just download the\nnew binary (overwrite the previous binary), make it executable\nand run \nbitrise setup\n (or the next \nbitrise run\n will run it\nautomatically).\n\n\n\nYou can download the release binary on GitHub from the CLI's\n\nreleases\n page.\nEvery release includes copy paste ready \ncurl\n commands\nto install the specific version.\n\n\n\nThe CLI is also available in \nbrew\n on macOS, so it can be installed with\n\n\n\nbrew update \n brew install bitrise\n\n\n\n\nif you have Homebrew installed on your Mac.\n\n\n\nYou can find more information about the installation in the\n\nInstall and Setup section of the CLI's README\n.", 
            "title": "Install the Bitrise CLI"
        }, 
        {
            "location": "/most-important-concepts/", 
            "text": "Every input, output and parameter is an Environment Variable\n\n\n\nEvery step input, step output, secret environment variable, app environment variable and workflow environment variable\n(basically every input and variable in your build config) is an environment variable.\n\n\n\nThere's nothing special about how Bitrise handles environment variables,\n\nthese are regular environment variable, with the same rules and restrictions as any other environment variable.\n\n\n\nTo highlight a couple of technical details:\n\n\n\nThe value of an Environment Variable can only be a String\n\n\n\nEnvironment Variables can only hold \nString\n values. Even if you set a number or bool, like \n1\n or \ntrue\n as\nthe value of the Environment Variable, that will be a string.\n\n\n\nParent process can't access  Environment Variables exposed by child processes\n\n\n\nParent process(es) can't access Environment Variables exposed by child processes.\n\n\n\nFor example, if you run a \nmy_bash_script.sh\n in your Terminal with \nbash my_bash_script.sh\n,\nand \nmy_bash_script.sh\n sets an environment variable with \nexport MY_VAR=the-value\n,\nyou won't be able to access \nMY_VAR\n in your Terminal after the script is finished,\n\nMY_VAR\n will only be available in \nmy_bash_script.sh\n \nand\n in the processes / scripts\nstarted by \nmy_bash_script.sh\n.\n\n\n\nIn terms of Bitrise CLI this means that if you \nexport MY_VAR=...\n in a Script step,\n\nMY_VAR\n won't be available in subsequent steps. This is true for the steps too,\nregardless of which language the step is written in.\n\n\n\nBitrise CLI includes a mechanism for exposing environment variables from Steps\nso that subsequent Steps can also access it, through the Bitrise CLI tool\ncalled \nenvman\n.\n\n\n\nTo set an environment variable in your script or in your step to make that\navailable in other steps too, you have to do that through \nenvman\n.\n\n\n\nA simple example:\n\n\n\nenvman add --key MY_TEST_ENV_KEY --value 'test value for test key'\n\n\n\n\nYou can find more examples in \nenvman's README\n,\nand in the \nExpose an Environment Variable and use it in another Step\n guide.\n\n\n\nAvailability order of environment variables\n\n\n\nEnvironment variables are available \nafter\n the environment variable\nis \nprocessed\n.\n\n\n\nThere are a few environment variables \nexposed by the Bitrise CLI itself\n,\nthose are available from the start (e.g. \nBITRISE_SOURCE_DIR\n and \nBITRISE_TRIGGERED_WORKFLOW_ID\n).\n\n\n\nAll other environment variables are \nprocessed\n / made available \nas the build progresses.\n\n\n\nThere are two types of environment variables which are processed and\nmade available before the workflow would be executed:\n\nSecrets\n and \nApp Env Vars\n (\napp: envs:\n in the \nbitrise.yml\n).\n\n\n\nAfter these, the processing of the specified Workflow starts, and the\n\nenvironment variables specified for that Workflow\n\nare made available. If the workflow has before or after workflows, when\na specific workflow is processed (right before the first step of the workflow would run)\nthe workflow's environment variables are processed and made available.\n\n\n\nStep inputs are also environment variables;\nthose are exposed only for the specific step, and right before the Step would start.\n\n\n\nLast but not least Step outputs are exposed by the specific step,\nso those are available for subsequent steps \nafter the Step finishes\n.\n\n\n\nThe environment variable processing order:\n\n\n\n\n\nBitrise CLI exposed environment variables\n\n\nSecrets\n\n\nOne-off environment variables specified for the build through the \nBuild Trigger API\n\n\nApp Env Vars\n (\napp: envs:\n in the \nbitrise.yml\n)\n\n\nWorkflow environment variables\n\n\nStep inputs\n\n\nStep outputs\n\n\n\n\n\nSo, why does the processing order matter?\n\n\n\nAn environment variable is only available \nafter\n it is processed and made available.\n\nWhen you reference or use an environment variable, you can only reference/use those which are already processed!\n\n\n\nA couple of examples:\n\n\n\n\n\nIn the value of a \nSecret\n environment variable,\nyou can use environment variables exposed by Bitrise CLI,\nbut you can't use any other environment variable (App Env Vars, Workflow Env Vars, ...),\nas those are not processed when secrets are processed.\n\n\nIn the value of an \nApp Env Var\n, you can use environment variables\nfrom \nSecrets\n as well as the Bitrise CLI exposed ones, but you can't use Workflow Env Vars,\nnor Step inputs.\n\n\nIn a \nWorkflow environment variable\n you can use all the above (\nSecrets\n, \nApp Env Vars\n,\nBitrise CLI exposed env vars).\n\n\nAnd finally, in step input values, you can use all other environment variables,\nincluding the workflow's environment variables, as well as the outputs\nof steps which run before the specific step.\n\n\n\n\n\nEnvironment variables of chained workflows\n\n\n\nOnce an environment variable of a workflow is processed and made available,\nit is available everywhere else during the build. This means that other workflows\nof the chain \ncan\n use the environment variables of a workflow which is performed \nbefore\n\nthe specific workflow, similar to Step outputs, which are available for every\nother step \nafter\n the step (which generates the outputs) completes.\n\n\n\nYou can find more information about environment variable availability\nof Workflow env vars in chained workflows in the\n\nWorkflows: Note about workflow environment variables\n\ndocumentation.", 
            "title": "Most important concepts"
        }, 
        {
            "location": "/run-your-first-build/", 
            "text": "To run your Bitrise build you only need two things:\n\n\n\n\n\nThe Bitrise CLI - \ninstallation guide\n\n\nA build configuration (\nbitrise.yml\n)\n\n\n\n\n\nOnce you have the Bitrise CLI installed (just run \nbitrise setup\n to validate\nthe installation) you just have to create the \nbitrise.yml\n build configuration,\nand you're ready to go!\n\n\n\nIf you use \nbitrise.io\n, you can download your app's \nbitrise.yml\n right from\n\nbitrise.io\n, and run the build locally. The \nbitrise.yml\n can be found\nin the Workflow Editor of the app on \nbitrise.io\n, under the \nbitrise.yml\n section.\n\n\n\nIf you want to create a \nbitrise.yml\n yourself, simply create a \nbitrise.yml\n file\nin the root of your project. You can use this as the base content of \nbitrise.yml\n:\n\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\napp:\n  envs:\n  - MY_NAME: My Name\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        inputs:\n        - content: echo \nHello ${MY_NAME}!\n\n\n\n\n\nTo run this build open your Terminal / Command Line, \ncd\n into the directory where\nyou saved the \nbitrise.yml\n, and run: \nbitrise run test\n.\n\n\n\nThat's all, you just ran your first build with the Bitrise CLI!\n\n\n\nRead on to learn more about how the Bitrise CLI and the \nbitrise.yml\n configuration works,\nyou'll be able to compose and run complex builds in no time!", 
            "title": "Run your first build"
        }, 
        {
            "location": "/secrets/", 
            "text": "Secrets can be accessed and used in a similar way as App Env Vars,\nthe main difference is that \nsecrets are not stored as part of the build configuration\n.\n\n\n\nWhen you run a build locally, with the Bitrise CLI, the secrets are read from\na \n.bitrise.secrets.yml\n file, which is expected to be in the same directory\nwhere the \nbitrise.yml\n is, and where you run the \nbitrise run\n command.\n\n\n\nIf you want to store your secrets somewhere else, you can specify\nthe location of the secrets file with the \n--inventory\n flag of the \nbitrise run\n command,\ne.g. \nbitrise run my-workflow --inventory /path/to/secrets.yml\n.\n\n\n\n!!! warning \nMake sure to \ngitignore\n your secrets file!\n\nAs a best practice, you should always make sure that the \n.bitrise.secrets.yml\n\nis added to your \n.gitignore\n, so that it will never be committed into your\nrepository! The best is if you \ngitignore\n everything what\nstarts with \n.bitrise\n, which can be done by adding the\nline: \n.bitrise*\n to your \n.gitignore\n file.\n\n\n\nThe format of the secrets YAML file is really simple. It have to include\na root \nenvs:\n item and then the list of environment variables.\n\n\n\nExample:\n\n\n\nenvs:\n- SECRET_ENV_ONE: first secret value\n- SECRET_ENV_TWO: second secret value\n\n\n\n\nThe environment variables defined in the secrets file can be used\njust like any other environment variable, so, if you save the above\nexample into a \n.bitrise.secrets.yml\n file, and you have a \nbitrise.yml\n\nfile in the same directory with the content:\n\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        inputs:\n        - content: |\n            #!/bin/bash\n            echo \nSECRET_ENV_ONE: ${SECRET_ENV_ONE}\n\n            echo \nSECRET_ENV_TWO: ${SECRET_ENV_TWO}\n\n\n\n\n\nYou can just \nbitrise run test\n in the directory, and you'll see that the Script\nstep will print the values specified in the secrets file:\n\n\n\n...\n+------------------------------------------------------------------------------+\n| (0) script@1.1.3                                                             |\n+------------------------------------------------------------------------------+\n| id: script                                                                   |\n| version: 1.1.3                                                               |\n| collection: https://github.com/bitrise-io/bitrise-steplib.git                |\n| toolkit: bash                                                                |\n| time: 2016-12-08T18:45:19+01:00                                              |\n+------------------------------------------------------------------------------+\n|                                                                              |\nSECRET_ENV_ONE: first secret value\nSECRET_ENV_TWO: second secret value\n|                                                                              |\n+---+---------------------------------------------------------------+----------+\n| \u2713 | script@1.1.3                                                  | 0.32 sec |\n+---+---------------------------------------------------------------+----------+\n...\n\n\n\n\nAs Secrets are the first environment variables processed when you execute\na \nbitrise run\n command, you can use the environment variables everywhere in\nyour \nbitrise.yml\n, for example in \nApp Env Vars\n (\napp: envs:\n in the \nbitrise.yml\n),\n\nWorkflow environment variables\n\nand Step inputs too.", 
            "title": "Secrets"
        }, 
        {
            "location": "/steps/", 
            "text": "What is a Step\n\n\n\nA Step encapsulates a \nbuild task\n: the code to perform that task, the inputs/parameters\nyou can define for the task, and the outputs the task generates.\n\n\n\nFor example the \nGit Clone\n (id: \ngit-clone\n) step performs a \ngit clone\n\nof the specified repository, with the inputs you (or the system) specify (e.g.\nthe branch, tag or commit to clone, the local path where the clone should happen, etc.).\n\n\n\nFrom a technical perspective a Step is a semver \nversioned\n repository\nwhich includes the \ncode\n of the Step and the \ninterface\n definition of the Step.\n\n\n\nThe \nstep interface definition\n (\nstep.yml\n) includes information like the dependencies of the step,\nthe inputs and outputs of the step, the title and description of the step;\nand other properties like the issue tracker / support URL, or\nthe filter properties which define when the step should be performed or skipped\nand whether a failed step should mark the build as failed.\n\n\n\nFrom a configuration perspective all you have to know about Bitrise Steps\nis how you can include and configure them in your build configuration (\nbitrise.yml\n).\n\n\n\nTo include a Step you have to reference it by a \nStep reference/ID\n\nin the \nsteps:\n list of a Workflow.\n\n\n\nAn example, with a single \nscript\n step, which will be executed when you run \nbitrise run test\n:\n\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:\n\n\n\n\n!!! note \nList of available steps (step IDs)\n\nYou can list all the available steps in the main Bitrise StepLib\nby running \nbitrise step-list\n, or by checking\n\nthe steps/ directory of the main Bitrise StepLib repository\n.\n\n\n\nOnce you include a step in your build configuration (\nbitrise.yml\n),\nyou can specify configurations for the step. The most common thing\nyou'll do is to specify values for the step's inputs.\nYou can do this with the \ninputs:\n list property of the step,\ndefining the \nkey\n of the input and the \nvalue\n you want to set.\n\n\n\nFor example, to specify a simple script to perform for the \nscript\n step,\nyou can specify a value for the \nscript\n step's \ncontent\n input.\n(\nNote: you can list all the inputs of a step with \nbitrise step-info STEP-ID\n)\n\n\n\nLet's do a simple \nHello World\n script, using the \nscript\n step:\n\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        inputs:\n        - content: \necho 'Hello World!'\n\n\n\n\n\nWhen you run the \ntest\n workflow of this configuration with \nbitrise run test\n\nyou'll now see that the \nscript\n step prints the text \nHello World\n in its log:\n\n\n\n+------------------------------------------------------------------------------+\n| (0) script@1.1.3                                                             |\n+------------------------------------------------------------------------------+\n| id: script                                                                   |\n| version: 1.1.3                                                               |\n| collection: https://github.com/bitrise-io/bitrise-steplib.git                |\n| toolkit: bash                                                                |\n| time: 2016-12-07T17:05:17+01:00                                              |\n+------------------------------------------------------------------------------+\n|                                                                              |\nHello World!\n|                                                                              |\n+---+---------------------------------------------------------------+----------+\n| \u2713 | script@1.1.3                                                  | 0.30 sec |\n+---+---------------------------------------------------------------+----------+\n\n\n\n\nIf the step doesn't have any required inputs you don't have to specify an input,\nand of course you can specify values for as many inputs as you want to.\n\n\n\nFor example the \nscript\n step can run Ruby scripts too, not just Bash scripts.\nTo do this, in addition to specifying the script in the \ncontent\n input\nyou also have to specify the \nrunner\n input:\n\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        inputs:\n        - content: \nputs 'Hello Ruby!'\n\n        - runner_bin: ruby\n\n\n\n\nStep input values are always \nstring\n / text values, as the input id/key and the value\nare passed to the step as environment variables\n(\nmore information\n),\nand the value can be multi line too, using the standard YAML multi line format.\nAn example multi line Bash script:\n\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        inputs:\n        - content: |\n            #!/bin/bash\n            set -ex\n            var_to_print='Hello World!'\n            echo \n${var_to_print}\n\n\n\n\n\n!!! note \nWatch out for the indentation!\n\nIndentation in the YAML format is very important!\nYou should use two-spaces indentation, and you can't use tabs to indent!\n\n\n\nIf you use a multi line value, like the one above, it's important that you\nhave to _indent the value with two spaces_, compared to the key!\n\n\n\n\nYou can change other properties of the step too, not just the inputs.\nFor example, if you want to \nforce\n run the step even if a previous step fails,\nyou can set the \nis_always_run\n property to \ntrue\n:\n\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        is_always_run: true\n        inputs:\n        - content: \nputs 'Hello Ruby!'\n\n        - runner_bin: ruby\n\n\n\n\nor if you want to specify a better, more descriptive title for the step,\nyou can use the \ntitle\n property:\n\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script@1.1.3:\n        title: Print Hello Ruby\n        is_always_run: true\n        inputs:\n        - content: \nputs 'Hello Ruby!'\n\n        - runner_bin: ruby\n\n\n\n\nThe Step data you define in bitrise.yml - your diff!\n\n\n\nYou might already suspect it after the examples above:\nthe step data / infos you specify in the \nbitrise.yml\n are the parameters\nof the step \nyou want to change\n / overwrite.\n\n\n\nIf you don't specify any input or other step property, only the step (reference/iD),\nthat means that the step should run with the default values (defined by the step's developer).\n\n\n\nYou could also think about this as a \ndiff\n. The step defines values for the step interface\nproperties, and in the \nbitrise.yml\n you define a \ndiff\n, the things you want to change\nand the values to change to.\n\n\n\nLet's go through the example above:\n\n\n\n    - script@1.1.3:\n        title: Print Hello Ruby\n        is_always_run: true\n        inputs:\n        - content: \nputs 'Hello Ruby!'\n\n        - runner_bin: ruby\n\n\n\n\nThe \n- script@1.1.3:\n line selects the step, and the properties you define after this\n(with an indentation!)\nare the things you want to overwrite.\n\n\n\nTo see the step's raw interface definition you can check it in the step library.\nIn these examples we always use the \nmain Bitrise StepLib\n.\nThe step interface definitions can be found in the StepLib's\n\nsteps\n directory\n,\nin this case it's in the \nsteps/script/1.1.3\n directory,\nas we used the \n1.1.3\n version of the \nscript\n step.\nThe \nstep.yml\n in this directory is the step's interface definition\n.\n\n\n\nCheck the \nstep.yml\n,\nyou can see all the properties defined for this version of the step.\nNow, if you check our example above, all we did is to\nchange the \ntitle\n property (from \nScript\n to \nPrint Hello Ruby\n),\nthe \nis_always_run\n property (from \nfalse\n to \ntrue\n)\nand two inputs of the step, \ncontent\n (from a default, example script content)\nand \nrunner_bin\n (from \n/bin/bash\n to \nruby\n).\n\n\n\nAll other properties you can see in the step version's \nstep.yml\n will be read\nfrom the \nstep.yml\n, you don't have to define those. You only have to define\n\nthe things you want to change\n, compared to the values specified for the step\nin the step's interface definition (\nstep.yml\n).\n\n\n\nStep reference/ID format\n\n\n\nA step reference from the example \nbitrise.yml\n above:\n\n\n\n- script@1.1.3:\n\n\n\n\n\n\nthe StepLib source\n\n\nthe Step ID\n\n\nthe Step Version\n\n\n\n\n\nStep reference format: \n- StepLibSource::StepID@StepVersion:\n\n\n\nFrom the three components only Step ID is required (e.g. \n- script:\n).\n\nThis example item could alternatively be written as \n- https://github.com/bitrise-io/bitrise-steplib.git::script@1.1.3:\n,\nto include all three components of the step reference.\n\n\n\nIf the Version is not defined, the latest version of the step will be used.\n\n\n\nIf the StepLib Source is not defined, the \ndefault_step_lib_source\n will be used.\n\n\n\nSo, if \ndefault_step_lib_source\n is set to \nhttps://github.com/bitrise-io/bitrise-steplib.git\n,\nand the latest version of the Script step is \n1.1.3\n, all the following references\nwill mean the exact same thing:\n\n\n\n\n\n- https://github.com/bitrise-io/bitrise-steplib.git::script@1.1.3:\n\n\n- script@1.1.3:\n\n\n- https://github.com/bitrise-io/bitrise-steplib.git::script:\n\n\n- script:\n\n\n\n\n\nBut, if a new version of the \nscript\n step is released (e.g. \n2.0.0\n)\nand you don't include the \n@1.1.3\n version reference component,\nnew builds will use the \nlatest version at the time\n.\nFor this reason, it's usually a good idea to specify the version of the step,\nso that your build does not break accidentally when a breaking change\nis introduced in a new version of the step.\n\n\n\nSpecial step sources\n\n\n\nThere are two special step sources:\n\n\n\n\n\ngit::\n\n\nand \npath::\n\n\n\n\n\nWhen you use one of these sources, the step won't be identified through\na Step Library, but through the ID data you specify.\n\n\n\nFor example, the \nscript\n step's github is at: \nhttps://github.com/bitrise-io/steps-script\n.\nTo reference the \nscript\n step directly through a git reference,\nyou can use the \ngit::\n source, the step's git clone URL,\nand the branch or tag in the repository.\n\n\n\nExample, to reference the \n1.1.3\n version tag of the script step's repository:\n\n\n\n- git::https://github.com/bitrise-io/steps-script.git@1.1.3:\n\n\n\n\nIn general, \nwhenever you can use a step version through a Step Library,\nyou should do that\n, instead of using the \ngit::\n source type,\nbecause features like \nlocal step caching\n or \nnetwork caching\n / alternative\ndownload URLs are only supported for steps shared in a StepLib.\n\n\n\nBut this type of referencing allows certain things you can't get through\na StepLib. For example the \ngit::\n source type can be used for not-yet-published or\nwork-in-progress states of a step.\nIf you \ndevelop your own Step\n you can use\nthis \ngit::\n source type to test your step \nbefore you would publish it\n\nin a StepLib.\n\n\n\nExample:\n\n\n\n- git::https://github.com/bitrise-io/steps-script.git@BRANCH-OR-TAG:\n\n\n\n\nBRANCH-OR-TAG\n of course have to be a branch or tag which does exist in\nthe step's repository. For example, if you develop your own Step\nand you work on a \nsoon-to-be-released\n branch, you can\nuse that state of the step with:\n\n\n\n- git::https://github.com/bitrise-io/steps-script.git@soon-to-be-released:\n\n\n\n\nThe second special source is \npath::\n, which works in a similar way,\nexcept for \nlocal paths\n, and it requires no version information.\n\n\n\nA good example for this is, again, when you create and work on your own\nStep, you can run the state of the Step (step's code) directly on your Mac/PC,\nwithout even pushing it to the step's repository.\n\n\n\nBoth absolute and relative (relative to the \nbitrise.yml\n!) local paths are supported, so you can:\n\n\n\n- path::/path/to/my/step:\n\n\n\n\nas well as:\n\n\n\n- path::./relative/path:\n\n\n\n\nDuring step development it's a best practice to have a \nbitrise.yml\n directly\nin the step's repository, for unit and ad hoc testing. In this case \nthe current directory is the step directory\n,\nand the step can be referenced with:\n\n\n\n- path::./:\n\n\n\n\nThis can also be used if you want to include your build steps in your app's source code.\n\nFor example if you store the \nscript\n step's code in your source code repository,\nunder the \nsteps/script\n directory, you can run the version included in your source code\nrepository with:\n\n\n\n- path::./steps/script:", 
            "title": "Steps"
        }, 
        {
            "location": "/workflows/", 
            "text": "A workflow is a collection of steps, environment variables,\nand other configurations for a single \nbitrise run\n.\n\n\n\nThe only requirement for a workflow is an ID.\n\n\n\nformat_version: 1.3.1\nworkflows:\n  test:\n\n\n\n\nIn this configuration we declared one workflow, with the ID \ntest\n.\nYou can define as many workflows as you want to, and run a specific\nworkflow with \nbitrise run WORKFLOWID\n.\n\n\n\nformat_version: 1.3.1\nworkflows:\n  first:\n  second:\n\n\n\n\nThis configuration contains two workflows, \nfirst\n and \nsecond\n,\nso you can execute both \nbitrise run first\n and \nbitrise run second\n.\n\n\n\n!!! note \nAvailable workflow list\n\nYou can list all the available workflows in a \nbitrise.yml\n\nby running \nbitrise run\n or \nbitrise workflows\n in the directory\nof the \nbitrise.yml\n.\n\n\n\nAdd steps to a workflow\n\n\n\nTo add steps to a workflow simply include \nsteps:\n and then the list of steps.\nFor example to run two script steps after each other:\n\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:\n        title: First step\n    - script:\n        title: Second step\n\n\n\n\nWhen you you run \nbitrise run test\n, the Bitrise CLI will run the two\nscript steps one by one, starting with \nFirst step\n and then\ncontinuing with \nSecond step\n.\n\n\n\nTo learn more about Build Steps, check the \nSteps\n section.\n\n\n\nDefine workflow specific parameters / environment variables\n\n\n\nIn addition to steps, you can also specify environment variables\nfor every workflow.\n\n\n\nThe environment variables you specify for a given workflow will be used\nwhen the workflow is executed and will be available for every step\nin the workflow.\n\n\n\nAn example, defining two environment variables (\nENV_VAR_ONE\n and \nENV_VAR_TWO\n)\nfor the \ntest\n workflow:\n\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    envs:\n    - ENV_VAR_ONE: first value\n    - ENV_VAR_TWO: second value\n\n\n\n\nChaining workflows and reusing workflows\n\n\n\nIt's also possible to \nchain\n workflows, to run one or more workflow\nbefore and/or after a specific workflow.\n\n\n\nAn example:\n\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n\n  send-notifications:\n    steps:\n    # send notifications\n\n  setup:\n    steps:\n    # setup steps to run\n\n  test:\n    before_run:\n    - setup\n    envs:\n    - IS_TEST: \ntrue\n\n    steps:\n    # test steps to run\n\n  ci:\n    before_run:\n    - test\n    after_run:\n    - send-notifications\n\n  deploy:\n    before_run:\n    - test\n    steps:\n    # steps to deploy\n    after_run:\n    - send-notifications\n\n\n\n\nIn the above example, if you run:\n\n\n\n\n\nbitrise run send-notifications\n : only the steps of the \nsend-notifications\n workflow will be executed\n\n\nbitrise run setup\n : only the steps of the \nsetup\n workflow will be executed\n\n\nbitrise run test\n : first the steps of the \nsetup\n workflow will be executed,\nthen the steps declared in \ntest\n workflow\n\n\nbitrise run ci\n: will execute the steps of the workflows, in the following order:\n\n\n\nsetup\n\n\ntest\n\n\nci\n (the \nci\n workflow doesn't have any steps, but that's not an issue, it just means\nthat no step will be executed here, the build will continue with the next workflow in the chain)\n\n\nsend-notifications\n\n\n\n\n\n\nbitrise run deploy\n: will execute the steps of the workflows, in the following order:\n\n\n\nsetup\n\n\ntest\n\n\ndeploy\n\n\nsend-notifications\n\n\n\n\n\n\n\n\n\nThis means that you can define what a \nsetup\n and \ntest\n should do\nin your project only once, in the \nsetup\n and \ntest\n workflows,\nand then you can resuse those in other workflows.\nThere's no need to duplicate steps between workflows.\n\n\n\nWhen you chain workflows, technically it's the same as if you'd create\none workflow which would include all steps from all the workflows\nchained after each other. This means that, for example,\none step's outputs will be available for\nevery other step which is executed after that step during the build,\nregardless of whether the other step is\nin the same or in another workflow; if a step is executed\nafter another one during the build, it can access the outputs\nof the previous steps. Just like if both steps would be in a single workflow.\n\n\n\nNote about workflow environment variables\n\n\n\nWorkflow specific environment variables are made accessible\n\nwhen the workflow is executed\n, and are available for workflows\nexecuted \nafter\n that workflow, \nbut not in the ones executed before\n that workflow.\n\n\n\nUsing the example above, if you \nbitrise run ci\n,\nthe \nIS_TEST\n environment variable \nwon't\n be available in the \nsetup\n\nworkflow, as that runs \nbefore\n the \ntest\n workflow,\nbut the environment variable \nwill\n be available for the steps in \ntest\n, \nci\n and\n\nsend-notifications\n workflows.\n\n\n\nThis is true even if the workflow doesn't have any steps.\nThis can be utilized if you want to create generic workflows,\nwhich can do different things based on environment variables,\nand you specify those environment variables through a \nwrapper\n workflow.\n\n\n\nExample:\n\n\n\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n\n  generic-build:\n    steps:\n    # steps which depend on `BUILD_TYPE` environment variable\n\n  build-alpha:\n    envs:\n    - BUILD_TYPE: alpha\n    after_run:\n    - generic-build\n\n  build-beta:\n    envs:\n    - BUILD_TYPE: beta\n    after_run:\n    - generic-build\n\n\n\n\nbuild-alpha\n nor \nbuild-beta\n has any steps, the steps are defined in \ngeneric-build\n,\nbut when you \nbitrise run build-alpha\n the \nBUILD_TYPE\n environment variable will be set to \nalpha\n,\nwhile if you \nbitrise run build-beta\n  the \nBUILD_TYPE\n environment variable will be set to \nbeta\n.\n\n\n\nImportant:\n as noted above, workflow defined environment variables are\nonly available in the workflow it defines it, and the ones \nexecuted after\n that workflow.\nIn the example above \ngeneric-build\n is included as \nafter_run\n workflow,\nso the \nBUILD_TYPE\n environment variable will be available in the steps of \ngeneric-build\n.\nBut if you'd use \nbefore_run\n instead of \nafter_run\n, that would mean that technically\nthe steps of \ngeneric-build\n are processed and executed before processing\nthe \nbuild-alpha\n or \nbuild-beta\n workflows, so the \nBUILD_TYPE\n environment\nvariable would not be available in the step of \ngeneric-build\n.\n\n\n\nUtility workflows\n\n\n\nUtility workflows are just a small trick to help you organize your workflows.\n\n\n\nIf you rely on workflow chaining, you might quickly have tons of small,\nreusable workflows. Finding the right workflow might get tricky.\n\n\n\nTo help with this, the Bitrise CLI supports a small notation called\n\nutility workflows\n.\n\n\n\nA workflow is considered as a utility workflow if it's ID starts\nwith an underscore character (for example \n_setup\n).\n\n\n\nUtility workflows are listed at the end of the workflow list if you\nrun \nbitrise run\n or \nbitrise workflows\n, and\n\nutility workflows can't be executed directly with a \nbitrise run\n.\n\n\n\nThese workflows can still be referenced in \nbefore_run\n and \nafter_run\n\nlists of course, and \nthere's absolutely no other difference\ncompared to a regular workflow\n.\n\n\n\nUsing the above example where there were five workflows\n(\nci\n, \ndeploy\n, \nsend-notifications\n, \nsetup\n and \ntest\n),\nif you run \nbitrise run\n in the directory of the \nbitrise.yml\n\n(just \nbitrise run\n, without specifying a workflow)\nyou'll get a single list of all five workflows:\n\n\n\nThe following workflows are available:\n * ci\n * deploy\n * send-notifications\n * setup\n * test\n\nYou can run a selected workflow with:\n$ bitrise run WORKFLOW-ID\n\n\n\n\nYou most likely don't want to run \nsetup\n, \ntest\n nor \nsend-notifications\n\nby itself, only through \nci\n or \ndeploy\n, so if you prefix those\nwith an underscore character to make them utility workflows,\nthe \nbitrise run\n output will better highlight which workflows\nare meant to be executed directly:\n\n\n\nThe following workflows are available:\n * ci\n * deploy\n\nYou can run a selected workflow with:\n$ bitrise run WORKFLOW-ID\n\n\nThe following utility workflows are defined:\n * _send-notifications\n * _setup\n * _test\n\nNote about utility workflows:\n Utility workflow names start with '_' (example: _my_utility_workflow).\n These workflows can't be triggered directly, but can be used by other workflows\n in the before_run and after_run lists.\n\n\n\n\nFull spec / list of available properties\n\n\n\nYou can find the complete list of available properties in the\n\nbitrise.yml format specification / reference\n\ndocs of the CLI.", 
            "title": "Workflows"
        }, 
        {
            "location": "/about-caching/", 
            "text": "The caching will tar all the cached directories and dependencies and store them securely in Amazon S3.\nNote that if you store files which are downloaded from a CDN / cloud storage you might not see any improvement,\nas downloading it from the Bitrise Build Cache storage will probably take about the same time as downloading\nit from its canonical CDN / cloud storage location.\nHowever Bitrise Caching still might help if you have reliability issues with the resource's, or dependency's canonical download location.\n\n\n\n!!! note \nCache Expiring\n\nThe Build Cache related to a \nspecific branch\n expires / is auto-deleted after 7 days,\n\nif there's no new build on that branch in the meantime\n.\n\n\n\nThis means that __if you do builds on a specific branch every day__ (more frequently than a week),\n__it'll never expire / will never be deleted automatically__,\nbut if you don't start a build on that specific branch for more than 7 days then the related cache\nwill be removed, and your next build will run like the first time, when there was no cache for that branch yet.\n\n\n\n\nSetup\n\n\n\nAll you need to get started is adding two Steps to your Workflow:\n\n\n\n\n\nOne for downloading the previous cache (if any): \nCache:Pull\n\n\nOne for checking the state of the cache and uploading it if required: \nCache:Push\n\n\n\n\n\nYou should add the \nCache:Pull\n (download) step right before you'd use the cache.\nFor example, in case of an iOS app, this can be between the \nGit Clone\n and the \nCocoaPods\n install steps.\nIf you intend to cache your \n./Pods\n directory you should not pull the cache before the \nGit Clone\n,\nbecause \nGit Clone\n will create the base directory for \n./Pods\n.\nBefore the \nGit Clone\n step your code (and the directories your code creates when git cloned) is not available on the Virtual Machine.\n\n\n\nThe \nCache:Push\n step can be the very last step in the Workflow.\nThe only thing you have to care about is that it should be after the step(s) which update the cached paths.\nFor example in case of \nCocoaPods\n you should put the \nCache:Push\n step anywhere after the \nCocoaPods\n install,\nbecause that's the step which generates, or updates the directory (\n./Pods\n) which is cached.\n\n\n\nExample build cache configurations\n\n\n\nYou can find example build cache configurations / guides at:\n\ndiscuss.bitrise.io/tags/build-cache\n\n\n\nDownloading and deleting caches\n\n\n\nYou can download and delete caches, for every branch which generated a cache,\non the \nSettings\n tab of the app, under the \nManage Build Caches\n section.\n\n\n\n!!! warning \nDelete a single branch's cache\n\nIf you only want to delete the cache which is related to a single branch,\nyou should also delete the default branch's cache too!\nFor more detail see the\n\nIf a build runs on a branch which doesn't have a cache yet, it'll get the main/default Branch's cache\n\nsection.\n\n\n\n!!! note\nYou can see the size of the caches and the last time a given cache was used in the popup.\n\n\n\nTechnical notes\n\n\n\nThe Build Cache feature is split into two parts, the \nBuild Cache API\n and the \nSteps\n.\n\n\n\nThe \nBuild Cache API\n is actually a really simple API, with only one responsibility:\nyou can request a download or an upload URL from the API.\nOf course it also makes sure that you have the required access rights to the resource (Build Cache Archive),\nbut other than that its only responsibility is providing the secure - time limited and expiring - download and upload URLs.\nIt does not process the files.\n\n\n\nThe \nSteps\n are the place where the \nmagic\n happens.\nThe whole logic of comparing caches to see if there was any relevant change and creating the cache archives is done by the Steps.\nThis also means that you can write your own Steps and implement your own comparison and compression logic.\nThe step just has to use the Build Cache API to get download and upload URLs, there's no restriction on the cache file format or on its content.\n\n\n\n!!! idea \nAdvanced notes\n\n* You can create your own Cache steps\n* You can create and use your own Build Cache server and API\n\n\n\nThe cache might or might not be available\n\n\n\nYou should write your code in a way that it won't fail if the cache can't be accessed.\n\n\n\nThe cache is downloaded over the internet\n\n\n\nWhich means that if you store files which are downloaded from a CDN / cloud storage you might not see\nany speed improvement,\nas downloading it from the Bitrise Build Cache storage will probably take about the same time as\ndownloading it from it's canonical CDN / cloud storage location.\n\n\n\nOne important note: storing a dependency in Bitrise Build Cache might help if you have \nreliability\n\nissues with the resource's / dependency's canonical download location.\nPopular tools / dependencies might get rate limited (\nexample: PhantomJS\n).\nCDN servers might have availability issues, like jCenter/Bintray. A few examples: \n#1\n, \n#2\n, \n#3\n.\nIf that's the case, storing the dependency in Bitrise Build Cache might help.\nIt might not improve the build time but \nit definitely can improve the reliability\n.\n\n\n\nThe cache is stored as one archive file\n\n\n\nSo if you have multiple paths you want to cache and any\nof the paths gets updated \nit'll update the whole cache archive\n,\nincluding all the paths you cache.\n\n\n\nIf a build runs on a branch which doesn't have a cache yet, it'll get the main/default Branch's cache\n\n\n\nThe build on a non default branch, to speed up things,\ncan (read-only) access the \nprimary\n branch's cache, until a successful\nbuild on the new branch. Once a build on the new branch\npushes a cache, new builds on that branch will get the branch's cache.\n\nCaches are stored and available for every branch separately.\n\n\n\n!!! note \nDefault branch\n\nYou can see which is your \ndefault branch\n on your\n\nbitrise.io\n app's \nSettings\n tab.", 
            "title": "About caching"
        }, 
        {
            "location": "/caching-cocoapods/", 
            "text": "This guide was moved to: \nhttps://discuss.bitrise.io/t/how-to-cache-cocoapods-dependencies/193", 
            "title": "Caching Cocoapods"
        }, 
        {
            "location": "/caching-gradle/", 
            "text": "This guide was moved to: \nhttps://discuss.bitrise.io/t/how-to-cache-gradle-dependencies/194", 
            "title": "Caching Gradle"
        }, 
        {
            "location": "/caching-maven/", 
            "text": "This guide was moved to: \nhttps://discuss.bitrise.io/t/how-to-cache-maven-dependencies/195", 
            "title": "Caching Maven"
        }, 
        {
            "location": "/caching-ruby-gems/", 
            "text": "This guide was moved to: \nhttps://discuss.bitrise.io/t/how-to-cache-ruby-gem-dependencies/196", 
            "title": "Caching Ruby GEMs"
        }, 
        {
            "location": "/run-your-build-locally-in-docker/", 
            "text": "To be able to run your Linux stack builds locally you'll need \ndocker\n.\n\n\n\nFor Linux just follow the \nofficial install instructions\n.\n\n\n\nFor Mac you can use \nDocker for Mac\n,\nwhich is probably the easiest way to get started.\n\n\n\nFor this example we'll use \nthis Bitrise Android sample project\n.\n\n\n\n!!! warning \nLarge images ahead\n\nThe official Bitrise Docker images are quite large, due to the fact that it includes\na wide variety of preinstalled tools. You'll need at \nleast\n 20-25 GB free disk space!\n\n\n\nIf you're not familiar with the \nBitrise CLI\n\nyou should try that first. You don't have to master the CLI,\nif you know what \nbitrise run WORKFLOW\n does, that should be enough for this tutorial.\n\n\n\nTL;DR;\n\n\n\nIf you're familiar with \ndocker\n and the \nbitrise\n CLI:\n\n\n\n\n\nInstall \ndocker\n\n\nMake sure you have your \nbitrise.yml\n in your repository (you don't have to commit it, but the file have to exist in your repository's root directory)\n\n\ncd\n into your repository's directory on your Mac/Linux\n\n\n\nIf you try to reproduce an issue, you should \ngit clone\n your repository into a \nnew directory\n,\nso that the directory will only contain the files which are committed into the repository!\n\n\n\n\n\n\ndocker pull bitriseio/docker-android:latest\n\n\ndocker run --privileged --env CI=false --volume \n$(pwd):/bitrise/src\n --volume \n/var/run/docker.sock:/var/run/docker.sock\n --rm bitriseio/docker-android:latest bitrise run WORKFLOW\n\n\n\n\nNote: if you want to just jump into the container and experiment inside, you can replace \n--rm bitriseio/docker-android:latest bitrise run WORKFLOW\n with \n-it bitriseio/docker-android:latest bash\n to start an interactive bash shell inside the container. E.g.: \ndocker run --privileged --env CI=false --volume \n$(pwd):/bitrise/src\n --volume \n/var/run/docker.sock:/var/run/docker.sock\n -it bitriseio/docker-android:latest bash\n.\n\n\n\n\n\n\n\n\n\nKeep reading if you want to read more details and notes about the process and commands!\n\n\n\nGetting started\n\n\n\nOpen your Terminal / Command Line, and download the docker image you want to use.\nIn general, if your project is an Android project but you don't use the Android NDK,\nto preserve precious disk space you should use the\n\nbitriseio/docker-android\n docker image.\nYou can find other official Bitrise docker images \non our Docker Hub page\n.\nFor this example we'll use the \nbitriseio/docker-android\n one.\n\n\n\nDownloading docker images from the \nDocker Hub\n is quite easy:\n\n\n\ndocker pull bitriseio/docker-android:latest\n\n\n\n\nBe prepared, this can take quite a bit of time, as this image is over 10 GB.\n\nIf the download would fail or hang, you can restart it any time by running\nthe same command again.\n\n\n\nOnce the download succeeds you have everything prepared to run your build\nin Docker! The last thing you have to do is to download your Bitrise build\nconfiguration (\nbitrise.yml\n).\n\n\n\n!!! note \nbitrise.yml\n\nYou can download your project's \nbitrise.yml\n from the \nWorkflow Editor\n\non \nbitrise.io\n, under the \nbitrise.yml\n section.\n\n\n\nIn your Terminal / Command Line go to (\ncd\n) the root directory\nof \nyour repository\n, and make sure your \nbitrise.yml\n is at this location.\n\n\n\nIf you try to reproduce an issue, you should \ngit clone\n your repository into a new directory,\nso that the directory will only contain the files which are committed into the repository!\n\nIt's a frequent reproducibility issue that you try to run the commands in your\nnormal working directory, where you most likely have files which are not\ncommitted into your repository, e.g. files which are in \n.gitignore\n.\n\n\n\nRun your builds\n\n\n\nThe only thing left to do is to actually run a build:\n\n\n\ndocker run --privileged --env CI=false --volume \n$(pwd):/bitrise/src\n --volume \n/var/run/docker.sock:/var/run/docker.sock\n --rm bitriseio/docker-android:latest bitrise run WORKFLOW\n\n\n\n\n!!! note\nIf you want to just jump into the container and experiment inside, you can replace \n--rm bitriseio/docker-android:latest bitrise run WORKFLOW\n with \n-it bitriseio/docker-android:latest bash\n to start an interactive bash shell inside the container.\nE.g.: \ndocker run --privileged --env CI=false --volume \n$(pwd):/bitrise/src\n --volume \n/var/run/docker.sock:/var/run/docker.sock\n -it bitriseio/docker-android:latest bash\n.\nAfter this, if you want to, you can run \nbitrise run WORKFLOW\n, which will run the workflow inside the container.\nTo exit from the container just run \nexist\n.\n\n\n\nDon't forget to replace \nWORKFLOW\n with the actual ID of your workflow in your \nbitrise.yml\n,\nwith something like \nprimary\n!\n\n\n\nThis command will share the current directory (the directory of your repository)\nas a shared volume with the docker container, and will make it available \ninside\n the\ncontainer at the path \n/bitrise/src\n.\n\n\n\nThe \n--env CI=false\n flag sets the environment variable \nCI\n to \nfalse\n - this will\nmake Bitrise CLI to skip certain steps which only make sense to run in a Continuous Integration\nenvironment. An example is the \nGit Clone\n step - you already have your code, so there's\nno need to git clone it again inside the docker container (that's why we\nshared the code directory as a \n--volume\n).\n\n\n\nThe \n--rm\n flag tells docker to discard the container after the \ndocker run\n\ncommand finishes. This means that if you run the command again, the only thing which will\npersist between the \ndocker run ..\n commands are the files stored at the shared \n--volume\n\n(in your repository's directory). Every other file which is generated into a temp\nor any other location will be discarded / won't be kept. If you want to\ndebug the container after a failed build feel free to remove the \n--rm\n flag,\nand check out a Docker tutorial about how you can connect to an existing\ndocker container - \nNote: simply running the command again \nwill not\n use the same container,\nbut \nwill create a new one\n!\n\n\n\nThe \n--privileged\n flag allows access control of the host (!) from the docker container,\nso you should never use this flag unless you trust the docker image you will use!\nThis flag is required for allowing VPNs to work (to change network configs\nof the host) for example.\n\n\n\nThe \n--volume \n/var/run/docker.sock:/var/run/docker.sock\n flag exposes the\ndocker socket from the host for the container - this is required\nif you want to run other docker containers from whithin the container,\nor if you want to run any \ndocker\n command during your build / inside the container.", 
            "title": "How to run your build locally in Docker"
        }, 
        {
            "location": "/use-your-own-docker-image/", 
            "text": "!!! note \nHave a question or suggestion? Join the discussion!\n\nYou can find this guide's discussion topic at:\n\ndiscuss.bitrise.io/t/69\n\n\n\nThere are two ways to use \ndocker\n on \nbitrise.io\n:\n\n\n\n\n\nRun \ndocker\n commands yourself, e.g. with a \nScript\n step\n\n\nUse a Linux/Android stack and set the environment docker image for the app (\nSettings\n tab)\n\n\n\n\n\nThe first option is strongly preferred, you should not change the base environment docker image (on the \nSettings\n tab on bitrise.io)\nunless you really have to!\n Running the \ndocker\n commands yourself during the build is way more flexible,\nand provides an overall better control.\n\n\n\nRun docker commands during the build\n\n\n\nThis is the preferred way of using docker\n, both locally and on \nbitrise.io\n.\n\n\n\nAll you have to do is:\n\n\n\n\n\nAdd a \nScript\n step to your workflow\n\n\nAnd in the \nScript\n step run the \ndocker\n (or \ndocker-compose\n, etc.) command you want to\n\n\nAdditionally, if you want to run the build on \nbitrise.io\n, make sure that you select\na Linux/Android stack for the app; those stacks have \ndocker\n preinstalled and ready to use our of the box.\n\n\n\n\n\nYou can find a sample repository on GitHub,\nwhich is configure to run on your Mac/Linux using the \nBitrise CLI\n:\n\nhttps://github.com/bitrise-samples/minimal-docker\n\n\n\nRunning docker hello-world\n\n\n\nFollowing the official \ngetting started\n guide for example, to run the \nhello world\n docker image\nyour bitrise build configuration yml can be as simple as:\n\n\n\n---\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\ntrigger_map:\n- push_branch: \n*\n\n  workflow: primary\n- pull_request_source_branch: \n*\n\n  workflow: primary\nworkflows:\n  primary:\n    steps:\n    - activate-ssh-key@3.1.1:\n        run_if: '{{getenv \nSSH_RSA_PRIVATE_KEY\n | ne \n}}'\n    - git-clone@3.4.1: {}\n    - script@1.1.3:\n        title: docker run hello-world\n        inputs:\n        - content: |-\n            #!/bin/bash\n            # fail if any commands fails\n            set -e\n            # debug log\n            set -x\n\n            docker run hello-world\n\n\n\n\nBuild and run a Dockerfile\n\n\n\nA bit more complex example, using your own \nDockerfile\n in your repository to define the docker environment:\n\n\n\n---\nformat_version: 1.3.1\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\ntrigger_map:\n- push_branch: \n*\n\n  workflow: primary\n- pull_request_source_branch: \n*\n\n  workflow: primary\nworkflows:\n  primary:\n    steps:\n    - activate-ssh-key@3.1.1:\n        run_if: '{{getenv \nSSH_RSA_PRIVATE_KEY\n | ne \n}}'\n    - git-clone@3.4.1: {}\n    - script@1.1.3:\n        title: docker run\n        inputs:\n        - content: |-\n            #!/bin/bash\n            # fail if any commands fails\n            set -e\n            # debug log\n            set -x\n\n            docker build -t bitrise-minimal-sample .\n            docker run --rm bitrise-minimal-sample\n\n\n\n\nThis workflow will:\n\n\n\n\n\nGit Clone your repository\n\n\nAnd then run \ndocker build -t bitrise-minimal-sample .\n and \ndocker run --rm bitrise-minimal-sample\n in the repository's root.\n\n\n\n\n\nIf you have a \nDockerfile\n like this in the root of the repository:\n\n\n\nFROM alpine:3.3\n\nCMD cat /etc/alpine-release\n\n\n\n\nThe output will be something like:\n\n\n\n+------------------------------------------------------------------------------+\n| (2) docker run hello-world                                                   |\n+------------------------------------------------------------------------------+\n| id: script                                                                   |\n| version: 1.1.3                                                               |\n| collection: https://github.com/bitrise-io/bitrise-steplib.git                |\n| toolkit: bash                                                                |\n| time: 2016-11-21T14:28:23Z                                                   |\n+------------------------------------------------------------------------------+\n|                                                                              |\n+ docker build -t bitrise-minimal-sample .\nSending build context to Docker daemon 69.12 kB\n\nStep 1 : FROM alpine:3.3\n3.3: Pulling from library/alpine\n985c5f84712b: Pulling fs layer\n985c5f84712b: Verifying Checksum\n985c5f84712b: Download complete\n985c5f84712b: Pull complete\nDigest: sha256:ec40755933414575748cecf929f1f2012cace2d2e0f8147e77e652d600ff17d7\nStatus: Downloaded newer image for alpine:3.3\n ---\n 6c2aa2137d97\nStep 2 : CMD cat /etc/alpine-release\n ---\n Running in 507cfb961cc7\n ---\n 02a0da3ac697\nRemoving intermediate container 507cfb961cc7\nSuccessfully built 02a0da3ac697\n+ docker run --rm bitrise-minimal-sample\n3.3.3\n|                                                                              |\n+---+---------------------------------------------------------------+----------+\n| \u2713 | docker run hello-world                                        | 4.24 sec |\n+---+---------------------------------------------------------------+----------+\n\n\n\n\nYou can find a sample repository on GitHub,\nwhich is configure to run on your Mac/Linux using the \nBitrise CLI\n:\n\nhttps://github.com/bitrise-samples/minimal-docker\n\n\n\nUsing docker-compose\n\n\n\nThe previous example could be even shorter using \ndocker-compose\n.\n\n\n\nFor example, if you have a \ndocker-compose.yml\n like this in your repository root (where the \nDockerfile\n is):\n\n\n\nversion: '2'\nservices:\n  sample-app:\n    build: .\n\n\n\n\nYou can replace the\n\n\n\ndocker build -t bitrise-minimal-sample .\ndocker run --rm bitrise-minimal-sample\n\n\n\n\nlines with a single \ndocker-compose\n call:\n\n\n\ndocker-compose run --rm sample-app\n\n\n\n\nDocker compose will build and run the image automatically, you don't have to specify a \n-t\n tag - the \nservices\n\nname will be used by \ndocker-compose\n to tag the image automatically.\n\n\n\nYou can find a sample repository on GitHub,\nwhich is configure to run on your Mac/Linux using the \nBitrise CLI\n:\n\nhttps://github.com/bitrise-samples/minimal-docker\n\n\n\nUsing bitrise.io custom docker image option\n\n\n\n\n\nUse a Linux/Android stack and set the environment docker image for the app (\nSettings\n tab)\n\n\n\n\n\n!!! warning \nCustom Android docker image\n\nCreating and maintaining your own Android Docker image can be quite time consuming!\n\nIf what you need is just to install a couple of additional tools, you should do that with e.g. a Script step instead!\n\nFor more information see the \nInstall Any Additional Tool\n guide.\n\nYou should only use your own Android docker image if you really have to!\n\n\n\nIf you want to run your build in a custom docker environment,\n\nyou should base your own docker image on one of our base Docker images\n, as those have every base tool pre-installed,\nthe standard bitrise directories created, the Environments (like \n$BITRISE_DEPLOY_DIR\n) set,\nand are pre-cached on the build virtual machines.\n\nIf you decide to create your own Docker image please read this guide, from start to finish!\n\n\n\nFeel free to send Pull Request for our images if you think we missed something, which would be useful for everyone who uses our images!\n\n\n\nThe bare-minimum base image can be found at:\n\n\n\n\n\nDocker Hub: \nhttps://hub.docker.com/r/bitriseio/docker-bitrise-base/\n\n\nGitHub: \nhttps://github.com/bitrise-docker/bitrise-base\n\n\n\n\n\nAndroid base image, built on the bare-minimum base image, adding Android specific tools and Envs:\n\n\n\n\n\nDocker Hub: \nhttps://hub.docker.com/r/bitriseio/docker-android/\n\n\nGitHub: \nhttps://github.com/bitrise-docker/android\n\n\n\n\n\nAndroid NDK image, built on the Android base image, adding a pre-installed Android NDK and Envs:\n\n\n\n\n\nDocker Hub: \nhttps://hub.docker.com/r/bitriseio/android-ndk/\n\n\nGitHub: \nhttps://github.com/bitrise-docker/android-ndk\n\n\n\n\n\nAs you can see, if you want to base your own image on one of our available images you can do that by specifying\nit at the very top of your \nDockerfile\n with a \nFROM bitriseio/IMAGE-ID:latest\n,\nfor example: \nFROM bitriseio/docker-bitrise-base:latest\n\n\n\n!!! warning \nDon't use the \n-alpha\n images for your builds\n\nFor every docker image we have on Docker Hub we have a \n-alpha\n post fixed version too.\nthe \n-alpha\n ones are rebuilt frequently and are \nnot precached on \nbitrise.io\n,\nso you should avoid those. The only purpose of the \n-alpha\n images is to provide\nready to use test environments for us, before we would publish a non \n-alpha\n version.\n\n\n\nImportant\n: you have to use the \nDocker Hub ID\n of the image you want to use as\nthe base image (ex: \nbitriseio/docker-android\n, \nbitriseio/android-ndk\n or \nbitriseio/docker-bitrise-base\n).\n\n\n\nYou can find an example project which extends our Android image by\ninstalling additional SDKs at: \nhttps://github.com/viktorbenei/docker-bitrise-android-ext\n\n\n\nCreate the Docker Image, to be able to use it on bitrise.io\n\n\n\nYou can create it any way you want to and push it into any Docker registry.\nThe only requirement is that it have to be a \npublic\n image, private images are not (yet) supported.\n\n\n\nWe'll show a quick example with GitHub and Docker Hub, using Docker Hub's\nautomatic builds (it'll automatically create a new Docker image for you every time you change your Dockerfile on GitHub).\n\n\n\nWhat you need for this guide:\n\n\n\n\n\nGitHub account\n\n\nDocker Hub account\n\n\n\n\n\nFirst, you have to create a new repository on GitHub, and add at least a \nDockerfile\n, with a \nFROM bitriseio/IMAGE-ID:latest\n\nstatement at the top of the \nDockerfile\n, like the one you can see at:\n\nhttps://github.com/viktorbenei/docker-bitrise-android-ext/blob/master/Dockerfile#L1\n\n(\ndon't forget to commit \n push it!\n).\n\n\n\n!!! note \nWhich image to use?\n\n1. If you don't need the Android tools you should base your image on\nthe \nbitrise-base\n (\nbitriseio/docker-bitrise-base\n) image\nand install just the things you need.\n1. If you need the Android tools then you should use\nthe \nandroid\n (\nbitriseio/docker-android\n) image\nor the \nbitrise-base\n (\nbitriseio/docker-bitrise-base\n) image.\n1. You should only use the \nandroid-ndk\n (\nbitriseio/android-ndk\n) image\nas the base image if you actually need the NDK.\n\n\n\nFrom a performance perspective: you should install the least amount of tools in your image,\nas it'll make your image smaller, which means faster download \n build start.\n\n\n\n\nYou now have the description of your image. Go to \nDocker Hub\n, click \nCreate\n in the top menu and select \nCreate Automated Build\n.\nIf you haven't linked your GitHub account to your Docker Hub account you'll have to do it now.\nOnce the link between GitHub and Docker Hub is established you'll see a list of your GitHub repositories.\nSelect the repository you just created (the one with the \nDockerfile\n in its root), and follow the guide.\n\n\n\nCongratulation! You now have a fully automatic Docker image creation, based on your GitHub repository!\nThis means that every time you change the repository, commit \n push the change Docker Hub will pick up the new \nDockerfile\n and will build a Docker image for you.\n\n\n\nOne more thing you should do is to Link your image to our base image you use, so that every time our base image is updated your image will update as well.\n\n\n\nThis is especially important if you base your Docker image on one of our Android images.\nThose images are quite large, and if we have to do a change in the base Docker image and you don't build a new image,\n\nyour image will require the old base image, which won't be pre-cached\n on the build Virtual Machines anymore!\nThis means that to \ndocker pull\n your image it won't be enough to download just the diffs anymore,\n\nthe whole image will have to be pulled\n which might even result in errors like \nno space left on the device\n -\nto \ndocker pull\n the base Android image, if no cache is available, it already requires ~10GB disk space, and the Android NDK image is even larger!\n\n\n\nLink your image to one of ours\n: you can do this on DockerHub, on the \nBuild Settings\n tab,\nunder the \nRepository Links\n section. Just specify the ID of our Docker image (ex: \nbitriseio/docker-android\n),\nsave the link and the next time the specified image is updated your image will be re-built as well (using the \nDockerfile\n in \nyour\n repository).\n\n\n\nUse your own (public) Docker image for your builds\n\n\n\nOnce you have your own Docker image and you verified that it can be \ndocker pull\n-ed,\nyou can set its ID on the \nSettings\n tab of your app on \nbitrise.io\n,\nin the \nStack Selector\n section.\n\n\n\nYou just have to copy paste the ID of your image (e.g. \nbitriseio/docker-bitrise-base\n)\ninto the \nDocker image to use\n field and click the \nSave\n button.\nYour next build will use the image you specified.\n\n\n\n!!! note \nHave a question or suggestion? Join the discussion!\n\nYou can find this guide's discussion topic at:\n\ndiscuss.bitrise.io/t/69", 
            "title": "Use your own Docker image"
        }, 
        {
            "location": "/adding-projects-with-submodules/", 
            "text": "The Problem\n\n\n\nA common issue is that you have a project, that has one or more submodules\nor other private repository dependencies.\n\n\n\nThis means that you have to grant access to all repositories in order to make\nthe build successful.\n\n\n\nIf your git hosting service supports it, the best, most secure way is to\nregister \nthe same SSH key\n for every repository you have to access during the build,\nas \nDeployment keys\n. Due to technical reasons (true for most git hosting services),\nyou should not use multiple SSH keys, instead use the same SSH key for every repository!\n\n\n\nIf your git hosting service does not support the use of a single SSH key\nfor multiple repositories\n (for example GitHub does not support this!),\nyou'll have to register the SSH key for a user account.\n\n\n\nIn this case (e.g. GitHub), there is an easy workaround for the issue.\nSimply by adding a \nbot\n / \nmachine\n user with the SSH key to the repositories\nyou can solve the problem. \nAdd the SSH key you would like to use to the user and add the user to the projects\n.\nYou don't have to add the \nbot\n user with read and write permission,\nit is enough to assign read permissions.\nAfter that you can use the SSH key to clone to the repository or any submodule.\nIt's that simple.\n\n\n\nOn GitHub this is the recommended way to solve this problem,\nthey refer to these kind of users as \nmachine\n\nusers - reference:\n\nhttps://developer.github.com/guides/managing-deploy-keys/#machine-users\n.\n\n\n\nOf course it's not required to use a special \nbot\n / \nmachine\n user, you can add the\nSSH key to your own account on the git hosting service, but the best practice is\nto use a machine user for this use case, and grant read only access for this\nmachine user, for those repositories you want to access during the build.\n\n\n\nOn GitLab and Bitbucket it's possible to register a single SSH key\nas Deploy key to multiple repositories, without the need to create a \nbot\n / \nmachine\n user.\n\n\n\n!!! note \nUse SSH URLs everywhere\n\nMost services support SSH key based authentication \nonly\n for SSH URLs\n(ex: \ngit@github.com:bitrise-io/bitrise.git\n), and \nnot\n for HTTPS URLs\n(ex: \nhttps://github.com/bitrise-io/bitrise.git\n)!\nThis means, that \nevery private repository you want to use have to be addressed with the SSH url\n.\nIf you have direct private git repo references in your \nPodfile\n you'll have to\nuse the SSH url there as well! Same applies for submodules and every other private\ngit repository url you want to use with the SSH key you register on \nBitrise.io\n!\n\n\n\nHow to do this when you add a new app\n\n\n\nThere are three options to grant \nBitrise\n access to your repository:\n\n\n\n\n\nAuto-add SSH keypair\n: \nDon't use this option if you use submodules.\n\nThis option will add the SSH key only to the main repository, the one you selected\nin the first section of the Add New App page.\n\n\nGenerate SSH keypair\n: will generate a key for you on the \nBitrise\n website\nand you will have to copy it manually to the given user.\n\nThis is the recommended option if you want to use submodules / have to access multiple repositories during your build.\n\n\nUse your own SSH keypair\n: can be used if you also have the private key of the given user.\nYou just have to paste the private key and \nBitrise\n will be able to access the repositories.\nIf you'd want to go with this option, it's important that \nthe SSH key have to be an RSA key, without a passphrase!\n\nYou can find an example of how you can generate a key like that \nhere\n.\n\n\n\n\n\nWhen you already registered your App on Bitrise.io\n\n\n\nWhen you've already registered an App, the steps to handle the SSH keys are the same\nas when adding a new app, the only difference is\nthat you'll have to do it on the app's \nSettings\n tab.\n\n\n\nYou can find the public SSH key of the app in the \nSettings\n of the given\napp on \nBitrise\n. Simply scroll down to the \nSSH settings\n section\nand click \nShow SSH Public Key\n.\n\n\n\nCopy the key to the given user and you are ready to build!\nOr you can also update the given app's SSH key by clicking the \nChange SSH Keypair\n button\nand choosing one of the three options, just like on the \nAdd new App\n page.\n\n\n\nService specific notes / guides\n\n\n\nGithub\n\n\n\nDon't add the key to the repository as a Deploy Key!\n\nAdd it to a GiHub User's account instead, who has access to the repositories.\nThe recommended way is to use a \nmachine\n user\n,\nbut of course you're free to add it to any user account which has\nat least read only access to all of the repositories used during the build.", 
            "title": "Adding projects with submodules or with private CocoaPods repos"
        }, 
        {
            "location": "/android-x86-emulator/", 
            "text": "A frequent question is whether it's possible to run the Android x86 emulator, instead of the ARM emulators.\n\n\n\nAs an experiment we now allow all the required nested virtualization bits for the x86 Android emulators \non the Linux/Android stacks\n, which means that we can use the virtualization that the host machine has for running an emulator with x86 architecture, and we can thus skip the slow emulation. This is still 10-15% slower than when run on a physical machine, but it is still much faster than the armv7-a emulator.\n\n\n\nThis feature is only available on the Linux/Android stacks\n right now.\n\n\n\nAlternatives (for other stacks)\n\n\n\nFor now, the best workaround seems to be \nOracle's Ravello\n ( \na related blog post\n )\nif you need a full emulator (with UI),\nor \nrobolectric\n for unit tests.\n\n\n\nAnother alternative might be to use a service like \nAWS Device Farm\n or \nOpen STF\n,\nwhere you can run the tests on real devices instead of in an emulator. Bitrise integrations are available for both those services.\n\n\n\nIf you know about any other, \nfeel free to contact us\n!", 
            "title": "Android x86 Emulator"
        }, 
        {
            "location": "/available-environment-variables/", 
            "text": "Interactive available Environment Variables list\n\n\n\nIn the \nWorkflow Editor\n on \nbitrise.io\n\nyou can click into any input field of a Step and a green \nInsert Variable\n button will appear.\n\n\n\nClick this button and you'll get a full list of available Environment Variables.\nYou can search in this list, and when you find the one you're looking for just click it,\nand it'll be inserted into the input field for you.\n\n\n\nThis is an interactive list, which includes Environment Variables generated by previous Steps!\nThis means, that if you click into an input of the third Step of your Workflow,\nthe list will include all the Environment Variables (outputs) generated by the first and second Steps,\nbut not the ones which will be generated by the forth, fifth, ... Steps.\n\n\n\nExposed by the Bitrise CLI\n\n\n\nThese Environment Variables are available everywhere, even if you run the build on your own Mac\n(using the \nBitrise CLI\n):\n\n\n\n\n\nBITRISE_TRIGGERED_WORKFLOW_ID\n : the Workflow's ID which was triggered, either with \nbitrise run\n or \nbitrise trigger\n\n\nBITRISE_TRIGGERED_WORKFLOW_TITLE\n : the Workflow's title (if you provided one) which was triggered,\neither with \nbitrise run\n or \nbitrise trigger\n\n\nBITRISE_BUILD_STATUS\n : current status of the build - \n0\n if there are no failed steps yet,\n\n1\n if there's at least one failed step\n\n\nBITRISE_SOURCE_DIR\n : path of source / base workdir. By default it's the directory where \nbitrise\n runs\n(e.g. your repository root), unless you provide a different value.\nCan be overwritten during the build, which will change the working directory for subsequent Steps in the build.\n\n\nBITRISE_DEPLOY_DIR\n : directory to store artifacts / files for deploy.\nIt's a temporary directory created by \nbitrise\n CLI by default, and can be overwritten before starting \nbitrise\n CLI.\n\nThe content of this directory can be attached to the \nbitrise.io\n build page, as artifacts,\nwith the \nDeploy to Bitrise.io\n step for example.\n\n\nCI\n : indicates whether \nbitrise\n CLI is running in CI (Continuous Integration) mode. Value can be \ntrue\n or \nfalse\n.\n\n\nPR\n : indicates whether \nbitrise\n CLI is running in PR (Pull Request) mode. Value can be \ntrue\n or \nfalse\n.\n\n\n\n\n\nExposed by Bitrise.io\n\n\n\nThese environments are available for builds running on \nbitrise.io\n Virtual Machines:\n\n\n\n\n\nBITRISE_BUILD_NUMBER\n : build number of the build on \nbitrise.io\n\n\nBITRISE_APP_TITLE\n : app title on \nbitrise.io\n\n\nBITRISE_APP_URL\n : app URL on \nbitrise.io\n\n\nBITRISE_APP_SLUG\n : app slug on \nbitrise.io\n\n\nBITRISE_BUILD_URL\n : build's URL on \nbitrise.io\n\n\nBITRISE_BUILD_SLUG\n : build's slug on \nbitrise.io\n\n\nBITRISE_BUILD_TRIGGER_TIMESTAMP\n : triggered at timestamp of the build\n\n\nGIT_REPOSITORY_URL\n : git repository URL\n\n\nBITRISE_GIT_BRANCH\n : the branch which triggered the build (if any)\n\n\nBITRISE_GIT_TAG\n : tag which triggered the build (if any)\n\n\nBITRISE_GIT_COMMIT\n : commit hash which triggered the build (if any)\n\n\nBITRISE_GIT_MESSAGE\n : commit message - or the message you specified if you triggered the build manually\n\n\nBITRISE_PULL_REQUEST\n : Pull Request ID, which triggered the build (if any)\n\n\nBITRISE_PROVISION_URL\n : Provisioning Profile(s) URL - the ones uploaded to \nbitrise.io\n.\nPipe character (\n|\n) separated list, in case more than one value is provided.\n\n\nBITRISE_CERTIFICATE_URL\n : Certificate / Identity URL - the one uploaded to \nbitrise.io\n.\nPipe character (\n|\n) separated list, in case more than one value is provided.\n\n\nBITRISE_CERTIFICATE_PASSPHRASE\n : Certificate / Identity's password / passphrase,\nthe one specified on \nbitrise.io\n.\nPipe character (\n|\n) separated list, in case more than one value is provided.\n\n\nBITRISE_IO\n : indicates that the build is running in a bitrise.io environment. Value is set to \ntrue\n by bitrise.io when it starts a build.", 
            "title": "Available Environment Variables"
        }, 
        {
            "location": "/github-pull-request-status-troubleshooting/", 
            "text": "If you can't see the nice little green/red CI checks status (like the one you can see on our \nBlog,\nabout the Pull Request status feature announcement\n)\non the Pull Request's GitHub page, you should check this list for troubleshooting.\n\n\n\nMake sure to select a Service credential User who has a connected GitHub account\n\n\n\nThe first requirement is that the \nService credential User\n of the app on \nbitrise.io\n\nhave to connect his/her GitHub account, or else \nbitrise.io\n\nwon't be able to send the status messages to GitHub.\n\n\n\n!!! note \nSet the Service credential User for the app\n\nYou can set which Team Member's service connections should be used when Bitrise tries to communicate\nwith GitHub or any other connected service (like Bitbucket or Xamarin) API.\nYou can set this user on the \nTeam\n tab of the app, in the \nService credential User\n section.\nDefault is to use the Owner's credentials.\n\n\n\nIf you want to manage your connected services on \nbitrise.io\n,\njust open your \nAccount Settings\n page.\nOn the left side you can find the \nConnected Accounts\n section,\nwhere you can connect and disconnect other services (like GitHub, Bitbucket or Xamarin)\nto your \nbitrise.io\n account.\n\n\n\n!!! note \nMake sure you connected the correct GitHub account\n\nIf you have more than one GitHub account you should also check whether you connected the right one,\nwhich can access the repository.\nYou can check which GitHub user you connected by clicking the \nGitHub\n text\non your \nbitrise.io\n \nAccount Settings\n page,\nit will open the connected GitHub user's page.\n\n\n\nIf your builds are triggering, but you don't see the Pull Request / Build status indicator on GitHub\n\n\n\nIf you have Pull Request testing enabled you should see a green/yellow/red CI check status indicator at every Pull Request on GitHub,\n\nlike the one you can see on our Blog about the Pull Request status feature announcement\n.\n\n\n\nIf your builds are running fine but you still can't see the status indicator on GitHub:\n\n\n\n\n\nMake sure that you granted access to your GitHub organization for Bitrise\n.\nIt might be that you did not \ngrant access\n to the GitHub organization\n(who owns the repository) for Bitrise, so even though everything else is in place,\nGitHub will still reject the status message \nbitrise.io\n sends to it.\nSee the\n\nGrant access to a GitHub Organization\n\nguide for more information.\n\n\nAnother thing might be that the user you specified as the\n\nService credential User\n\ndoesn't have \nadministrator rights\n on GitHub \nfor the repository\n.\n\nAdministrator rights are required in order to send status messages to GitHub.\n\nUsually you face this issue (no access to the organization) when you add your app on \nbitrise.io\n.\nIf you did not select the repository from the GitHub list on the \nAdd New App\n page,\nbut rather copy-pasted your repository's URL, you still need to grant access to the organization to see\nthe build status indicator on GitHub.\nSee the\n\nGrant access to a GitHub Organization\n\nguide for more information, and make sure that you selected the right\n\nService credential User\n\nfor the app on \nbitrise.io\n.\n\n\nIf you renamed or transferred the repository on GitHub\n.\nGitHub in general is quite good with handling repository rename and transfer,\nand usually redirects to the right url automatically, but this is not the case with the Status API.\nFortunately the fix for this is quite simple: \nGo to the \nSettings\n tab of your app on \nbitrise.io\n\nand make sure that the \nRepository URL\n is up to date\n, and does not point to the previous location of the repository,\nbut to the current location of the repository.", 
            "title": "GitHub Pull Request / build Status indicator troubleshooting"
        }, 
        {
            "location": "/grant-access-to-github-organization/", 
            "text": "Steps to grant access for Bitrise.io to a given GitHub Organization:\n\n\n\n\n\nOpen \nhttps://github.com\n\n\nIn the top right corner click your user / avatar\n\n\nIn the list select \nSettings\n\n\nOn the left side select \nAuthorized applications\n\n\nIn the left-side navigation, click \nAuthorized OAuth Apps\n, and choose \nBitrise\n\n\nLocate the Organization you want to grant access to, and click \nGrant\n.\n\n\n\n\n\n\n\n\nYou can now go back to \nbitrise.io\n and you\nshould see the organization / repository on the Add New App page.\n\n\n\nIf there's no \nGrant access\n button for the organization in the \nOrganization access\n section\n\nand instead you see a red cross icon, that means that the access was previously granted but then it was revoked.\nYou can fix this by selecting the organization on the left side, in the\n\nOrganization settings\n section, then on the \nOrganization settings\n\npage select \nThird-party access\n, locate \nBitrise\n, click the \npencil icon\n,\nand click the \nGrant access\n button there.\n\n\n\n!!! note \nIn case the repository is a fork of another private repository\n\nIn case the repository is a fork of another private repository which belongs to \n(another) organization\n you\nhave to repeat these steps and grant access for Bitrise for the orgianization \nwhich owns the original repository\n.\n\n\n\nThis is a GitHub limitation, in order to be able to access a private repository fork\n__you have to grant access for the service (Bitrise) in both repositories__;\nin the fork and in the original repository/organization too.", 
            "title": "Grant access to a GitHub Organization"
        }, 
        {
            "location": "/how-to-change-the-owner-of-an-app/", 
            "text": "It can happen that you need to transfer an Application on \nBitrise\n\nto another User or to an Organization.\nThis can be done in a few seconds by following these quick steps:\n\n\n\n\n\nLogin with the \ncurrent Owner\n of the App on \nbitrise.io\n\n\nOpen the App's page and go to the \nTeam\n tab\n\n\nMake sure the new owner of the App is in the team or add her/him if you need to.\nIn case if you want to transfer the ownership to an Organization,\nyou have to be part of the Organization.\n\n\nClick the \nTransfer ownership\n button next to your name\n\n\nAfter selecting the new owner from the dropdown, click on the purple button that says\n\nTransfer ownership to \nUsername\n, and you are done!\n\n\n\n\n\n!!! note \nGood to know: Do you want to remain the connected services user?\n\nIf you enable the \nDo you want to remain the connected services user?\n option in the Transfer popup,\nthen during the transfer you'll be explicitly marked as the \nconnected services\n user for the app.\n\n\n\nThe \nconnected services\n user specifies which Team Member's service connections / accounts\nconnected to his/her Bitrise user should be used when Bitrise tries to communicate\nwith another service (GitHub, Bitbucket, ...), for example to send back build status information,\nor to register a new SSH key automatically.\n\nAdmins of an app can change this any time on the `Settings` tab of the app.", 
            "title": "How to change the owner of an app"
        }, 
        {
            "location": "/how-to-generate-ssh-keypair/", 
            "text": "If you want to do manual SSH key configuration on \nbitrise.io\n\nyou can generate an appropriate SSH keypair with a simple Command Line / Terminal command:\n\n\n\nssh-keygen -t rsa -b 4096 -P '' -f ./bitrise-ssh\n\n\n\n\nThis will generate two files in the current directory (the directory where\nyou run the command):\n\n\n\n\n\nbitrise-ssh\n (private key)\n\n\nbitrise-ssh.pub\n (public key)\n\n\n\n\n\nYou should copy paste the \npublic key\n to your Git hosting service (GitHub, Bitbucket, etc.),\nand when you register your app on \nbitrise.io\n\nyou'll have to provide the \nprivate key\n.", 
            "title": "How to generate an SSH key pair"
        }, 
        {
            "location": "/i-cant-see-my-github-organization-repository-on-the-add-new-app-page/", 
            "text": "Most likely you did not grant access to \nbitrise.io\n when you authenticated\nwith GitHub to access the organization (or a repository owned by the organization).\n\n\n\nTo fix this you should follow this guide: \nGrant access to a GitHub Organization\n.", 
            "title": "I can't see my GitHub organization / repository on the Add New App page"
        }, 
        {
            "location": "/no-builds-are-triggered-automatically/", 
            "text": "If no builds are triggered automatically when you push code into your repository,\nyou should \nmake sure your webhook is properly set on the git hosting\nservice you use (GitHub, Bitbucket, GitLab, ...)\n.\n\n\n\nYou can find the webhook related setup and troubleshooting guides\nin the \nWebhooks section of the DevCenter\n.\n\n\n\nIf the webhook is present on the git hosting service, you should\ncheck the \nTroubleshooting section of the Webhooks docs\n.", 
            "title": "No builds are triggered when I push code into the repository"
        }, 
        {
            "location": "/organization-faq/", 
            "text": "What is an Organization on Bitrise?\n\n\n\nOrganizations are used to seamlessly manage bigger teams and members inside a company.\nIt is a place to gather all the people working on each of your company's\napps and delegate them through creating different groups.\n\n\n\nHow do I create a new Organization?\n\n\n\nJust go to your \naccount settings page\n,\nscroll down and click on the green \nNew organization\n button at the bottom left.\nA popup will appear to guide you through the process.\n\n\n\nHow do I add an app to an Organization?\n\n\n\nFirst, you have to be added to at least one \nGroup\n of the Organization.\nThen, go to the \nAdd new app page\n and select\nthe Organization in the \ndropdown at the top left\n.\n\n\n\nYou can change this throughout the process of adding the app, or after you finished adding the app,\nchanging the owner is possible through \ntransferring ownership\n.\n\n\n\nHow do I migrate/transfer my existing apps to an Organization?\n\n\n\nOnce you've created an Organization, you can transfer any of your apps to it by going to\nthe \nTeam\n tab of the app you want to transfer, and clicking the \nTransfer ownership\n button at the top right.\n\n\n\nWhat are \nOwners\n inside an Organization?\n\n\n\nOrganizations can have more than one Owner.\nOwners can \nmanage billing\n, \ndelete apps\n and \nchange the billing email\n,\ncreate, delete and assign \ngroups\n to apps.\n\n\n\nWhat can \nMembers\n of an Organization do?\n\n\n\nMembers are displayed on the \nPeople\n tab of the Organization's page.\nOne can be added as a member by including them in a group on the \nGroups\n tab.\nThese members have the option to add apps to the Organization and view a list of all of the\nOrganization's apps on the \nApps\n tab.\nMembers can only access an Organization's app, if they are granted access to the app directly or through a \nGroup\n,\nin respect of their assigned role (Admin, Developer or Tester).\n\n\n\nWhat are groups good for?\n\n\n\nA group is basically a wrapper for members. By creating groups, Owners and Admins can\nadd multiple members to each app's team at once, making it faster and easier to setup new\nprojects on Bitrise. It also make it faster to reassign, remove and change role of multiple members.\n\n\n\nEach group is handled as one entity on the app's \nTeam\n tab. They can be added to an app's team,\nthe group's role can be set, and by removing the Group from the app's Team\nyou can revoke the access of every member of that group from the app.\nIt's not possible however to add or delete individual members of a group there, only on the Org's page.\n\n\n\nAll members of a group have the same role when assigned to an app.\n\n\n\nWhat's the difference between a Team and an Organization?\n\n\n\nTeams are handled per app, Organizations are handled globally.\n\n\n\nA Team of an Organization's app can contain members invited directly\nor through the groups assigned to them. Team members with a direct role\ncan only access the app they were invited to and can't add an app to the Organization.\nMembers of a Team always have a role assigned to them (Admin, Developer or Tester).\n\n\n\nWho are the \noutside contributors\n?\n\n\n\nOutside contributors are members of an app's Team with a direct role,\ninvited only to an app of an Organization and not to the Organization itself.\n\n\n\nCan I have multiple Organizations?\n\n\n\nOne user can have as many Organizations as they like, but each Organization has to have\nan active Pro subscription to be able to run builds.\n\n\n\nCan I have multiple Pro subscriptions?\n\n\n\nYes. Each account can subscribe to Pro for their personal account and for as many Organizations as needed.\n\n\n\nWhat if I cancel my Pro plan for an Organization?\n\n\n\nAfter the Pro plan expires, builds can't be started for apps owned by the Organization.\n\n\n\nCan I remove someone from all of my Organization's apps?\n\n\n\nIf you are an Owner of an Organization, you can remove members and outside contributors\non the Org's \nPeople\n tab, with one click. Owners can also remove someone from a group\non the \nGroups\n tab. In this case the user will be removed from all apps' team that the group is assigned to.\n\n\n\nWhere can I change the avatar for my Organization?\n\n\n\nOnce you are on your Organization page, click on the avatar, and you'll see a popup\nto change the color scheme of it. We'll add custom avatar support a bit later.", 
            "title": "Organization FAQ"
        }, 
        {
            "location": "/should-i-commit-my-dependencies-into-my-repository/", 
            "text": "It's a highly debated topic, there are obvious pros and cons\nfor both keeping your dependencies in or outside of your code repository.\n\n\n\nYou're of course free to do it the way you want to,\n\nour recommendation is that you should include your dependencies inside your repository,\nwhenever you can\n.\n\n\n\nLet's see why.\n\n\n\n\n\nOnce \ngit clone\n is finished you'll have everything, ready for work.\nIn a \nCI / distributed environment\n this also means \nless chance for network issues\n,\nyour build won't fail just because a dependency manager's server is down.\nYour builds will be \nmore reliable\n, less error prone.\n\n\nYou see every dependency update in your repository, \nyou can review the changes\n in \ngit\n\nand decide whether you actually want to upgrade to a newer version or not.\nYou can create a Pull Request for just the dependency updates and have it reviewed by your team.\n\n\nIt protects against disappearing packages / dependencies\n.\nYes, it can happen that packages / dependencies\n\ndisappear overnight from the package manager you use\n,\nand you're no longer able to retrieve them.\nKeeping your dependencies in your repository makes sure that this won't break your project at the worst time.\n\n\nMakes the build process faster\n as well, as everything is prepared for the build and\nthere's no need to call dependency manager tools, nor to download the dependencies separately.\n\n\n\nFor example, if you use \nCocoaPods\n and you commit your \nPods\n directory\nand your CocoaPods generated \n.xcworkspace\n directory (\n.xcworkspace\n is actually a directory, which is presented as a file in Finder)\nto your repository then you can remove the CocoaPods Install Step from your \nbitrise.io\n workflow completely.\n\n\n\n\n\n\nNo more issues with using \ndifferent versions of the dependency manager tool\n.\nThe most popular iOS dependency tools change quite frequently and sometimes introduce breaking changes.\nBy including your dependencies inside your repository you won't have to\nrely on using the exact same version of the tool everywhere (across your team and on your CI service as well).\n\n\nNo more issues with private submodules / private pods.\nAs described here \nAdding projects with submodules\n granting permission\nto a project which depends on private Pods, submodules or other git related dependencies can be quite hard.\nMost will simply not go through with activating and de-activating separate Deployment SSH keys\nfor every dependency and will eventually just add the SSH key to their account or to a \nbot\n account as a personal SSH key.\nUsing a bot user as described in the linked guide can be sufficient from a security perspective,\nbut it's still way easier (and more secure) to just use Read Only Deployment keys.\nA given SSH key is allowed to be registered only once on GitHub, which means that you can't register\nthe same SSH key for multiple repositories as Deployment Key.\nIf you have every dependency in your repository you don't have to use any workaround,\na single read only Deployment Key will be enough.\nIn fact \nbitrise.io\n registers Deployment Keys\nby default during the automatic repository setup,\nwhich grants access only to the specified repository.\n\n\n\n\n\nOf course you're free to go with either solution and we'll keep working on supporting the way you work,\nbut we think that having full control over dependency changes\nand having a more reliable setup (which is easier to work with in a remote, automation environment)\nprovides enough advantage in most cases.", 
            "title": "Should I commit my dependencies into my repository?"
        }, 
        {
            "location": "/why-my-build-takes-longer-on-bitrise-than-on-my-mac/", 
            "text": "First of all you have to determine which step(s) consume significant time,\nto identify what can possibly be improved.\n\n\n\nIf your dependency step (e.g. CocoaPods) is the one which takes a long time then you might be able to speed it up\nby using the Bitrise Build Cache feature.\nYou can find more information at \nUsing the Build Cache\n.\nThis is also true for any step which might include network communication, addressing 3rd party web services,\nwhich might temporarily not be available or might be slow due to high demand.\n\n\n\nIf the long build time is not related to a dependency step or to a step which accesses a 3rd party service,\nand it's related to an Archive or Test step, which only performs calculations on the Virtual Machine\nand does not access an outside service then you should check this list which explains\nwhy it might take more time on Bitrise.io than on your Mac/PC:\n\n\n\nLocal build caches\n\n\n\nLocal build caches on your Mac/PC: most of the tools you use (e.g. Xcode) does generate a lot of local build cache,\nto speed up subsequent builds.\nThese caches help a lot to decrease the build time on your Mac/PC, but these are not available on \nbitrise.io\n.\n\n\n\nNote: You can test how much these caches improve the build time by running the same step (e.g. Xcode Archive) two times during your build.\nThe second one will be significantly faster than the first one,\nbecause of the available local build caches Xcode generates.\n\n\n\nOn \nbitrise.io\n every build runs in a clean Virtual Machine.\nNo file is stored after your build finishes, the whole Virtual Machine is destroyed,\nand the next build will start in a clean Virtual Machine again.\n\n\n\nThe lack of local build caches is important to improve the reliability of your project\n,\nbut it slows down the build process. Why it's important?\nIn your local build caches there might be files which are not under version control.\nThis can result in a situation where although you can build your project on your Mac/PC someone\nwho just git clones it and builds it the first time will have an error.\nYou can find more information about this issue at:\n\nWorks in local but not on Bitrise.io\n.\n\n\n\nThis issue is eliminated by using clean virtual machines on \nbitrise.io\n,\nwhere only the code and dependencies you specify (which are under version control, and are reproducible) are available.\nIf it works there then it'll work on a brand new Mac/PC too,\nwhen a new colleague joins your team and starts to work on the project.\n\n\n\nNetwork Resources\n\n\n\nAdditionally to Local build caches, if your project requires dependencies\nwhich have to be retrieved from the Internet it'll add time to the build process.\n\n\n\nFor example, when you build your iOS project on your Mac and you use CocoaPods,\nyou usually don't have to run \npod install\n, only when your CocoaPods dependency list changes.\nIf you don't commit your Pods into your repository then this process (to download the required dependencies)\nhave to be performed for every build in a clean environment.\n\n\n\nPossible solutions:\n\n\n\n\n\nCommit your dependencies into your repository -\nread more: \nShould I commit my dependencies into my repository?\n\n\nCache your dependencies in Bitrise Build Cache -\nread more: \nUsing the Build Cache\n\n\n\n\n\nRaw performance\n\n\n\nWe always try to improve the overall performance of the build infrastructure,\nbut you'll most likely have more powerful hardware.\n\n\n\nRight now we use a private vSphere network for hosting the OS X virtual machines,\nand Google Compute Engine for hosting the Linux (Android) virtual machines.\n\n\n\nCloud environments are fantastic to provide reproducible build environments,\nbut virtualization requires additional resources on top of the resources exposed to the virtual machine / build environment.\nYou can try this on your own Mac/PC: running the same compilation directly on your Mac/PC\nwill be faster than doing it in a Virtual Machine.\n\n\n\nWe do our best to improve the performance whenever we can, and feel free to reach out to us if you have any suggestion!\n\n\n\nTips \n Tricks to optimize build times\n\n\n\nYou can also find a guide \nhere\n\nabout how you can optimize your build times.", 
            "title": "Why my build takes longer on Bitrise than on my Mac?"
        }, 
        {
            "location": "/fastlane-tools-integration/", 
            "text": "Having more time to be creative is the key to great inventions.\nWe believe that giving developers the chance to work without distractions is the most important thing that can lead to extraordinary creations.\nOur mission is to provide a platform that lets you concentrate on the process of creation,\ninstead of the administrative tasks that get in the way of it.\n\n\n\nThat's why we created Bitrise. But we're not alone in this!\nWe love how \nFelix Krause\n sought to solve this problem by\ncreating \nfastlane\n. So by the combined force of earth, water, fire and wind\u2026\nwe integrated the whole \nfastlane toolkit\n - booyah! How cool is that!\n\n\n\n!!! note \nBitrise offline CLI\n\nWe have an open source, offline CLI, which can be used in a similar way as \nfastlane\n.\nIf you're interested, you can find the CLI's website \nhere\n,\nand its GitHub repository \nhere\n.\nYou can use this CLI to run your bitrise configurations locally, which can\ninclude runing \nfastlane\n too as part of the build, as described below ;)\n\n\n\nWhat is fastlane?\n\n\n\nfastlane\n lets you define and run your deployment pipelines for different environments.\nIt helps you unify and automate your app's release process.\n\nfastlane\n connects all \nfastlane tools\n and third party tools, like CocoaPods and xctool.\n\n\n\nfastlane\n is a collection of ruby gems that cover the most usual tasks required during iOS app development\nand upload or update to the App Store.\n\n\n\nHow to get started?\n\n\n\nUsing \nfastlane\n for your workflow is easy as pie. Just \nadd the \nFastlane\n step to your\nworkflow\n,\nafter the \nGit Clone\n step (and any other dependency step).\n\n\n\n!!! note\nYou should also add/keep the \nCertificate and profile installer\n step in the workflow,\nto download your \n.p12 Certificates\n and \nProvisioning Profiles\n uploaded to \nbitrise.io\n\nand to install them. \nEven if you don't upload your files to \nbitrise.io\n\nand instead you use a fastlane tool to manage your code signing files you should\nstill keep this step in the workflow\n. Read more about \niOS Code Signing using\nthird party tools\n.\n\n\n\nWith adding the \nfastlane\n step we ensure that you are running on the latest \nfastlane\n version,\nas it is pre-installed on all our VMs.\nInside the step you can set the \nfastlane\n action and we will run it automatically every time you push a new code change.\n\n\n\nFor more configuration options see the \nFastlane\n step's description in the Workflow Editor!\n\n\n\n!!! note\nIf you want to use \nbitrise.io\n to store your code signing files,\nyou should just follow the \niOS Code Signing guide here\n.\n\n\n\nWhat's next?\n\n\n\nfastlane\n's greatness comes from its ability to define different lanes for your different deployment needs - hence the name.\nYou can combine this with Bitrise and run separate lanes for separate branches, automatically.\nFor example you can run a lane for every code push onto the \nmaster\n branch to update your\nscreenshots and metadata on the App Store and to release the distribution version,\nand a separate lane for the \ndevelop\n branch to deploy your test releases\nand all the others to ensure that nobody has broken anything.\nYou can simply clone the workflow as many times as you want to,\nand use the \nTrigger\n feature of \nbitrise.io\n to define\nwhich Workflow to be selected for this branch / tag / pull request.\nYou can find more information about the Triggers feature in the\n\nControl what to build when, with the Trigger Map\n guide.\n\n\n\nWe hope that you are as happy as we are to have this amazing tool inside Bitrise. Go ahead and try it out!\n\n\n\nAnd as always, happy building!", 
            "title": "fastlane tools integration"
        }, 
        {
            "location": "/how-to-configure-fastlane-match-for-bitrise/", 
            "text": "If you want to use \nfastlane match\n\nin your \nbitrise.io\n build you only have to do three things:\n\n\n\n\n\nMake sure that a single SSH key can be used to \ngit clone\n both your main repository (the one\nyou register on \nbitrise.io\n) and the \nmatch\n repository.\nYou can find more info \nin this guide\n.\n\n\nAdd an environment variable \nMATCH_PASSWORD\n, as\n\ndescribed in \nmatch\n's docs\n,\nto specify the \nEncryption password\n you used for \nmatch\n.\nOn \nbitrise.io\n you should add this as a \nSecret Environment Variable\n,\nin the \nWorkflow Editor\n.\n\nMake sure to \ndisable\n the \nReplace variables in input?\n option of the environment\nvariable, to not to cause issues when the value includes the \n$\n (dollar) sign, which is used\nfor environment variable expansion.\n\n\n\n\nMake sure to use \nmatch\n's \nreadonly\n mode, or else \nmatch\n will try to connect\nto the Apple Developer Portal, which requires further authorization (providing additional\nusername and password for Apple Dev Portal login)!\n\n\n\nIf you use \nmatch\n in your \nFastfile\n or \nfastlane\n config: \nmatch(app_identifier: \nmy.domain\n, type: \nappstore\n, readonly: true)\n\n\nIf you use it as a command line tool: \nmatch development --readonly\n\n\nMore info in \nmatch\n's \nofficial readme / docs\n\n\n\n\n\n\n\n\n\nThat's all, you can now enjoy the utility of \nmatch\n, automated with \nbitrise.io\n \ud83d\ude80", 
            "title": "How to configure fastlane match for Bitrise"
        }, 
        {
            "location": "/add-your-first-step-to-your-workflow/", 
            "text": "Once you've registered an app you can start modifying its Workflow,\nthat is to customize how a build should work.\n\n\n\nTo edit your App's Workflow you should open the \nWorkflow Editor\n:\n\n\n\n\n\nAfter \nlogging in\n, select your App on your \nDashboard\n\n\nSelect the \nWorkflow\n tab\n\n\n\n\n\nIn the Workflow Editor you can see a preset list of Steps based on your app we added to your Workflow.\n\n\n\nAdd a new Step to the Workflow\n\n\n\nIf you want to \nadd a new Step\n to the Workflow,\njust click the \n+\n sign button between the Steps you want the new one to be.\n\n\n\n\n\n\nThis will show you a list of available Steps in our \nStep Library\n.\nYou can search and filter these steps if you want to, or just browse through the collection.\nClicking the Step will add it to your Workflow.\n\n\n\nYou can \nDrag and Drop\n to reorder your list of Steps. During a build,\nsteps will be executed one by one, in top-to-bottom order.\n\n\n\nOnce you're happy with your Workflow Save it on the top right!\nThat's all, your next build will automatically use the current, \nsaved\n Workflow!\n\n\n\n!!! note \nMultiple Workflows\n\nYou can create as many workflows as you like, and then\nspecify which one to use for which build trigger event in the \nTriggers\n section\nof the Workflow Editor.\nYou can read more about Triggers and workflow selection in the\n\nControl what to build when, with the Trigger Map\n guide.", 
            "title": "Add your first Step to your Workflow"
        }, 
        {
            "location": "/create-your-first-app-on-bitrise/", 
            "text": "We are always refining our UI and UX, to achieve the best and smoothest experience possible,\nbut at the same time give you enough room for experimentation and customization.\n\n\n\nBecause of the very reason of us believing that you should be able to do everything you want with Bitrise,\nsome parts may seem a bit complex at first glance.\n\n\n\nThis guide will help you get your first app up and running on Bitrise. Let's dive in!\n\n\n\nFirst of all you have to open the \nAdd New App page\n,\neither by clicking \nAdd\n on the \nDashboard\n,\nor selecting \nAdd new App\n in the Account drop down menu (top right corner).\n\n\n\n1. Code repository setup\n\n\n\nThe first step of adding an app is to specify where its code is stored.\n\n\n\nYou can either choose any one of \nGitHub.com\n, \nBitbucket.org\n or \nGitLab.com\n or add an other location manually.\n\n\n\nGitHub / Bitbucket / GitLab\n\n\n\nUnder Connect your repository just choose the git hosting service for the repo you want to add to Bitrise.\n(If you haven't connected your GitHub, Bitbucket or GitLab account yet on your profile, click on the green button to do so here.) Now you can see all your repos listed and a Search field in case you have many of them. If you hover on the repository names, you can get a glimpse of their descriptions, too.\nYour personal repos are separated from the ones that belong to an organization or other user.\n\n\n\nSelect the repository from the list to proceed to the next step.\n\n\n\n!!! note \nWhy does Bitrise need write permissions on Github/Bitbucket/GitLab?\n\nThere are two things that Bitrise couldn't do without write permissions:\n\n\n\n- Adding an SSH key to the selected repository\n- Registering a Webhook for the repository\n\nPlease note, that __if you want to avoid giving Bitrise write permissions,\nyou can select `Other / Manual`__ instead, and do the setup yourself.\n\n\n\n\nOther / Manual setup option\n\n\n\nPaste your HTTPS git clone URL where Bitrise can access your code and click on \nNext\n to proceed.\n\n\n\n2. Setup repository access\n\n\n\nYou need to specify how Bitrise will be able to access the source code. Depending on whether or not you have admin rights to the repo\n\n\n\nAuto-add the SSH key Bitrise generated for you\n\n\n\nThis option is available for GitHub, Bitbucket and GitLab.com repositories,\nif you have your account connected to your Bitrise account.\n\n\n\nThis is the easieast, fastest way. You can just click on \nAuto add\n\n\nif you have admin rights to the repo\n you selected.\n\n\n\nCopy the public key Bitrise generated\n\n\n\nIf you use other repos for your build, you have to copy the \npublic key\n and \nregister it as an account SSH key\n on your git hosting service (\nnot\n as a deployment key).\nYou can also use this option if you don't have admin rights to the repo, or if the repository is not hosted on GitHub, Bitbucket or GitLab.com or if you use submodules and want to use the same SSH key for multiple repositories.\nIf you use submodules or private Cocoapods,\nuse this guide: \nAdding projects with submodules\n\n\n\nUse your own keypair\n\n\n\nYou can paste your existing SSH \nprivate key\n on Add own SSH tab.\n\nMake sure it is an RSA private key without a passphrase,\n\notherwise you won't be able to use it on Bitrise.\n\n\n\nYou can find a guide \nhere\n about\nhow you can generate an SSH key like this.\n\n\n\nIf you use submodules, private Cocoapods,\nor have to access more than one private repository\nduring the build, you should check this guide: \nAdding projects with submodules\n\n\n\n3. Validation setup\n\n\n\nIn this section you have to specify a branch, which will be used in the next step:\nyour repository will be cloned, the specified branch will be checked out,\nand our \nopen source project scanner\n\nwill scan through the repository, and will construct base configuration(s)\nappropriate for your project.\n\n\n\nYou can choose to configure your project manually.\nThis is only recommended if you can't use the automatic\nproject scanner to generate a good base configuration for you.\nChoose this option only if you really know what you're doing,\nor if you can't use the automatic scanner!\n\n\n\n4. Validating repository\n\n\n\nYou don't have to do anything in this section: a validation\nis started automatically based on the setup you have just finished.\nYou can check the progress and the logs of the validation while it runs,\nand the errors and warnings in case the scanner would generate any.\n\n\n\n5. Project build configuration\n\n\n\nPlatform selection: We try to detect on validation whether you added an Android, iOS, or Xamarin project,\nor any other project type the \nscanner\n supports.\nIf we succeed, you can either Confirm the settings or Edit them.\nIf we fail to detect it, you have to select one and configure it manually.\n\n\n\nWe will also try to detect your build configuration automatically, based on your project settings / project\nfiles in the repository.\n\n\n\n6. Webhook setup\n\n\n\nTo have Bitrise \nautomatically start a build every time you push code into your repository\n you can set up a webhook at your code hosting service which will automatically trigger a build on Bitrise with the code you push to your repository.\n\n\n\nIf we have permission for adding webhooks automatically to the source code hosting service you use, you can add the webhook in this section with a single click or you can skip this step (unrecommended).\n\n\n\n!!! warning \nError: Webhook registration failed\n\nIf you see a message like this, that means that you don't have admin rights to the repo,\nso no webhook could be created. Contact the administrator, register the webhook manually (see link to the guide below)\nor skip this step if you're OK with starting builds manually (not advised).\n\n\n\nYou can find the webhook setup guide \nhere\n,\nif you'd have to do this manually.\n\n\n\n7. Congratulations, you have set up your first app on Bitrise.io!\n\n\n\nAfter you are done in the \nwebhook\n section, a build is triggered automatically\nfor your app, with the base configuration detected and generated by\nthe \nRepository validator / scanner\n. At this point you should have\na base working configuration, which you'll be able to improve and change\nto fit your project's development process.", 
            "title": "Create your first App on Bitrise.io"
        }, 
        {
            "location": "/manage-your-bitrise-workflow/", 
            "text": "To start editing your workflow you first have to open it\nin the \nWorkflow Editor\n on Bitrise.io:\n\n\n\n\n\nLog in on \nBitrise.io\n and select your app on the Dashboard\n\n\nSelect the \nWorkflow\n tab\n\n\n\n\n\nThis is your app's \nWorkflow Editor\n. You can change, delete, add and reorder steps here. Don't forget to \nSave\n or you can \nDiscard\n changes on the top right._\n\n\n\nChange a step\n\n\n\nSelect the step you want to change from the list on the left side.\nYou can change the selected Step's inputs and other configs on the right side.\n\n\n\n!!! note\nSteps are executed top-to-bottom, you can reorder them with \nDrag and Drop\n.\n\n\n\nUpgrade a Step to the latest version\n\n\n\nWhen a new version is available for a Step in your Workflow, you can update it in two ways:\n\n\n\n\n\nClick the orange dot, our update indicator in the top right of the Step's icon to upgrade the Step to the latest available version\n\n\nOr select the Step and in the right side's \nVersion\n section update to the new version manually.\n\n\n\n\n\nIn the dropdown you can set a Step to \nalways latest\n. In this case we'll always update it without further notice.\n\n\n\nYour settings / provided input values for the Step will be kept for the new version.\n\n\n\n\n\n\nRemove a step\n\n\n\nSelect the step on the left side and click on the \ntrash can\n on the right side or delete it at the bottom of the step.\n\n\n\nAdd a new step\n\n\n\nIf you want to \nadd a new Step\n to the Workflow,\njust click the \n+\n between the Steps you want the new one to be.\n\n\n\n\n\n\nThis will show you a list of available Steps in our \nStep Library\n.\nYou can search and filter these steps if you want to, or just browse through the collection.\nClicking the Step will add it to your Workflow and then all you have to do is fill in its required inputs\n(on the right side you'll see which inputs are required - marked with an orange border).\n\n\n\nYou can also clone a Step by clicking the \nClone icon\n on the right side and then you can \nDrag and Drop\n it to its place.\n\n\n\nCreate a new Workflow\n\n\n\nTo create a new Workflow just click on the \n+\n sign \nat the top, where your workflows are listed.\n\n\n\n!!! note \nYou can create as many workflows for an app as you like.\n\nUsing multiple workflows can be beneficial in case you want to do different\nthings based on which \nbranch\n you push new code.\nTo see how you can control what event should \ntrigger\n\nwhich \nworkflow\n, see: \nControl what to build when, with the Trigger Map\n\n\n\nNew workflows are created as a copy of the active workflow when you click the \n+\n button.\n\n\n\nYou can delete the current active workflow\n with the orange \nDelete\n button\nat the top right corner of the workflow area.\n\n\n\nStep inputs\n\n\n\nInserting Environment Variables into Step inputs\n\n\n\nClick into any input field of a Step and a green \nInsert Variable\n button will appear.\nClick this button and you'll get a full list of available Environment Variables.\nYou can search this list, and when you find the one you're looking for just click it,\nand it'll be inserted into the input field for you.\n\n\n\nEnvironment Variable replace mode\n\n\n\nUnder every Step input field you can see one of these two indicators:\n\n\n\n\n\nEnvironment Variables will be replaced in input\n\n\nor \nEnvironment Variables won't be replaced in input\n\n\n\n\n\nIt's the status of the \nis_expand\n option of the input.\n\nYou can change this only in YAML mode (\nbitrise.yml\n tab of the editor).\n\n\n\nWhat does this option do?\n\n\n\n\n\nIf \nenabled\n it'll replace Environment Variables (e.g. \n$HOME\n or \n${HOME}\n)\ninside the input text with the Environment Variable's value \nbefore\n it would be passed to the Step.\n\n\nIf \ndisabled\n it won't replace anything in the input text, the whole text will be passed to the Step \nas-it-is\n.\n\n\n\n\n\nWhat does this mean?\n For example, if you have \n$HOME\n in the input text\nand you enable this option, it'll replace every occurrence of \n$HOME\n in that input\nwith the value of the \nHOME\n environment variable\n(in this case, the home folder's path, e.g. \n/Users/[user]\n or \n/home/[user]\n).\nIf it's disabled then it won't be replaced,\nthe value you specify for the input will be passed as text (\n$HOME\n),\nand \nthe Step itself might or might not expand\n the value.\n\n\n\nUsually you should leave this option on the default value, the one defined by the Step for the input\n.\n\n\n\nIn general you should \nnot\n change this option, but if you have to,\nyou can do that in YML mode, by adding \nis_expand: true\n or \nis_expand: false\n to the input's \nopts\n list. Example:\n\n\n\n- some_input: My Value\n  opts:\n    is_expand: false\n\n\n\n\nA practical example / guideline\n\n\n\nAs a general guideline, this option should almost always be \nenabled\n,\nunless you have a specific reason to disable it.\n\n\n\nWhat can be a reason to disable it?\n There's pretty much only a single reason:\nif your input includes the \n$\n character (in a password for example),\nand you want to keep the \n$\n character in the input, instead of\nreplacing it with an environment variable.\n\n\n\nIf you have this expand option enabled and you have a password like \npas$word\n\nit'll most likely result in \npas\n after the value expansion,\nbecause there's no \n$word\n environment variable available (unless you defined it somewhere).\nThere might be other cases when you explicitly want to include the \n$\n character in the input,\nin these cases you should disable the expand option.\n\n\n\nNote\n: if you want to reference another environment variable,\neven if that one's value includes the \n$\n character, you have to \nenable\n this option,\nor else your reference won't work.\n\nIn a case like this you should disable this option where you specify the value\n with \n$\n in it,\nand enable the option everywhere else, where you reference that environment variable.", 
            "title": "Manage your Bitrise workflow"
        }, 
        {
            "location": "/available-stacks/", 
            "text": "The Stack indicates the virtual machine version that we will use to run your build.\nAfter adding your application to Bitrise we will select an appropriate Stack for it,\nbut you can simply change it to a different one on the \nSettings\n tab of your app.\n\n\n\n\n\n\nAfter selecting the Stack you want to use you'll see a short description of the stack\nwith an additional link to learn more about that specific Stack (e.g. to see what\ntools are preinstalled, and which versions, on the selected Stack).\n\n\n\n!!! note \nThe Stack won't be used until you click the \nSave\n button!\n\n\n\nStack status types\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nStable\n\n\nGenerally available and expected to be supported for the foreseeable future. \nUpdated when an update for the Stack's primary tool is available.\n Example: when Xcode 7.3.1 was released, the Xcode 7.3 stack was updated to have 7.3.1 instead of 7.3(.0). In case of \nXamarin\n stacks, the Xamarin updates are applied weekly, during the weekends.\n\n\n\n\n\n\nLTS (Long Term Support)\n\n\nNo changes (updates) will be made to the stack, except for absolutely crucial changes (for example which affect security), and Bitrise CLI tool updates. Preinstalled tool versions will remain the same, until the Stack is removed from our collection.\n\n\n\n\n\n\n\n\n\nStack prepare types\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPre-Booted\n\n\nIf a Stack is available as pre-booted, and there's enough pre-booted machines with that Stack configuration, your build can start right away, without waiting for the build environment to boot. In case there's no more available pre-booted machine with that Stack configuration, your build will start on an \nOn-Demand\n configuration.\n\n\n\n\n\n\nOn-Demand\n\n\nIf a Stack is available as on-demand configuration and there's no (available) pre-booted configuration for the Stack, our system will have to create a virtual machine for your selected configuration \nwhen your build starts\n. This means that your build will be in \npreparing environment\n state while the related Virtual Machine is created \n booted. For a macOS configuration the boot process usually takes about 1 - 1.5 minutes. \nThe prepare time (of course) is not counted into the build time, it won't affect how long your build can run.\n\n\n\n\n\n\n\n\n\nWhat's preinstalled\n\n\n\nEvery time we create or update a Stack we create a \nSystem Report\n for it too.\nThe System Reports include the list of preinstalled tools and their version on the stack.\nThe System Report scripts are also open source, so if you want to run it yourself\nor you want to add another tool / system check, feel free to send us a pull request!\n\n\n\nYou can find every available stack's System Report on GitHub: \nhttps://github.com/bitrise-io/bitrise.io/tree/master/system_reports", 
            "title": "Available Stacks"
        }, 
        {
            "location": "/virtual-machines/", 
            "text": "On \nbitrise.io\n, we have \nmacOS\n and \nLinux\n virtual machines hosted for your builds.\nYou can select from multiple stacks, each with its own list of preinstalled tool versions.\nRead more about available stacks and stack prepare types in the \nAvailable Stacks docs\n.\n\n\n\n!!! note \nPasswordless sudo\n\nThe user which is used for the builds is configured with \npasswordless sudo\n enabled,\nthis way you are able to install all the extra things you need for your builds and for other automation.\nIf a tool is not preinstalled on your Stack of choice,\nyou can install it yourself - see the \nInstall Any Additional Tool\n guide.\n\n\n\nSecurity\n\n\n\nEvery build runs in its own virtual machine and the virtual machine is rolled back to a saved state,\nthe \nbase box\n state, after the build is finished.\nThis way \nyour builds are always protected\n by changes made by others\nand by your previous builds and you can use a \nstable environment\n to define your build workflow,\nsince \nno state persists between builds\n.\n\n\n\nFor more information about Build/Code Security, see the \nCode Security\n guide.\n\n\n\nCustomization\n\n\n\nYou can find the \nmacOS\n base box setup guide and automation scripts we use for building our\nmacOS virtual machine base boxes in our \nOS X Box Bootstrap repository\n.\nThe repository includes every script we use for preparing these base virtual machine images.\n\n\n\nFor our \nLinux\n machines, check out the \nBitrise Base Docker Image's repository\n.\n\n\n\n!!! note \nSystem reports\n\nYou can always check our current configurations in the\n\nsystem reports folder of our main repository\n,\nto see what tools and which versions are preinstalled.\n\n\n\nThese reports have been generated by the scripts, linked in the first lines of the report.\n\n\n\n\nThe repositories used for our virtual machine preparation are open source,\nand pull requests are welcome.\nIf you'd like to have a tool pre-installed in our machines,\nfeel free to add your changes and they will be included in the related Stack(s)\nthe next time the Stack is updated.\n\n\n\nVirtual machine updates\n\n\n\nUpdates are always announced in the \n#changelog category of discuss.bitrise.io\n\nand can be seen on \nyour Bitrise Dashboard\n.\nWe will also send you a \nPlatform Updates\n notification about significant changes,\nunless you disable this feature under your \naccount settings page\n.\n\n\n\nStack updates\n\n\n\nIn general we do stack updates once a week, during the weekends.\n\n\n\nMinor patches might be applied during the week in case we detect an issue\nwith the current virtual machine environment.\nThese patches do not change any pre-installed tool version, unless it's really necessary.\n\n\n\nWe test every stack change as much as we can before it is\nreleased to avoid any changes / updates during the week.\n\n\n\niOS Simulator version \n SDK support\n\n\n\nAll the iOS Simulator versions which can be installed\nthrough \nXcode -\n Preferences -\n Components\n are installed and available.", 
            "title": "Virtual Machines"
        }, 
        {
            "location": "/code-signing-technical-details/", 
            "text": "How iOS code signing works - if you use Xcode 8 automatic code signing\n\n\n\nIf you're interested in all of the details, you should check this year's\n\nWWDC video which covers the code signing changes\n.\nWe'll focus more on the basics and issue resolution here.\n\n\n\n!!! note \nUploading code signing files to bitrise.io\n\nCode signing files can be uploaded to \nbitrise.io\n\nin the app's Workflow Editor, under the \nCode signing \n Files\n section of the editor.\n\n\n\nIn short, Xcode 8's automatic code signing works this way:\n\n\n\n\n\nWhen you do an Archive in Xcode, either in Xcode.app or on a CI server / through Xcode's command line tool (\nxcodebuild\n)\nit first creates an archive \nsigned with development code signing\n.\n\n\nThen, when you specify the distribution method (export method) it \nresigns the archive with distribution signing\n.\n\n\n\n\n\n\n\n\nThis means that if you want to create for example an App Store signed IPA,\non the Mac (e.g. on the \nbitrise.io\n virtual machine)\nyou have to have \nboth a Wildcard, Team / Development AND the App Store\ndistribution certificates and provisioning profiles\n!\n\n\n\n!!! note \nCollecting all of these might take quite a bit of time\n\nbut fortunately our updated \ncodesigndoc\n\ncan now collect all of these files for you, \nautomatically\n!\n\n\n\nSo, \nis this automatic code signing worth all of this trouble\n?\nShould you instead opt to use manual code signing in Xcode 8?\n\n\n\nIn general using Automatic code signing is a good idea, and you should\nmigrate to it (as Apple suggests this is the new way, how you should do\ncode signing in the future) if you can.\n\n\n\nIs it worth the trouble?\n Well, \nthe good thing about Automatic code signing\n\nis that once you collected all the code signing files\n\nit's incredibly easy to use these files / to select the right file(s) during your build!\n\n\n\nAll you need to do is specifying the \nexport method\n (\napp-store\n, \nad-hoc\n, etc.)\nin the \nXcode Archive\n step, and that's all! \nXcode will select the right certificate\nand provisioning profiles automatically\n, based on your project's\nTeam and Bundle ID (if the signing files are available in the system of course ;) )!\n\n\n\nCompare this with the previous solution\n, where you had to either create multiple Schemes\nin Xcode to be able to control where to use which code signing settings,\nor you had to specify \nForce Identity / Provisioning Profile\n options,\nwhich could lead to even more trouble when not configured properly.\nIn Xcode 8 automatic code signing you don't have to (actually, you can't)\nmess with these configurations, initial code signing is always performed\nwith Development code signing, and Xcode resignes the IPA during export\nbased on the \nexport method\n.\n\n\n\nAnd, \nit works the same way on \nbitrise.io\n too\n!\nOnce you've uploaded all the required signing files (e.g. with \ncodesigndoc\n),\nall you have to do is to set the \nexport method\n option\nof the \nXcode Archive\n step to the option you want to use.\n\nThat's all!\n\n\n\nThis is the same as what you do when you create/export an iOS app archive\nfrom Xcode.app - \nthe \nXcode Archive\n step just runs Xcode's command line tool\n.\nThere's no \nmagic\n here, \nXcode Archive\n just passes the export options\nto Xcode, and Xcode creates the archive and IPA the same way it does on your Mac!\n\n\n\nMigrating your Bitrise configuration to Automatic code signing\n\n\n\nFirst of all, you should upgrade your steps in your Workflow\nto the latest versions - especially the \nCertificate and profile installer\n\nand the \nXcode Archive\n steps - as there are a couple of features\nonly available in the latest versions.\n\n\n\nThe second step is to \nremove every previous, now incompatible code signing input\nfrom the \nXcode Archive\n step\n.\nIn general you should try to \nreset every code signing related input option of the \nXcode Archive\n step\n,\ne.g. \nForce code signing with Identity\n and \nForce code signing with Provisioning Profile Specifier\n.\n\n\n\nNote: it might be easier to see which input options you defined a value for in \nbitrise.yml\n mode\nof the Workflow Editor. Just click on \nbitrise.yml\n on the left side of the Workflow Editor\nand search for the \nxcode-archive\n step. In \nbitrise.yml\n only those inputs are listed which\nyou specified a value for / which are not set to their default value, so it should be pretty\nquick to check the list there, easier than on the Web UI.\n\n\n\nYou're almost ready\n, really! All you have to do is:\n\n\n\n\n\nMake sure that you've uploaded all the required code signing files, \nincluding a Wildcard Team Development\n\ncertificate and provisioning profile, as noted in the \nDescription of how Xcode 8's new Automatic code signing feature works\n section.\nYou might want to use \ncodesigndoc\n for this,\nas it can export all the required files automatically from your Mac.\n\n\nSet the \nSelect method for export\n input option of the \nXcode Archive\n step to the\nmethod you want to use (e.g. \napp-store\n or \nad-hoc\n)\n\n\n\n\n\nAnd that's all!\n\n\n\nYou can use multiple \nXcode Archive\n steps to create multiple IPAs signed with different\ncode signing methods in the same build, just by adding a second \nXcode Archive\n step\nand setting the \nSelect method for export\n option to the other method.\nAlternatively you can also use the \nRe-sign IPA\n step, to resign the IPA\nof a previous \nXcode Archive\n step.\n\n\n\nOne note: if you'd have to use a distribution provisioning profile \n certificate\nwhich is related to a different Team, not the one set in your Xcode project's\nsettings, then you have to specify the \nThe Developer Portal team to use for this export\n\ninput option too, or else Xcode will search for code signing files with the same Team ID\nyou have in your Xcode project's settings. Again, this is the same what you do in\nXcode.app when you create an Archive and export it with a distribution signing - if you're\npart of more than one Apple Dev Portal team you'll be prompted to select one.\n\n\n\nAnother note, especially if your project includes Extension project(s),\nfor some reason, Xcode 8.0 might not accept just any Wildcard Development Provisioning Profile\nfor the initial signing. It seems that in case of e.g. a Today Widget Extension\nXcode 8.0 requires the Wildcard \nTeam\n Provisioning Profile,\nor a specific development one which includes the Extension's \nfull\n bundle ID.\nThis might be just an Xcode 8.0 issue which will be fixed in an upcoming Xcode 8 update,\nbut for now it's best to use the \nTeam\n Provisioning Profile, which you can\nexport from Xcode Preferences (Xcode -\n Preferences -\n select your Apple ID on the left side -\n\nselect your Team on the right side -\n click \nView Details\n -\n search for\n\niOS Team Provisioning Profile: *\n -\n right click \nShow in Finder\n).\n\ncodesigndoc\n can help to\nexport the proper one in this case too!\n\n\n\n!!! warning \nMake sure you can archive and export on your Mac!\n\n\ncodesigndoc\n only works if you can archive and export your app from \nXcode.app\n -\n\nuntil you get a signed IPA\n!\n\n\n\nXcode.app\n might auto generate files in the background\nduring the export process, and obviously \ncodesigndoc\n can only collect those files\nafter the files are available on your Mac.\n\n\n\nThis means that you should first Archive the project in \nXcode.app\n,\nExport it for the distribution type you want to use (\nAd Hoc\n, \nApp Store\n or \nEnterprise\n),\nand \nrun \ncodesigndoc\n after you have the \n.ipa\n file generated by \nXcode.app\n.\nThis way \ncodesigndoc\n can collect all the code signing files\nrequired for that type of distribution.\n\n\n\n!!! note \nUploading code signing files to bitrise.io\n\nCode signing files can be uploaded to \nbitrise.io\n\nin the app's Workflow Editor, under the \nCode signing \n Files\n section of the editor.\n\n\n\nHow iOS code signing works (Xcode 7 \n Xcode 8 manual code signing mode)\n\n\n\niOS apps require code signing for every action/output which generates an app (\n.ipa\n) meant to\nrun on a physical iOS device.\n\n\n\nWhen you create and export an Archive (\n.ipa\n) of your app Xcode will sign it automatically,\nbased on the \nCode Signing\n settings you have in your Xcode project. There are, however,\na couple of things you have to know about how Xcode selects the code signing\nfiles (unless you set a specific Identity and/or Provisioning Profile).\n\n\n\nIf you have a Code Signing configuration in your Xcode project like this one:\n\n\n\n\n\n\nwhere you don't set a specific Identity and Provisioning Profile, Xcode will\nselect the ones which match the following points:\n\n\n\n\n\nFor the \nRelease\n configuration it'll search for a Distribution Identity/Certificate\n\n\nFor the \nDebug\n configuration it'll search for a Development Identity/Certificate\n\n\nThe Provisioning Profile has to match with the \nteam ID\n and with the \nbundle ID\n you set\nin your Xcode project settings.\n\n\n\n\n\nThis means that even if you have a Distribution Identity/Certificate available in the system,\nif Xcode can't find a related Provisioning Profile which matches the \nteam ID\n \nand\n the \nbundle ID\n\nyou'll get an error like this when you try to archive the project:\n\n\n\nCode Sign error: No code signing identities found: No valid signing identities (i.e. certificate and private key pair) matching the team ID \u2018...\u2019 were found.\n\n\n\n\nThis means that to be able to Archive your project you have to provide both a Certificate (\n.p12\n Identity file)\nand a Provisioning Profile which matches:\n\n\n\n\n\nthe type of the configuration you set in your Xcode project settings under the \nCode Signing\n section (Distribution or Development)\n\n\nthe Provisioning Profile has to match both the \nbundle ID\n \nand\n the \nteam ID\n set in the Xcode project settings\n\n\nand \nthe two files have to be compatible with each other\n (you\ncan check this on the \nApple Developer Portal\n - select a Provisioning Profile,\nclick \nEdit\n, there you can see the Certificates which are allowed to use that specific Provisioning Profile)\n\n\n\n\n\nThere can be multiple Certificates/Identities and Provisioning Profiles installed on the system,\nthe only thing what matters for Xcode when it tries to sign the app is to find a Certificate/Identity and\nProvisioning Profile pair which fulfills all the requirements listed above.\n\n\n\n!!! note \nHow to export your iOS Code Signing files\n\nIf you need help with exporting your iOS Code Signing files, you can find\na step-by-step guide with screenshots \non our old DevCenter\n.\n\n\n\nHow to make the process easier, more manageable? (Xcode 7 \n Xcode 8 manual code signing mode)\n\n\n\nUsing Export Options (available for Xcode 7+ and Xcode Archive step v1.9.1+)\n\n\n\nSince the \n1.9.1\n version of the \nXcode Archive\n step you can set Xcode \nexport options\n\ndirectly through the step!\n\n\n\nThe thing you have to know about Xcode's Export Options or how archiving works\nwhen you do it from \nXcode.app\n on your Mac:\n\n\n\n\n\nWhen you click \nArchive\n in Xcode first it creates an Xcode \narchive\n file (directory),\nand \nit signs the archive with the code signing files set in your Xcode project settings\n!\n\n\nThen, when the Xcode \nOrganizer\n window appears and you click \nExport...\n and\nselect an \nexport method\n (App Store, Ad Hoc, Enterprise or Development Deployment)\n\nXcode does re-sign\n the archive with the final code signing files appropriate for the\nexport method you selected.\n\n\n\n\n\nThis means that if you want to do the same on any Mac (e.g. on \nbitrise.io\n virtual machines)\n\nyou'll need the code signing files for the final app/IPA\n (e.g. App Store or Ad Hoc distribution certificate and provisioning profile)\n\nand additionally the code signing files used for the initial signing\n (usually Development certificate and provisioning profile)!\n\n\n\nTo do the same on \nbitrise.io\n all you have to do is:\n\n\n\n\n\nUpload all the certificates and provisioning profiles, including the ones required for the initial\ncode signing (usually your Development certificate and provisioning profile for the project).\n\n\nOpen the Workflow Editor on \nbitrise.io\n, select the \nXcode Archive\n step,\nand make sure its version is at least \n1.9.1\n\n\nGo to the step's \nSelect method for export\n input, and set it to the \nexport method\n you want to use,\njust like you would in Xcode's Organizer.\n\nNote: you can add more than one \nXcode Archive\n step to your workflow, if you want to create\ne.g. both an Ad Hoc and an App Store signed app/IPA in the same build/workflow!\n\n\nClick \nSave\n in the Workflow Editor\n\n\n\n\n\nThat's all. Run a new build and you're done ;)\n\n\n\nFull manual / full control\n\n\n\nThere's an important \ntrick\n which can make your code signing process much easier\n(if you don't or can't use the Xcode 7+ Export Options - as described in the previous section):\nXcode (Xcode's Command Line Tool, \nxcodebuild\n) has a command line parameter to\noverride the Identity and Provisioning Profile configurations set in Xcode project settings!\n\n\n\nThe \nCODE_SIGN_IDENTITY\n parameter can be used to override the \nCode Signing Identity\n,\nwhile the \nPROVISIONING_PROFILE\n parameter can be used to override the \nProvisioning Profile\n configuration\nfor any \nxcodebuild\n command (e.g. Archive).\n\n\n\nBoth our \nXcode Archive\n and \nXcode Analyze\n steps include two related inputs,\n\nForce code signing with Identity\n and \nForce code signing with Provisioning Profile\n.\nThe value you provide for these inputs will be passed to \nxcodebuild\n\nas \nCODE_SIGN_IDENTITY\n and \nPROVISIONING_PROFILE\n.\n\n\n\nNow, the important bit, that can make your life much easier\n (especially if you generate an iOS app with\nmultiple, different code signing configuration (e.g. if you want to generate both an Ad-Hoc and\nan App Store signed \nipa\n)):\n\n\n\n!!! note \nSetting a specific Identity will make Xcode ignore other search parameters!\n\nIf you set the Identity to \niPhone Distribution\n Xcode will search for a matching Provisioning\nProfile which fulfills all the other criteria (team ID and bundle ID),\nwhile \nif you provide the full ID of the Identity\n like \niPhone Distribution: My Company\n\nXcode will \nignore\n everything else and will use that specific Identity (if it can\nfind it in the system)!\n\n\n\nThis means that even if the Provisioning Profile has a different \nteam ID\n set, just by\nspecifying the Identity's full ID, Xcode will pick the Provisioning Profile\nwhich is compatible with the Identity, it won't check the \nteam ID\n parameter!\n\n\n\nThis makes iOS code signing (in most cases) much easier, as all you have to do is:\n\n\n\n\n\nMake sure that you set the Provisioning Profile configuration \nin your Xcode project settings\n to \nAutomatic\n,\nor else you'll have to override this configuration too (to be able to use different Provisioning Profiles)\n\n\nYou should set the Identity configuration \nin your Xcode project settings\n to a generic category like\n\niPhone Developer\n or \niPhone Distribution\n (this is more like a best practice, to make the life of\ndevelopers easier, \nnot a requirement if you override the configuration\n)\n\n\nAnd the last piece is\n: set the \nForce code signing with Identity\n input of Xcode Archive and\nXcode Analyze to the \nfull ID of the Identity\n (something like: \niPhone Distribution: My Company\n)\n\n\n\n\n\nWith this setup you don't have to change your code signing configuration in your Xcode project\n,\nyou only have to specify the configuration in your Bitrise workflow, and you can specify\ndifferent code signing configuration for every Xcode step if you want to!\n\n\n\n!!! note \nWhere to get these IDs?\n\nIf you use our \nCertificate and profile installer\n step then you can find the IDs in the step's\nlog. It prints the ID of every identity and provisioning profile it downloads\nand installs successfully. You can copy-paste that ID directly into the\n\nForce code signing with Identity\n (ID looks like: \niPhone Distribution: My Company (Xyz)\n),\nand if you need it, into the \nForce code signing with Provisioning Profile\n\n(ID looks like: \nxyz045x4-6143-4e5a-a94a-3fe3aec96eb3\n) input fields.\n\n\n\nUsually it's enough to specify only the Identity ID\n for the build, the compatible Provisioning Profile\nwill be selected by Xcode automatically. Not setting the Provisioning Profile has the advantage\nthat if you have to update the Provisioning Profile you won't have to update your\nBitrise configuration with the new profile's ID, as long as the Provisioning Profile is\ncompatible with the Identity you set. But if you'd need to control exactly\nwhich Provisioning Profile should be used for a given step, you can use\nthe \nForce code signing with Provisioning Profile\n input of the steps.\n\nThis can be useful if you want to use multiple Distribution Provisioning Profiles\nin a single build, \ne.g. to create both an Ad-Hoc and an App Store signed app.", 
            "title": "iOS Code Signing - Technical details"
        }, 
        {
            "location": "/export-certificate-and-provisioning-profile/", 
            "text": "The Provisioning Profile(s) and Code Signing Identity (.p12 Certificate) are\ncrucial part of the development process.\nThe Provisioning Profile contains application related data,\nthe list of devices that can run the given application, the connected Certificates and many more.\n\n\n\nThe Code Signing Identity (.p12 Certificate) contains information about the developer\nand makes it possible to sign the application. Both of these files are needed to build your application,\ntest them on devices or upload them to the AppStore.\n\n\n\nExport with \ncodesigndoc\n\n\n\nThe easiest way to get the required code signing files\nis to use our \ncodesigndoc\n tool.\n\n\n\nIt supports both Xcode and Xamarin projects, and can be installed and run\nwith a single line of command in Terminal:\n\nhttps://github.com/bitrise-tools/codesigndoc#one-liner\n\n\n\nOnce it's done you'll have all the required files exported.\nOpen your app on \nbitrise.io\n,\ngo to the \nWorkflow Editor\n (click the \nWorkflow\n tab),\nand \nupload these files\n into the \nCode signing \n Files\n section (left side of the editor).\n\n\n\nThat's all\n!\n\n\n\n!!! warning \nMake sure you can archive and export on your Mac!\n\n\ncodesigndoc\n only works if you can archive and export your app from \nXcode.app\n -\nuntil you get a signed IPA!\n\n\n\nXcode.app\n might auto generate files in the background\nduring the export process, and obviously \ncodesigndoc\n can only collect those files\nafter the files are available on your Mac.\n\n\n\nThis means that you should first Archive the project in \nXcode.app\n,\nExport it for the distribution type you want to use (\nAd Hoc\n, \nApp Store\n or \nEnterprise\n),\nand \nrun \ncodesigndoc\n after you have the \n.ipa\n file generated by \nXcode.app\n.\nThis way \ncodesigndoc\n can collect all the code signing files\nrequired for that type of distribution.\n\n\n\nManually exporting Provisioning Profiles\n\n\n\n\n\nVisit the \nApple Developer Portal\n - use your AppleID to login.\n\n\nOnce you're signed in, select the \nCertificates, IDs \n Profiles\n section\n\n\nFind the Provisioning Profile you need,\nselect it and click download (the file extension is \n.mobileprovision\n\nin case of an iOS Provisioning Profile, and \n.provisionprofile\n in case of a macOS application Provisioning Profile)\n\n\nTo upload it to your app on \nbitrise.io\n\n\n\n\nopen your app on \nbitrise.io\n\n\nselect the \nWorkflow\n tab\n\n\nin the Workflow Editor, on the left side, select the \nCode signing \n Files\n option\n\n\nhere you can upload your Provisioning Profiles and your Code Signing Identities (\n.p12\n Certificate)\n\n\n\n\n\n\n\n\n\nManually exporting and uploading the Certificate (.p12 Identity)\n\n\n\nTo request/create a signing certificate\n\n\n\n\n\nRequest a Certificate from \nXcode.app\n's \nAccounts\n section in \nPreferences\n,\nor from the \nApple Developer Portal\n manually.\n\n\n\n\n\nDownload signing certificate from the Apple Developer Portal\n\n\n\n\n\nVisit the \nCertificates, IDs \n Profiles\n section\nof the Apple Developer Portal.\n\n\nChoose \nCertificates\n on the left side\n\n\nSelect the Certificate and click download (the file extension is \n.cer\n)\n\n\nOpen the file once the download is finished\n\n\nThis will open the certificate in your \nKeychain Access.app\n\n\n\n\n\nExport the certificate (.p12 identity)\n\n\n\n\n\nOpen \nKeychain Access.app\n\n\nOn the left side, select \nMy Certificates\n\n\nRight click on the certificate you want to exported\n\n\nSelect \nExport ..\n in the menu\n\n\n\n\n\nNote: you can select more than one certificate at the same time, then right\nclick and select \nExport ...\n - this will export all the certificates\ninto a \nsingle \n.p12\n file\n!\n\n\n\nTo upload the .p12 signing certificate file to your app on \nbitrise.io\n:\n\n\n\n\n\nopen your app on \nbitrise.io\n\n\nselect the \nWorkflow\n tab\n\n\nin the Workflow Editor, on the left side, select the \nCode signing \n Files\n option\n\n\nhere you can upload your Provisioning Profiles and your Code Signing Identities (\n.p12\n Certificate)\n\n\n\n\n\n!!! note \nMore information about how iOS code signing works\n\nFor more information about how iOS code signing works, please\ncheck the \niOS/Code Signing\n page.", 
            "title": "How to export Certificates and Provisioning Profiles"
        }, 
        {
            "location": "/frequent-ios-issues/", 
            "text": "Searching for errors and issues in Xcode generated output\n\n\n\nThis applies only to the raw, unfiltered output of Xcode.\nIf you can't find the error reason in the logs make sure to switch the \nOutput Tool\n option\nof the Xcode ... step to \nxcodebuild\n (Xcode's Command Line Tool), which will\nresult in a quite verbose output, but will include everything the way it's produced by\nXcode's command line build tool (\nxcodebuild\n). All of the official Bitrise Xcode steps\nhave an \nOutput Tool\n input with a \nxcodebuild\n option.\n\n\n\nYou should search for \nerror:\n in the Xcode logs, in 99% of the cases that'll be the one which causes your issues.\n\n\n\nIf that doesn't work you should also search for \nwarning:\n, in rare cases Xcode doesn't print an \nerror:\n even if it fails.\n\n\n\nIf you have the logs on your own machine then you can run something like this in your Terminal:\n\n\n\ngrep --color 'error:' my.log\ngrep --color 'warning:' my.log\n\n\n\n\nXcode Scheme not found\n\n\n\nThe first thing you should check if you can't see your Xcode project's scheme\nduring setup, or if you get a \nThe project named \nFoo\n does not contain a scheme named \nBar\n error during build,\nis your Xcode project settings.\n\n\n\n\n\nCheck if the desired Scheme is shared\n\n\nWhen you share your scheme the Xcode project changes. Don't forget to \ncommit\n and to \npush\n your changes!\n\n\nIf the related validation is still running on Bitrise abort it and try to run it again.\n\n\n\n\n\n\n\n\nDon't forget to commit \n push the changes\n if you just enabled the Shared option!\nThis change should be reflected in your \ngit\n repository,\nunder you project / workspace\n(which is actually a directory, just seems like a file in Finder):\n\n*.xcodeproj OR *.xcworkspace/xcshareddata/xcschemes/SchemeName.xcscheme\n.\n\n\n\nIf you still can't see the desired Scheme,\ntry to look into your \n.gitignore\n file and check if you are ignoring the config files of your Xcode project.\n\n\n\nCocoaPods (missing) dependency issue\n\n\n\nError:\n\n\n\nld: library not found for -lPods-...\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n\n\n\n\nOR:\n\n\n\nno such module '...'\n\n\n\n\nSolution:\n\n\n\nMost likely you use Cocoapods but you specified the Xcode project (.xcodeproj) file\ninstead of the Workspace (\n.xcworkspace\n) file. Go to your App's \nWorkflow tab\n on Bitrise,\nclick \nManage Workflows\n, click \nApp Environments\n and change the \nBITRISE_PROJECT_PATH\n item.\nThis will change the default Project Path configuration for every workflow.\n\n\n\nIf it worked before\n and the \nBITRISE_PROJECT_PATH\n did not solve the issue,\nthen check your App's other environments - the project file path might be overwritten by a Workflow environment variable,\nor you might have specified a Project Path for the related Xcode step directly.\n\n\n\nFastlane Export Issue\n\n\n\nThis section was contributed by \n@kwoylie\n,\nand applies if you have a \nGemfile\n in your repository and you use\nthe \nfastlane\n step which uses the \nGemfile\n automatically if present.\n\n\n\nGemfile\n content was:\n\n\n\ngem \nfastlane\n, \n1.104.0\n\ngem \ngym\n, \n1.10.0\n\ngem \nbadge\n, \n0.5.0\n\ngem \nCFPropertyList\n,\n2.3.3\n\ngem \nsqlite3\n, \n1.3.11\n\n\n\n\n\nI have been battling issues with Fastlane just not letting me export to an enterprise build on\nbitrise cloud service. But it works perfectly fine on my colleagues and my machine.\n\n\n\nI had disabled xcpretty on Fastlane and got the following error from gym:\n\n\n\n$/usr/bin/xcrun /usr/local/lib/ruby/gems/2.3.0/gems/gym-1.10.0/lib/assets/wrap_xcodebuild/xcbuild-safe.sh -exportArchive -exportOptionsPlist '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_config20161003-2206-1f0vw3k.plist' -archivePath /Users/vagrant/Library/Developer/Xcode/Archives/2016-10-03/App\\ 2016-10-03\\ 05.57.17.xcarchive -exportPath '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_output20161003-2206-wjhjai'\n+ xcodebuild -exportArchive -exportOptionsPlist /var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_config20161003-2206-1f0vw3k.plist -archivePath '/Users/vagrant/Library/Developer/Xcode/Archives/2016-10-03/App 2016-10-03 05.57.17.xcarchive' -exportPath /var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/gym_output20161003-2206-wjhjai\n2016-10-03 06:01:58.299 xcodebuild[5284:14924] [MT] IDEDistribution: -[IDEDistributionLogging _createLoggingBundleAtPath:]: Created bundle at path '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/App_2016-10-03_06-01-58.298.xcdistributionlogs'.\n2016-10-03 06:01:59.596 xcodebuild[5284:14924] [MT] IDEDistribution: Step failed: \nIDEDistributionThinningStep: 0x7f868c80f810\n: Error Domain=IDEDistributionErrorDomain Code=14 \nNo applicable devices found.\n UserInfo={NSLocalizedDescription=No applicable devices found.}\nerror: exportArchive: No applicable devices found.\n\nError Domain=IDEDistributionErrorDomain Code=14 \nNo applicable devices found.\n UserInfo={NSLocalizedDescription=No applicable devices found.}\n\n** EXPORT FAILED **\n[06:01:59]: Exit status: 70\n[06:01:59]: 2016-10-03 13:01:58 +0000 [MT] Running step: IDEDistributionSigningAssetsStep with \nIDEDistributionContext: 0x7f868c51ed70; archive(resolved)='\nIDEArchive: 0x7f868c4af8d0\n', distributionTask(resolved)='2', distributionMethod(resolved)='\nIDEDistributionMethodEnterprise: 0x7f868c202a00\n', teamID(resolved)='(null)'\n\n    Chain (2, self inclusive):\n    \nIDEDistributionContext: 0x7f868c51ed70; archive = '(null)', distributionMethod='\nIDEDistributionMethodEnterprise: 0x7f868c202a00\n', teamID='(null)'\n\n    \nIDEDistributionContext: 0x7f868c4b0e70; archive = '\nIDEArchive: 0x7f868c4af8d0\n', distributionMethod='(null)', teamID='(null)'\n\n\n/IDEDistributionContext: 0x7f868c51ed70\n\n\n\n\n\nThis error is a little decieving, thinking it might be a code signing error or\nsome weird configuration issue with Fastlane.\nBut if you look further into the error, you may see the following:\n\n\n\n2016-10-03 13:01:58 +0000 [MT] Running /Applications/Xcode.app/Contents/Developer/usr/bin/ipatool '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/IDEDistributionThinningStep.s1x' '--json' '/var/folders/90/5stft2v13fb_m_gv3c8x9nwc0000gn/T/ipatool-json-filepath-RUCdRR' '--info' '--toolchain' '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr' '--platforms' '/Applications/Xcode.app/Contents/Developer/Platforms'\n2016-10-03 13:01:58 +0000  ruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin15]\n2016-10-03 13:01:59 +0000  /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:181:in `rescue in specs': Your bundle is locked to json (1.8.3), but that version could not be found in any of the sources listed in your Gemfile. If you haven't changed sources, that means the author of json (1.8.3) has removed it. You'll need to update your bundle to a different version of json (1.8.3) that hasn't been removed in order to install. (Bundler::GemNotFound)\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:175:in `specs'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:235:in `specs_for'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/definition.rb:224:in `requested_specs'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/runtime.rb:118:in `block in definition_method'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/runtime.rb:19:in `setup'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler.rb:99:in `setup'\n    from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.1/lib/bundler/setup.rb:20:in `\ntop (required)\n'\n    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\n    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\n2016-10-03 13:01:59 +0000 [MT] /Applications/Xcode.app/Contents/Developer/usr/bin/ipatool exited with 1\n2016-10-03 13:01:59 +0000 [MT] ipatool JSON: (null)\n\n\n\n\nSo after alot of investigation, Fastlane reverts back to Mac OS system's ruby for exporting.\nBut the system ruby doesn't have json 1.8.3 installed.\n\n\n\nSolution:\n\n\n\nTo fix this issue, you just have to add a \nScript\n step to run the following:\n\n\n\nsudo /usr/bin/gem install bundler\n\n\n\n\nThis will install bundler on the system ruby and when the fastlane plugin\ncalls bundle install then system ruby will also installed the neccessary dependencies\n\n\n\nWorks in local but not on Bitrise.io\n\n\n\nAn example error: \nld: file not found ...\n\n\n\nFirst of all restart your Xcode and try a new build.\n\n\n\nIf it doesn't help try a \nclean build\n in Xcode.\n\n\n\nIf no error was displayed, try resetting your simulator(s).\n\n\n\nAnother problem could be your CocoaPods version.\nTry updating your CocoaPods with the \n[sudo] gem install cocoapods\n command.\nAlso make sure that your \nPodfile.lock\n is \ncommitted into your repository\n,\nas that's the file which describes the exact Pod versions you use.\n\nWithout this Bitrise might download newer versions of Pods than the ones you use.\n\n\n\nIf there's still no error try deleting the \nPods\n folder in your project and run the \npod install\n command again.\n\n\n\nFinally, if none of the above helped, or you get an error with \nld: file not found\n on Bitrise,\nand the path contains \nDerivedData\n, with no other error message, like this:\n\n\n\nld: file not found: /Users/vagrant/Library/Developer/Xcode/DerivedData/...\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n\n\n\n\nTry deleting the Xcode local cache. After that the error should be reproducible on your local machine.\n\n\n\nYou can delete the local Xcode cache using your Terminal:\n\n\n\nrm -rf ~/Library/Developer/Xcode/DerivedData\n\n\n\n\nStep hangs (times out after a period without any logs)\n\n\n\nCheck whether the scripts you use trigger any GUI prompts or popups, or wait for any user input.\nIf a script waits for any user input it can cause the build to hang.\n\n\n\nMost frequent sources of this issue:\n\n\n\n\n\nXcode\n (command line tools) might hang if you try to build a Scheme which is not marked as \nshared\n.\nUsually it hangs right after you start any \nxcodebuild\n command (e.g. \nxcodebuild -list\n or \nxcodebuild .. archive\n).\n\n\n\nSolution\n: Please make sure that you marked the Scheme as \nshared\n,\nand that you actually committed \n pushed it into your repository.\nFor more information please follow this guide: \nXcode scheme not found\n.\n\n\n\n\n\n\nYour script tries to access an item in the OS X Keychain and the item is configured to\nask for permission before access (this is the default type of Access Control configuration\nif you add an item - for example a password - to Keychain)\n\n\nYou try to use a script or tool which requires permissions where OS X presents a popup\nfor acceptance (for example an \nosascript\n). You can use a workaround to allow the tool,\nwithout manual interaction by the user, for example by using \nhttps://github.com/jacobsalmela/tccutil\n.\n\n\n\nFor example to add \nosascript\n to the allowed OS X Accessibility list you can call \ntccutil\n from\nyour script (don't forget to include it in your repository or download on-the-fly): \nsudo python tccutil.py -i /usr/bin/osascript\n\n\nYou can download the script from GitHub directly, for example: \nwget https://raw.githubusercontent.com/jacobsalmela/tccutil/master/tccutil.py\n.\n\n\n\n\n\n\nIt can also be \nsomething in your app's code\n.\nAn example: one of our user had a simple \npopup in the app, presented only at the first start of the app\n.\nOnce the popup was dismissed, the fact was stored in the app's local storage, and the popup was not shown anymore.\nThey did dismiss the popup on their iOS Simulator, but on Bitrise every build runs in a brand new,\nclean environment, which means that the simulator is in the same state as if you'd hit \nReset Content and Settings\n in the iOS Simulator's menu.\n\n\n\nSolution\n: try to clean out the simulator/emulator before you'd run the tests on your Mac/PC, to simulate the \nfirst run\n experience.\n\n\n\n\n\n\n\n\n\nIt might also be that the build does not hang, \nit just doesn't generate any log output\n.\nThis can happen for various reasons;\nyou can find an example in case of an \niOS library project\n.\n\n\n\nCocoaPods frameworks signing issue\n\n\n\nWhen you get an error something like this:\n\n\n\n=== CLEAN TARGET Pods-Xxxxxxxxx OF PROJECT Pods WITH CONFIGURATION Release ===\n\nCheck dependencies\n[BEROR]Code Sign error: No code signing identities found: No valid signing identities (i.e. certificate and private key pair) matching the team ID \u201c(null)\u201d were found.\n[BEROR]CodeSign error: code signing is required for product type 'Framework' in SDK 'iOS 8.1'\n\n\n\n\nThis error is related to how CocoaPods expects code signing configurations for \nframeworks\n.\n\n\n\nSolution 1: make sure that you upload/include/install a wildcard development provisioning profile\n\n\n\nUsually this issue does not happen on your local Mac, and this is the reason why it does not:\nWhen Xcode performs an initial code signing (when it compiles the framework projects)\nit requires a certificate and provisioning profile which can be used for\nsigning the CocoaPods framework projects.\n\n\n\nOn your Mac you most likely have your own Development certificate and\n\nWildcard\n team provisioning profile, which is enough for Xcode to do the\ninitial code signing for the framework projects.\n\n\n\nSo, Solution #1 is exactly this, upload these (Development identity/certificate (.p12)\nand the Team \nwildcard\n provisioning profile) to \nbitrise.io\n,\nand Xcode will work the same way as it does on your Mac.\nIt'll do an initial code signing with the development signing files,\nand then it'll resign the archive when it exports the final IPA.\n\n\n\nSolution 2: modifying code signing settings through \nPodfile\n\n\n\nOne of our beloved user sent us the following fix for this problem.\nYou should add the following script as a \nPost script\n to your \nPodfile\n:\n\n\n\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['EXPANDED_CODE_SIGN_IDENTITY'] = \n\n      config.build_settings['CODE_SIGNING_REQUIRED'] = \nNO\n\n      config.build_settings['CODE_SIGNING_ALLOWED'] = \nNO\n\n    end\n  end\nend\n\n\n\n\nYou can find a related CocoaPods issue and discussion at:\n\nhttps://github.com/CocoaPods/CocoaPods/issues/4331\n\n\n\nYou can also find possible solutions at CocoaPod's official GitHub issues page,\nlike this one: \nhttps://github.com/CocoaPods/CocoaPods/issues/3063\n.\n\n\n\nInstalling an Enterprise app: \nUntrusted Enterprise Developer\n\n\n\nIf you try to install an Enterprise distribution signed app you might get a\npopup when you try to run the app the first time, with the title \nUntrusted Enterprise Developer\n.\n\n\n\n\n\n\nStarting with iOS 9 there's no option to \nTrust\n the developer right from the popup.\n\n\n\nYou can Trust the developer and enable the app to run in iOS Settings:\n\n\n\n\n\nOpen the Settings app on your iPhone or iPad\n\n\nSelect the \nGeneral\n category\n\n\nSelect the \nProfile\n option\n\n\n\nstarting with iOS 9.2 the option was renamed to \nDevice Management\n instead of \nProfile\n\n\n\n\n\n\nTap on the Enterprise App option related to the app (the one mentioned in the popup)\n\n\nTap the \nTrust \nThe Developer's Name\n button\n\n\nA popup will appear, tap on \nTrust\n again\n\n\n\n\n\nYou should now be able to run the app, and any other Enterprise app from the same developer.\n\n\n\nNo dSYM found\n\n\n\nA couple of services require the dSYM to be present for deployment but you might have disabled the dSYM generation in your Xcode project.\n\n\n\nSolution:\n\n\n\nTo generate debug symbols (dSYM) go to your \nXcode Project's Settings -\n Build Settings -\n Debug Information Format\n and set it to \nDWARF with dSYM File\n.\n\n\n\nInvalid IPA: get-task-allow values in the embedded .mobileprovision don't match your binary\n\n\n\nSolution:\n Generate a new Certificate on the Apple Developer portal, \nnot\n in Xcode.\n\n\n\nAnother solution might be: make sure you have the proper Signing Identity and Provisioning Profile\nin Xcode project settings for both the target and for the project.\n\n\n\nNo identity found\n\n\n\nYou uploaded the correct \nProvisioning Profile\n and \nCertificate\n pair,\nif you check the identity hash it matches with the one you can see in your Keychain,\nbut you still get an error like:\n\n\n\n22...D11: no identity found\n\n\n\n\nSolution:\n\n\n\nYou probably have a configuration in your Xcode project settings which specifies\nwhich keychain should be used for the build,\nyour scheme might include something like \n--keychain /../../xxx.keychain\n code signing flag\nand a \nCODE_SIGN_KEYCHAIN\n variable set in the \n.pbxproj\n.\n\n\n\nThis might happen if you migrate your Xcode Bot based setup into Bitrise.\n\n\n\nTo fix the issue you have to remove the keychain selection configurations from your\nXcode project settings.\n\n\n\nNo mobileprovision_path found / No embedded.mobileprovision found in ...\n\n\n\nError: \nNo embedded.mobileprovision found in ...\n\n\n\nOr: \nNo mobileprovision_path found\n\n\n\nPossible solution 1: \nSkip Install\n Xcode Settings\n\n\n\nIf you get this error in the Xcode Archive step you should check your Xcode Projects settings. Most likely you have the \nSkip Install\n option set to \nYES\n.\n\n\n\nThis should only be used for iOS frameworks, \nfor iOS apps this should be set to \nNO\n.\n\n\n\nYou can find the official documentation at:\n\nhttps://developer.apple.com/library/ios/technotes/tn2215/_index.html\n\n\n\n\n\nunder the \nXcode successfully archived my application, but the Archives Organizer does not list my archive\n section.\n\n\n\n\n\nPossible solution 2: \nInstallation Directory\n Xcode Settings\n\n\n\nAnother cause of the issue can be\n if you (or a tool you use) modifies\nthe \nBuild Setting -\n Deployment -\n Installation Directory\n settings in your Xcode Project.\nThis can result in an \n.xcarchive\n where your app is not generated\ninto the canonical \nProducts/Applications\n folder, but instead into a \nProducts/Users/USERNAME/...\n folder,\nincluding the full absolute path of an intermediate build.\n\n\n\nSolution:\n Please make sure that the \nInstallation Directory\n option is set to \n$(LOCAL_APPS_DIR)\n\n(the default value when you generate a new iOS Xcode Project) or \n/Applications\n\n(which is the default value of \n$(LOCAL_APPS_DIR)\n) in your Xcode Project settings,\nand that no build tool you use modifies this option.\n\n\n\nHuge thanks to \nAntje\n, who reported this solution!\n\n\n\nDuplicated Schemes\n\n\n\nThis is quite rare, but worth checking.\nIf you have multiple Schemes in your Xcode Project or Workspace with the \nexact same name\n,\nwhen your project is built with Xcode's Command Line Tools Xcode will select one of these Schemes/Configurations,\n\nrandomly\n. This can result in random build success / failure,\nand if you check the Raw Xcode output you'll see something like this:\n\nxcodebuild: error: Scheme YOUR_DUPLICATED_SCHEME is not currently configured for the test action\n when it fails.\n\n\n\nThis might also happen if you use CocoaPods and one of your Pods have the same name as your project.\n\n\n\nIn any way you can debug this by listing the available Schemes with Xcode's command line tool.\nIn your project's directory run: \nxcodebuild -workspace ./path/to/workspace/file -list\n - or if you use a project file\ninstead of a workspace file: \nxcodebuild -project ./path/to/project/file -list\n.\nThere should be no duplicated Scheme in the printed list.\nYou can run this command on your Mac and on bitrise.io too (just add it to a Script step), and ideally you should see the same list.\n\n\n\nSystem dialog blocks the tests to run\n\n\n\n(huge thanks to \n@AronI\n who reported this issue and the solution)\n\n\n\nError:\n\n\n\n2016-09-08 07:30:34.535 XCTRunner[6174:22447] Running tests...\\\n07:30:35.399 XCTRunner[6174:22454] _XCT_testBundleReadyWithProtocolVersion:minimumVersion: reply received\\\n07:30:35.403 XCTRunner[6174:22453] _IDE_startExecutingTestPlanWithProtocolVersion:16\\\n2016-09-08 07:30:46.670 XCTRunner[6174:22447] Failed to background test runner within 10.0s.\\\n** TEST FAILED **\\\n\\\n}\n\n\n\n\nSolution:\n\n\n\n\n\nSo to put it simply my problem was my UI Tests were failing.\n\n\n\n\n\nThe steps leading to the failure were the following:\n\n\n\n\n\nUnit tests run and pass. However a few of the unit tests are FBSnapshotTestCase tests\nwhich are kind of UI Tests but are still kept in the unit test bundle.\nThey launch the app and compare screens with reference images of the screen.\n\n\nWhen a FBSnapshot TestCase is run it launches the app and launches\na system alert dialog asking the user for permission for push notifications\n(this is just something that's done in the AppDelegate in my app every fresh install).\n\n\nWhen the UITests start the permissions dialog is still visible and overlaying the screen.\n\n\nThe application tries to access some XCUIElements but fails because of the overlaying permissions dialog and eventually fails\n\n\n\n\n\nI resolved this by adding a check in the AppDelegate\n(where we fire the permissions dialog) if we are running in unit test mode\nand only asking for permissions when not running unit tests:\n\n\n\nlet unitTestMode = NSProcessInfo.processInfo().environment[\nXCTestConfigurationFilePath\n] != nil\nif !unitTestMode {\n// IMPORTANT: Only ask permission for push notifications (or any notifications) when not running unit tests.\n// The reason for doing this is that it's causing a build failure when the CI runs unit and UI tests.\n// The build failure happens like this:\n// 1. FBSnapshotTestCase unit tests run and open the application\n// 2. The application asks user for the permission to enable push notifications\n// 3. FBSnapshotTestCase finish but the permissions dialog is still visible\n// 4. UITests start with the permissions dialog overlaying the screen\n// 5. UITest doesn't know what the hell is going on and eventually fails because the dialog is blocking everything\n\n// 6.  BUILD FAILURE\n\naskForNotificationPermission()\n}\n\n\n\n\n\n\nThis is probably a pretty big edge case but just wanted to report this to you if someone might encounter this problem sometime.\nHopefully this will come to use to someone.", 
            "title": "Frequent iOS issues"
        }, 
        {
            "location": "/known-xcode-issues/", 
            "text": "Feel free to add your comments to this list.\n\n\n\nYou can do it directly on GitHub, by clicking this link\n,\njust don't forget to send it as a Pull Request ;)\n\n\n\nPerformance related\n\n\n\nNote: mainly affects UI tests.\n\n\n\nThe root cause of the issue is that Xcode / the iOS Simulator has issues\nin performance limited environments. This included Virtual Machines (which is\nhow your builds are running on \nbitrise.io\n),\nMacBook Airs, Mac Minis with HDD storage, ...\n\n\n\nIt can happen even if you use\n\nApple's Xcode Bots CI server\n on \nnon SSD\n\nMac Mini.\n\n\n\nExamples:\n\n\n\n\n\nUI Tests fail to start\n\n\nOne or more UI Test case hangs\n\n\n\n\n\nRelated links \n reports:\n\n\n\n\n\nXCode bot error: Early unexpected exit, operation never finished bootstrapping\n\n\nUI Testing Failure - Failed to launch within 2.5s, Interrupting test\n\n\nAssertion Failure: UI Testing Failure - Failed to receive completion for ...\n\n\nAssertion Failure: UI Testing Failure - Failed to receive completion for XCDeviceEvent: page 12 usage 64 duration 0.01s within 10.0s\n\n\nUI Testing Failure - Failed to perform AX action for monitoring the event loop\n\n\nUI Testing Failure due to failed AX Action\n\n\nEvery other test case being skipped - UI Testing Failure - App state for \nXCUIApplicationProcess: ...\n is XCApplicationStateRunningActive (3), still not XCApplicationStateNotRunning\n\n\n\n\n\nPossible solutions\n\n\n\n\n\nAs reported \nin this StackOverflow answer\n \n\n\nin this Apple dev forum discussion\n\na possible workaround can be to \nnot to store \nXCUIApplication()\n in a variable\n, instead\nreference / use it directly. E.g. instead of: \nlet app = XCUIApplication() ; ... ; app.launch()\n\ndo: \nXCUIApplication().launch()\n\n\nOthers reported that if you add a delay (\nsleep(10)\n) after every \napp.launch()\n related to your tests, it can\nleave enough time for Xcode / the iOS Simulator to initialize the Accessibility labels,\nso that UI Tests can properly find the elements by the Accessibility labels. (\nRelated Apple developer forum discussion\n)\n\n\n\nRelated: remove every explicit \napp.terminate()\n in your \ntearDown()\n method(s)\n\n\n\n\n\n\nTry another Simulator device (e.g. instead of running the test in \niPhone 6\n\ntry it with \niPhone 6s Plus\n)\n\n\nUse the Async testing APIs\n\n\nSome users had success with splitting the tests into multiple Schemes,\nand running those separately, with separate Test steps.\n\n\n\nA great article about splitting tests into multiple Schemes:\n\nhttp://artsy.github.io/blog/2016/04/06/Testing-Schemes\n\n\n\n\n\n\nSometimes it's related to a code which makes Xcode to misbehave\n\n\nTry another Xcode version.\n\n\n\n\n\nFlaky UI tests, UI test cases failing randomly\n\n\n\nThis can happen with a really simple project too. Even something as\nsimple as:\n\n\n\nfunc testAddAnItemGoToDetailsThenDeleteIt() {\n        // Use recording to get started writing UI tests.\n        // Use XCTAssert and related functions to verify your tests produce the correct results.\n\n        let app = XCUIApplication()\n        let masterNavigationBar = app.navigationBars[\nMaster\n]\n        masterNavigationBar.buttons[\nAdd\n].tap()\n\n        let tablesQuery = app.tables\n        let firstElemQuery = tablesQuery.cells.elementBoundByIndex(0)\n        firstElemQuery.tap()\n        app.navigationBars.matchingIdentifier(\nDetail\n).buttons[\nMaster\n].tap()\n        masterNavigationBar.buttons[\nEdit\n].tap()\n\n        firstElemQuery.buttons.elementBoundByIndex(0).tap()\n        firstElemQuery.buttons[\nDelete\n].tap()\n\n        masterNavigationBar.buttons[\nDone\n].tap()\n\n        XCTAssert(tablesQuery.cells.count == 0)\n    }\n\n\n\n\ncan trigger this issue.\n\n\n\nPossible solutions\n\n\n\nWe could reproduce this issue with the code above, using \nXcode 7.3\n.\nThe exact same code worked perfectly with \nXcode 7.2.1\n while it randomly\nfailed with \n7.3\n. The solution was to use a different iOS Simulator device.\nThe test failed \n2 out of 3\n on average with the \niPhone 6\n simulator device\nusing Xcode 7.3, while it worked perfectly with Xcode 7.2.1.\n\n\n\nChanging the simulator device to \niPhone 6s Plus\n solved the issue with \nXcode 7.3\n.\n\n\n\nXcode Unit Test fails without any error, with exit code 65\n\n\n\nThis can be caused by a lot of things, Xcode or some other tool simply\nomits / does not present any error message.\n\n\n\nYou can find a long discussion, with possible reasons \n solutions \nhere\n.\n\n\n\nA quick summary:\n\n\n\n\n\nFirst of all, if you use \nxcpretty\n to format the output try a build without it\n(if you use the Xcode Test step you can set \nxcodebuild\n as the \nOutput Tool\n option/input\nto not to format the log produced by \nxcodebuild\n). The cause is: \nxcpretty\n sometimes\nomits the error message in it's output. \nRelated GitHub issue\n.\n\n\nIf you don't use our \nXcode Test\n step to run your UI Test you should try to run\nit with our Xcode Test step. We always try to improve the reliability of the step,\nimplementing known workarounds for common issues.\n\n\nIf you use our Xcode Test step: make sure you use the latest version, as it\nmight include additional workarounds / fixes.\n\n\nTry \nanother Xcode version\n,\nthere are issues which are present in one Xcode version but not in another one.\n\n\nMake sure your desired \nXcode scheme is shared\n. Don't forget to commit and push the changes if you just enabled it.\n\n\nIt might also be a \nproject configuration issue in your Xcode project\n,\nor a \ncode issue in your tests\n,\nor a \nmulti threading issue in your code\n.\n\n\nWe received reports that this might also be caused by Code Coverage report generation,\nyou can disable the \nGenerate code coverage files?\n option of the Xcode Test step\nto not to generate Code Coverage files.\n\n\nIf the previous steps did not help, you should check the whole discussion and suggested solutions at: \nhttps://github.com/bitrise-io/bitrise.io/issues/5\n\n\n\n\n\nSegmentation fault\n\n\n\nThe error is:\n\n\n\nclang: error: unable to execute command: Segmentation fault: 11\n\n\n\n\nThis is usually due to Xcode version mismatch - that you use a different Xcode on your Mac than the one you use on \nbitrise.io\n. Commonly occurs with Xcode 7.2 (if you have the Xcode 7.2 stack selected on bitrise.io), if you're already on a newer version of Xcode locally on your Mac.\n\n\n\nThe solution is simple, just make sure that you use the same Xcode version everywhere.\n\n\n\nIssues which occur with the Xcode Command Line Tools (\nxcodebuild\n), but not with Xcode.app\n\n\n\nxcodebuild hangs when a test causes EXC_BAD_ACCESS kernel exception\n\n\n\nxcodebuild hangs when a test causes EXC_BAD_ACCESS kernel exception\n\n\n\nNote: this can happen only on specific iOS Simulators / iOS versions too, e.g. if the app only crashes on iOS 8, but not on iOS 9\n\n\n\nXcode 8 - \nxcodebuild .. test\n hangs at the very end of the tests\n\n\n\nxcodebuild .. test\n hangs at the end of the tests (after it printed the summary of the tests)\nif the output of \nxcodebuild ..\n is piped / redirected in any way.\nThis means that \nxcodebuild .. test .. | xcpretty\n or even \ntee\n can be used to reproduce this issue.\n\n\n\n\n\nAffected Xcode versions\n: so far it seems to be an \nXcode 8 beta\n only issue, and it was fixed in \nXcode 8 beta 4\n.\n\n\nRelated \nradar\n and \nxcpretty\n issues.\n\n\nWorkaround: use a \nScript\n step instead of the Xcode Test step,\nand copy paste the \nxcodebuild\n command from the hanging Xcode Test step's log, without \n| xcpretty\n etc.\nOf course, with this you won't be able to use the built in features the Xcode Test step\nprovides, but the base \nxcodebuild\n command should be able to run, if the output\nis not redirected / piped.\n\n\n\n\n\nEvery/Any Xcode command hangs\n\n\n\nThis is a rare issue, caused by running a \nnon shared Scheme\n.\n\n\n\nxcodebuild\n can only work with \nshared Schemes\n and user schemes (auto created by Xcode.app).\n\nxcodebuild\n, unlike Xcode.app, \ndoes not\n auto create user schemes, it can only work with\n\nshared schemes\n and already existing user schemes (Xcode.app creates the user scheme when you open\nthe project in Xcode.app \non the specific Mac machine the first time\n, for schemes which are not marked as shared).\nIf you try to run a command on a missing / non shared Scheme it usually manifests in a \nscheme not found\n\nerror, but we saw projects where it resulted in \nxcodebuild\n hanging, instead\nof an error message.\n\n\n\nIf this is the case then any \nxcodebuild\n command will hang, even something\nas simple as \nxcodebuild -list\n.\n\n\n\nSolution\n\n\n\nMake sure that you marked the Scheme as shared, and that you actually committed \n pushed it into your repository\n.\n\n\n\nBuild hangs\n\n\n\nSimulator reset\n\n\n\nAs reported \nhere\n,\nif you do a simulator reset during the build, e.g. with a pre-action\nBuild Phase Script \nxcrun simctl erase all\n, it can cause Xcode / the Simulator to hang.\n\n\n\nOther\n\n\n\nIt might also not be Xcode related, but might be caused by something in your\nproject when it runs in an Xcode step (Xcode Test, Xcode Archive, ...).\nFor example if you have a Run Phase Script in your Xcode project, that will\nrun during Xcode build/test/archive, and that script hangs for some reason\n(e.g. it waits for a user input).\n\n\n\nYou can find pointers to identify and solve these kind\nof issues \non our old DevCenter\n.", 
            "title": "List of known Xcode issues"
        }, 
        {
            "location": "/resigning-an-ipa/", 
            "text": "During the development of your iOS app you will need at least two types of distribution. One for internal testing and deployment for your QA team, and one for deploying your app to the App Store.\n\n\n\nTo achieve this, \nfirst you have to upload multiple certificates\n ( development and distribution ) and the associated provisioning profiles. When it's all set up you can create multiple workflows for your app on Bitrise:\n\n\n\n##How it was before\n\n\n\nLet's say you setup two workflows, one with a \nmaster\n trigger to kick of your \nAppStore\n workflow. This will sign your apps with the distribution profile and a trigger with \n*\n to kick of your normal \nPrimary\n workflow that builds and deploys your app to the testers. On both workflows you can setup an \nXcode Archive step\n, update the needed signing and you are ready to go.\n\n\n\nThis will create the required IPA's for you, but there is an easier way!\n\n\n\n##Setting up automatic resigning\n\n\n\nInstead of running multiple \nXcode Archive steps\n, setup your project to sign your apps with \nAutomatic \n iOS Developer\n and upload a \nwildcard provisioning profile\n. ( You can even use our own preinstalled certificate and provisioning profile for that if you don't set the team id. )\n\n\n\n\n\n\nWhen you want to deploy your app to the QA team or to App Store, add the \niOS Re-sign step\n to your workflow and set your iTunes team ID with the required distribution. It will simply re-sign your IPA and your are ready to go, without the need of manually handling different versions of settings in your project, or burning build minutes.\n\n\n\nHere you can find a sample bitrise.yml that will resign your app and deploy it to iTunes Connect if you are deploying to the \nmaster branch\n\n\n\n---\nformat_version: 1.2.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\ntrigger_map:\n- pattern: \nmaster\n\n  is_pull_request_allowed: false\n  workflow: appstore\n- pattern: \n*\n\n  is_pull_request_allowed: true\n  workflow: primary\napp:\n  envs:\n  - BITRISE_PROJECT_PATH: $BITRISE_PROJECT_PATH\n  - BITRISE_SCHEME: $BITRISE_SCHEME\n  - INFO_PLIST_PATH: $INFO_PLIST_PATH\n  - ITUNES_CONNECT_USER: $ITUNES_CONNECT_USER           # Store it in .bitrise.secrets.yml\n  - ITUNES_CONNECT_PASSWORD: $ITUNES_CONNECT_PASSWORD   # Store it in .bitrise.secrets.yml\n  - ITUNES_CONNECT_TEAM_ID: $ITUNES_CONNECT_TEAM_ID     # Store it in .bitrise.secrets.yml\n  - ITUNES_CONNECT_APP_ID: $ITUNES_CONNECT_APP_ID       # Store it in .bitrise.secrets.yml\nworkflows:\n  primary:\n    steps:\n    - activate-ssh-key@3.1.1:\n        run_if: '{{getenv \nSSH_RSA_PRIVATE_KEY\n | ne \n}}'\n    - git-clone@3.3.2: {}\n    - certificate-and-profile-installer@1.6.0: {}\n    - set-xcode-build-number@1.0.4:\n        inputs:\n        - plist_path: $INFO_PLIST_PATH\n    - xcode-archive@1.8.5: {}\n    - deploy-to-bitrise-io@1.2.4: {}\n\n  appstore:\n    before_run:\n    - primary\n    steps:\n    - resign-ipa@1.0.0:\n        inputs:\n        - distribution_type: AppStore\n        - itunes_connect_team_id: $ITUNES_CONNECT_TEAM_ID\n    - deploy-to-itunesconnect-deliver@2.6.1:\n        inputs:\n        - ipa_path: $BITRISE_RESIGNED_IPA_PATH\n        - itunescon_user: $ITUNES_CONNECT_USER\n        - password: $ITUNES_CONNECT_PASSWORD\n        - app_id: $ITUNES_CONNECT_APP_ID", 
            "title": "Resigning an IPA"
        }, 
        {
            "location": "/uploading-certificates/", 
            "text": "Easiest way to export code signing identities\n\n\n\nYou can easily locate the needed certificates and provisioning profiles for your project with our \ncodesigndoc\n tool.\n\n\n\nSimply open your \nTerminal.app\n on your Mac and\n\nrun the one liner \ninstall\n command\n.\n\n\n\nAfter that open your \nFinder.app\n and drag-and-drop your project's \n.xcodeproj\n or \n.xcworkspace\n file into the command line in your terminal.\n\n\nOnce it's done you'll have all the required files exported, ready for upload.\n\n\n\nUploading the exported code signing files to Bitrise\n\n\n\nOnce you have all the needed files, head to your dashboard on \nbitrise.io\n and select your app.\n\n\n\nGo to \nWorkflow\n \n \nManage Workflows\n \n and select the \nCode Signing \n Files\n tab on the left.\nUpload your code signing certificate (p12) and provisioning profiles and you are ready to go! \ud83d\ude80", 
            "title": "Uploading certificates"
        }, 
        {
            "location": "/signing-up-with-bitbucket/", 
            "text": "You are able to authenticate yourself with your Bitbucket user against \nBitrise\n. It brings some practical benefits, like logging in with one click and of course you won't have to authorize your Bitbucket account when adding repositories hosted by these providers again.\n\n\n\n!!! note\nIf you'd like to sign up with your email address, please follow the instructions in \nsigning up with email address\n.\n\n\n\nSign up\n\n\n\nGo to the Sign up page by clicking \nSign up!\n on the landing page of \nbitrise.io\n.\n\n\n\n\n\n\nSelect \nBitbucket\n for authenticating yourself with this service.\n\n\n\nAuthorize Bitrise\n\n\n\nYou have to authorize Bitrise before we can establish the connection. This means you give permissions to Bitrise to access (read) your repositories.\n\n\n\n\n\n\nIf you press the \nGrant access\n button, you will be redirected to Bitrise.\n\n\n\nFinish signup\n\n\n\nYou will have to pick a username and a password for your Bitrise account. This way you are free from relying on the given service's availability, you are also able to connect more accounts, GitHub \nand\n Bitbucket, for example. Last, but not least, you don't have to stick to your connected account's username.\n\n\n\n\n\n\nAfter that, you are ready to roll.\n\n\n\nFrom now on, you are able to sign in with a click of a button. Choose your favorite!", 
            "title": "Signing up with Bitbucket"
        }, 
        {
            "location": "/signing-up-with-email/", 
            "text": "You can sign up to Bitrise in one step with your email address.\n\n\n\n\n\n\n!!! note\nIf you would like to use your GitHub / Bitbucket account, please check out the following devcenter articles:\n\n\n\n* [Signing up with GitHub](/signing-up/signing-up-with-github)\n* [Signing up with Bitbucket](/signing-up/signing-up-with-bitbucket)\n\n\n\n\nSign up\n\n\n\nYou just have to pick a username, add your email address and choose a password. Click \nSign up with email\n.\n\n\n\n\n\n\nAfter you provided your credentials, press \nDone\n.\n\n\n\nAfter successful registration we will send you a confirmation email. Click on the confirmation link in the email and you are ready to roll!\n\n\n\n\n\n\nIf you haven't received a confirmation email, click \nResend confirmation email\n you see at the end of the registration process.", 
            "title": "Signing up with email"
        }, 
        {
            "location": "/signing-up-with-github/", 
            "text": "You are able to authenticate yourself with your GitHub user against \nBitrise\n. It brings some practical benefits, like logging in with one click and of course you won't have to authorize your GitHub account when adding repositories hosted by these providers again.\n\n\n\n!!! note\nIf you'd like to sign up with your email address, please follow the instructions in \nsigning up with email address\n.\n\n\n\nSign up\n\n\n\nGo to the Sign up page by clicking \nSign up!\n on the landing page of \nbitrise.io\n.\n\n\n\n\n\n\nSelect \nGitHub\n for authenticating yourself with this service.\n\n\n\nAuthorize Bitrise\n\n\n\nYou have to authorize Bitrise before we can establish the connection. This means you give permission to Bitrise to access (read) your repositories.\n\n\n\n\n\n\nIf you press the \nAuthorize application\n button, you will be redirected to Bitrise.\n\n\n\nFinish signup\n\n\n\nYou will have to pick a username and a password for your Bitrise account. This way you are free from relying on the given service's availability, you are also able to connect more accounts, GitHub \nand\n Bitbucket, for example. Last, but not least, you don't have to stick to your connected account's username.\n\n\n\n\n\n\nAfter that, you are ready to roll.\n\n\n\nFrom now on, you are able to sign in with a click of a button. Choose your favorite!", 
            "title": "Signing up with GitHub"
        }, 
        {
            "location": "/trial-after-signing-up/", 
            "text": "After you have created your account on Bitrise it will start with a \n14-day trial\n of\nthe \nTeam plan\n.\nThis means that you can setup your application and start building it with all the benefits of the paying plan.\n\n\n\nYou can see the remaining time of your trial in the header.\n\n\n\n\n\n\n!!! note \nTip\n\nRead more about \noptimizing your build times\n\nto help you fit into the 10 minute limit for free accounts.\n\n\n\nYou can earn extra build minutes with our \nReferral program\n.", 
            "title": "Trial after signing up"
        }, 
        {
            "location": "/changing-the-owner-of-an-app/", 
            "text": "It can happen that you need to transfer an application on \nBitrise\n to another user. This can be done in a few seconds by following these quick steps:\n\n\n\n\n\nLogin with the \ncurrent owner\n of the app\n\n\nOpen the app's page and go to the \nTeam\n tab\n\n\nMake sure the new owner of the app is in the team or add her/him if you need to\n\n\nClick the \nTransfer ownership\n button on the top right\n\n\n\n\n\nFor transferring the ownership, select the new user to transfer the app to:\n\n\n\n\n\n\nYou can use the toggle to stay the connected service user. This is important if you are the admin of the given repository on \nGitHub\n, or \nBitbucket\n and the app needs your credentials to work on Bitrise.", 
            "title": "Changing the owner of an app"
        }, 
        {
            "location": "/managing-billing-sub/", 
            "text": "It's very simple to set up a subscription plan for your organization even if you skipped that step when creating the organization. You can also modify your plan and your billing information at any time if you are the owner of the organization.\n\n\n\nYou can set up a credit card and we'll bill you automatically; for other payment methods, please contact our support.\n\n\n\n!!! note \nOrganizations is a premium feature\n\nYou need to subscribe to an \nOrganization\n plan to be able to run builds.\n\n\n\nAdding or modifying billing info\n\n\n\n\n\n\n\nSign in with an account that is an owner of an organization and open its profile page.\n\n\n\n\n\n\nGo to your organization's profile page: click \nSwitch Profile\n on the top left corner and select the organization you need.\n\n\n!!! warning \nMake sure it's the right profile\n\nBe aware that your own billing info and your organization's billing info are \nSEPARATE\n. You CANNOT change your organization's billing info and subscription plans in the settings of your own personal profile!\n\n\n\n\n\n\n\n\nOn the left, select \nBilling\n from the menu options.\n\n\n\n\n\n\n\n\nIf you didn't provide your billing information, do so: click \nAdd credit card\n on the right of the \nBilling information\n menu.\n\n\n\n\n!!! note \nManual payment\n\nIf you do not want to be billed automatically, you do not need to provide a credit card. In this case, contact our support to set up your payment method. This option is available from 5x concurrency on Standard plans or 3x concurrency on Elite plans but only with annual billing.\n\n\n\n\n\n\nFill out the details.\n\n\n!!! note \nAccess to billing information\n\nOnly the owner(s) of the organization has any access to the organization's billing information.\n\n\n\n\n\n\n\nSetting up an organization subscription plan\n\n\n\nSetting up a subscription plan for an organization requires billing information, including payment details. You can set up a credit card and we'll bill you automatically; for other payment methods, please contact our support.\n\n\n\n\n\n\n\nSign in with an account that is an owner of an organization and open its profile page.\n\n\n\n\n\n\nGo to your organization's profile page: click \nSwitch Profile\n on the top left corner and select the organization you need.\n\n\n!!! warning \nMake sure it's the right profile\n\nBe aware that your own billing info and your organization's billing info are \nSEPARATE\n. You CANNOT change your organization's billing info and subscription plans in the settings of your own personal profile!\n\n\n\n\n\n\n\n\nOn the left, select \nBilling\n from the menu options.\n\n\n\n\n\n\n\n\nChoose a subscription plan. You can choose between two Organization plans, billed either monthly or yearly.\n\n\n\n\nStandard\n: $50 a month per concurrency. Includes multiple owner support, group management and 60+ minutes runtime per build.\n\n\nElite\n: $100 a month per concurrency. Includes everything in the Standard plan, as well as super fast build machines and 75+ minutes runtime per build.\n\n\n\n\n\n\nFor more information, check our \npricing\n.", 
            "title": "Managing billing and subscription for organizations"
        }, 
        {
            "location": "/managing-invoices/", 
            "text": "Set up an email address so we can send you your invoices - no need to rummage around the site looking for them, we'll deliver them straight to your inbox. However, if you wish to download it manually from the site, you can do that, too, of course! \nYou can find the past invoices on the organization's \nBilling\n page\n - you can read more \nhere\n!\n\n\n\nSetting up an email address for organization invoices\n\n\n\nBy default, an organization's invoices will be sent to the email provided when the organization was created. However, the owner(s) of the organization can change it at any time.\n\n\n\n\n\n\n\nSign in with an account that is an owner of an organization and open its profile page.\n\n\n\n\n\n\nGo to your organization's profile page: click \nSwitch Profile\n on the top left corner and select the organization you need.\n\n\n\n\n!!! warning \nMake sure it's the right profile\n\nBe aware that your own billing info and your organization's billing info are \nSEPARATE\n. You CANNOT change your organization's information in the settings of your own personal profile.\n\n\n\n\n\n\nOn the left, select \nBilling\n from the menu options.\n\n\n\n\n\n\n\n\nLocate the \nInvoice email\n menu and click \nChange email\n.\n\n\n\n\n\n\n\n\nEnter the new email address and click \nSave\n.\n\n\n\n\n\n\n\nAnd that's it! From now on, your invoices will be sent to the new email address.\n\n\n\nDownloading organization invoices\n\n\n\n\n\n\n\nSign in with an account that is an owner of an organization and open its profile page.\n\n\n\n\n\n\nGo to your organization's profile page: click \nSwitch Profile\n on the top left corner and select the organization you need.\n\n\n!!! warning \nMake sure it's the right profile\n\nBe aware that your own billing info and your organization's billing info are \nSEPARATE\n. You CANNOT change your organization's billing info and subscription plans in the settings of your own personal profile!\n\n\n\n\n\n\n\n\nOn the left, select \nBilling\n from the menu options.\n\n\n\n\n\n\n\n\nLocate the \nPast statements\n menu.\n\n\n\n\n\n\nSelect the invoice you need and click the download icon on the right.", 
            "title": "Managing the invoices of your organizations"
        }, 
        {
            "location": "/org-url/", 
            "text": "Every organization has its own specific URL on Bitrise - you might need this if, for example, you need some assistance from our support. Or you might want to simply add it to your favourites in a browser.\n\n\n\nIt's all very simple: just navigate to any of your organization's pages. For example, if you go to the \nOverview\n page, the URL will be something like this: \nwww.bitrise.io/organization/9d9838bc0d31fc53#/overview\n. The hex id in the URL is a unique identifier for your organization.", 
            "title": "Finding the URL of your organizations"
        }, 
        {
            "location": "/attach-any-file-to-build/", 
            "text": "For this example we'll attach the OS X \nsystem.log\n to the Build as an Artifact,\nbut this works for any file, even for ones that you generate during the build,\nyou just have to replace the example path we use (\n/var/log/system.log\n) with the path you want to deploy.\nYou can of course use Environment Variables in the path too, like \n$HOME/\n.\n\n\n\nDeployed Artifacts appear on the Build's page, in the Artifacts \n Apps section,\nand anyone who has access to the Build page can download it from there.\n\n\n\nTo do this:\n\n\n\n\n\nAdd a new \nDeploy to Bitrise.io\n step to your workflow, to any point you want to (can be the very last step in the workflow, but of course if you want to deploy a file which is generated during the build you should add the step \nafter\n the file is generated and available).\n\n\nChange the \nDeploy directory or file path\n input of the Step to: \n/var/log/system.log\n\n\n\n\n\nA YAML configuration example of the step \n input:\n\n\n\n    - deploy-to-bitrise-io:\n        inputs:\n        - deploy_path: \n/var/log/system.log\n\n\n\n\n\nThat's all, your next build will attach the OS X system log file\nto your build - you'll see it at the top of the Build's page.\n\n\n\n!!! note \nBy default the \nDeploy to Bitrise.io\n will always run\n\nBy default the \nDeploy to Bitrise.io\n will always run,\neven if a previous step fails, \nso you can deploy failed step/tool logs too.\n\n\n\nDeploy a directory\n\n\n\nThe \nDeploy to Bitrise.io\n step accepts both file and directory path as its input,\nbut by default \nit does not deploy files recursively\n, from sub directories\nif you specify a directory as it's \ndeploy_path\n input.\n\n\n\nIf you want to do that and deploy the whole directory with every sub directory\nand the files in the sub directories, you have to enable the \nCompress\n option of the step.\n\n\n\nIn this mode the step will compress (zip) the whole directory, and deploy\nthe compressed file, instead of deploying files one by one.\n\n\n\nAn example configuration:\n\n\n\n    - deploy-to-bitrise-io:\n        inputs:\n        - deploy_path: /deploy/this/directory/recursively\n        - is_compress: 'true'\n\n\n\n\nNote: as every input's, \nis_compress\n's value have to be a \nstring\n, that's why \ntrue\n is surrounded with quotes.\n\n\n\n!!! note \nUsing more than one \nDeploy to Bitrise.io\n step\n\nYou can use as many \nDeploy to Bitrise.io\n steps as you want to,\neven in a single build / workflow.\nAlternatively of course you can move all the files you want to deploy\ninto a single directory, and deploy that directory with the step,\nit's up to you to decide which solution works best for you.", 
            "title": "Attach any file as an Artifact to the Build"
        }, 
        {
            "location": "/disable-a-step-by-condition/", 
            "text": "Disable a Step\n\n\n\nIf you don't want to remove the Step from your Workflow and you don't want to\nduplicate the Workflow either (which is the preferred way if you want to experiment with new things;\nyou can just create a \nbackup\n clone of your original Workflow)\nthen you can simply disable a Step by specifying \nrun_if: false\n .\n\n\n\nExample:\n\n\n\n- script:\n    run_if: false\n    inputs:\n    - content: |-\n        #!/bin/bash\n        echo \nThis will never run, because of run_if:false\n\n\n\n\n\nRun a Step only in CI environment, skip it for local builds\n\n\n\nThis is quite similar to how you \ncompletely disable a step\n,\nbut instead of specifying \nfalse\n\nas the \nrun_if\n expression, you specify \n.IsCI\n, which will only be true in CI mode.\n\n\n\nThis method can be useful to debug builds locally, where you don't want to run\nspecific steps on your own Mac/PC. Lots of Steps have this \nrun_if\n flag set by default,\nfor example the \nGit Clone\n step is configured with \nrun_if: .IsCI\n in the step's\ndefault configuration (\nstep.yml\n), because the most common use case when you\nrun a build locally is that you already have the code on your Mac/PC\nand so you don't want to do a \nGit Clone\n. Of course you can change the \nrun_if\n\nproperty of any step, so you can specify a \nrun_if: true\n for the \nGit Clone\n\nstep if you want to run it locally too.\n\n\n\n!!! note\nCI mode can be enabled on your own Mac/PC by setting the \nCI\n environment to \ntrue\n\n(e.g. with \nexport CI=true\n in your Bash Terminal), or by running\n\nbitrise run\n with the \n--ci\n flag: \nbitrise --ci run ...\n._\n\n\n\nRun a Step only if the Build failed\n\n\n\nTo do this you have to switch to \nbitrise.yml\n mode\n(open the Workflow Editor on bitrise.io -\n left side: click on \nbitrise.yml\n\nto switch to the interactive \nbitrise.yml\n editor).\n\n\n\nYou have to add two properties to the Step you \nonly\n want to run when\nthe Build failed (at that point, when the Step would run):\n\n\n\n\n\nis_always_run: true\n (this enables the Step to be considered to run even if a previous Step failed)\n\n\nrun_if: .IsBuildFailed\n (you can find more examples of the \nrun_if\n template at: \nhttps://github.com/bitrise-io/bitrise/blob/master/_examples/experimentals/templates/bitrise.yml\n).\n\n\n\n\n\nAn example \nscript\n step, which will only run if the Build failed:\n\n\n\n- script:\n    is_always_run: true\n    run_if: .IsBuildFailed\n    inputs:\n    - content: |-\n        #!/bin/bash\n        echo \nBuild Failed!\n\n\n\n\n\n!!! note \nA \nrun_if\n can be any valid \nGo\n template\n\nA \nrun_if\n can be any valid \nGo template\n, as long as it evaluates to \ntrue\n or \nfalse\n (or any of the String representation, e.g. \nTrue\n, \nt\n, \nyes\n or \ny\n are all considered to be \ntrue\n). If the template evaluates to \ntrue\n the Step will run, otherwise it won't.\n\n\n\nAn example \nrun_if\n to check a \ncustom environment variable\n (you\ncan expose environment variables from your scripts too,\nusing \nenvman\n):\n\n\n\nrun_if: |-\n  {{enveq \nCUSTOM_ENV_VAR_KEY\n \ntest value to test against\n}}\n\n\n\n\nThis \nrun_if\n will skip the step in every case when the value of \nCUSTOM_ENV_VAR_KEY\n\nis not \ntest value to test against\n.", 
            "title": "Enable/Disable a step (optionally, based on a condition)"
        }, 
        {
            "location": "/dont-mark-build-failed-if-step-fails/", 
            "text": "To do this you have to switch to \nbitrise.yml\n mode (open the Workflow Editor on bitrise.io -\n left side: click on \nbitrise.yml\n to switch to the interactive \nbitrise.yml\n editor).\n\n\n\nAll you have to do is: add an \nis_skippable: true\n flag to the Step.\n\n\n\nAn example \nscript\n step which, although fails, it won't \nbreak\n the build:\n\n\n\n- script:\n    is_skippable: true\n    inputs:\n    - content: |-\n        #!/bin/bash\n        echo \nFailing Step.\n\n        exit 1\n        # exit 1 would mark this step as Failed, but it won't break the Build\n        #  because of the is_skippable: true flag / property\n\n\n\n\nYou can find more examples on \nGitHub\n.", 
            "title": "Don't mark the Build as failed if a given step would fail (ignore the error of the Step)"
        }, 
        {
            "location": "/expose-environment-variable/", 
            "text": "You can expose Environment Variables from one Step,\nto make it available for every other Step performed after the Step during the build.\nAn example might be that you want to generate a\nrelease note which you want to use in a message or deploy step.\nExposing environment variables is really easy,\nyou just have to use \nenvman\n if you want to make it available for every other Step.\n\n\n\nA very simple example might be:\n\n\n\nenvman add --key MY_RELEASE_NOTE --value \nThis is the release note\n\n\n\n\n\nYou can call \nenvman\n in any Step, including a script step,\nor even in your own script (stored in your repository) if you call it from a \nbitrise\n build.\n\n\n\nEnvman can be used in a couple of ways.\nYou can specify the value as the \n--value\n parameter (you can see this in the previous example),\npipe the value:\n\n\n\necho 'hi' | envman add --key MY_RELEASE_NOTE\n\n\n\n\nor read the value from a file:\n\n\n\nenvman add --key MY_RELEASE_NOTE --valuefile ./some/file/path\n\n\n\n\nYou can read more about how \nenvman\n can\nbe used on it's \nGitHub page\n.\n\n\n\n!!! warning \nEnv Var value size limit\n\nEnvironment Variable values set through \nenvman\n are limited to 10KB by default.\nThis is done in order to prevent issues with common tools.\nDifferent tools have different environment size constraints,\ne.g. \nBash\n will start to fail on OS X once the environments set\nexceed ~120KB (\nin total, not a single variable!\n).\n\n\n\nFor larger data you should use files or other solutions,\nand use environment variables to point to the file / to the\nID or location of where the data is stored.\n\n\n\n\nOnce the environment variable is exposed you can use it like\nany other environment variable. In \nbash\n you can reference\nthe previous example environment as: \n$MY_RELEASE_NOTE\n.\n\n\n\nYou can of course use these exposed environment variables in the inputs of other Steps.\nFor example the \nHockeyApp Deploy\n step has a \nnotes\n input,\nyou can reference the previous example variable by inserting \n$MY_RELEASE_NOTE\n into the input,\nlike: \nThe Release Note: $MY_RELEASE_NOTE\n,\nwhich will be resolved as \nThe Release Note: This is the release note\n (if you used\nthe first example to set the value of \nMY_RELEASE_NOTE\n).\n\n\n\nA simple example, exposing the release note and then using it in another \nScript step\n,\nand in a \nSlack step\n:\n\n\n\nformat_version: 1.1.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  example:\n    steps:\n    - script:\n        inputs:\n        - content: |\n            #!/bin/bash\n            envman add --key MY_RELEASE_NOTE --value \nThis is the release note\n\n    - script:\n        inputs:\n        - content: |\n            #!/bin/bash\n            echo \nMy Release Note: $MY_RELEASE_NOTE\n\n    - slack:\n        inputs:\n        - channel: ...\n        - webhook_url: ...\n        - message: \nRelease Notes: $MY_RELEASE_NOTE\n\n\n\n\n\nCopy an environment variable to another key\n\n\n\nIf you want to expose the value of an environment variable to be accessible\nthrough another environment variable key, you can simply expose the value with a new key.\n\n\n\nFor example, if you want to copy the value of the \nBITRISE_BUILD_NUMBER\n environment variable\nand make it available under the environment variable key \nMY_BUILD_NUMBER\n, you just have to\nread the current value and expose it under the new key.\n\n\n\nTo modify the first example here, which exposed a fix value:\n\n\n\nenvman add --key MY_RELEASE_NOTE --value \nThis is the release note\n\n\n\n\n\nsimply reference/read the value of the other environment variable in the \nenvman add ...\n command.\n\n\n\nTo expose the value of \nBITRISE_BUILD_NUMBER\n under the key \nMY_BUILD_NUMBER\n:\n\n\n\nenvman add --key MY_BUILD_NUMBER --value \n${BITRISE_BUILD_NUMBER}\n\n\n\n\n\nAfter this, subsequent steps can get the value of \nBITRISE_BUILD_NUMBER\n from the\n\nMY_BUILD_NUMBER\n environment variable.\n\n\n\nNote: if you change the value of \nBITRISE_BUILD_NUMBER\n after this, the\nvalue of \nMY_BUILD_NUMBER\n won't be modified, that will still hold the original value!\n\n\n\nOverwrite an Environment Variable if another one is set\n\n\n\nE.g. if a custom environment variable is set through the Build Trigger API.\n\n\n\nThe best way to do this, to make sure that no matter what, you overwrite the other env var,\nis to use a Script step, as described above, and check whether the custom env var is set.\n\n\n\nAs an example, if you want to overwrite the \nPROJECT_SCHEME\n environment variable,\nif, let's say, a \nAPI_PROJECT_SCHEME\n env var is set, just drop in a \nScript\n step (can be the very first one\nin the workflow), with the content:\n\n\n\n#!/bin/bash\nset -ex\nif [ ! -z \n$API_PROJECT_SCHEME\n ] ; then\n  envman add --key PROJECT_SCHEME --value \n$API_PROJECT_SCHEME\n\nfi\n\n\n\n\nThis script will check whether the \nAPI_PROJECT_SCHEME\n env var is defined,\nand if it is, then its value will be assigned to the \nPROJECT_SCHEME\n environment variable,\noverwriting the original value of \nPROJECT_SCHEME\n.\n\n\n\nAlternative solution: use Workflow Env Vars\n\n\n\nAlternatively you can set environment variables for Workflows too.\nThe Env Vars you set for a workflow will overwrite the env var\nif defined as an App Env Var or Secret Env Var.\n\n\n\nAn example workflow which defined an environment variable, and then runs another workflow\nwhich can use those env vars:\n\n\n\nworkflows:\n\n  deploy-alpha:\n    envs:\n    - ENV_TYPE: alpha\n    after_run:\n    - _deploy\n\n  _deploy:\n    steps:\n    - script:\n        inputs:\n        - content: |\n            #!/bin/bash\n            echo \nENV_TYPE: $ENV_TYPE\n\n\n\n\n\nIf you run the \ndeploy-alpha\n workflow, that will set the \nENV_TYPE\n env var to \nalpha\n,\nthen it will run the \n_deploy\n workflow, which can use that environment variable -\nin this example it will simply print its value (the printed text will be: \nENV_TYPE: alpha\n).", 
            "title": "Expose an Environment Variable and use it in another Step"
        }, 
        {
            "location": "/install-additional-tools/", 
            "text": "If you need something you can't find a Step for, you can always install \n use tools with scripts or Script steps.\n\n\n\nJust add a \nScript\n step to your Workflow, and either write your script there, or run a script from your repository.\n\n\n\nPasswordless \nsudo\n is enabled on all of our build virtual machines, so you can freely use \nsudo\n if you need it.\n\n\n\nOnce you have a working script, \nyou can also transform it into a Step\n and optionally share it with others (through our StepLib).\nYou can find a template and more information about how you can create your own Step at: \nhttps://github.com/bitrise-steplib/step-template\n\n\n\nStep by step setup\n\n\n\n\n\nOpen your app on Bitrise.io\n\n\nOpen the app's Workflow Editor (on the \nWorkflow\n tab -\n click \nManage Workflows\n)\n\n\nSelect a Workflow\n\n\nClick on the \n+\n sign (you can see this between every step), where you want to insert your Script step\n\n\nIn the step list search for \nscript\n, and click the \nAdd to Workflow\n button on the \nScript\n step item.\n\n\nNow that you have the Script step in your workflow, you just have to select it and write your script into the \nScript content\n input (on the right side of the Workflow Editor).\n\n\n\n\n\nNote: you can drag-and-drop reorder the steps in the Workflow, so you don't have to delete and re-add a step if you'd want to change the order.\n\n\n\nIf you want to run a script from your repository you can run it from this Script step. Paths are relative to your repository's root. So, for example, if you have a Bash script at \npath/to/script.sh\n you can run it with this \nScript content\n:\n\n\n\nbash ./path/to/script.sh\n\n\n\n\nOr, in a more robust form (which is better if you want to extend the content in the future):\n\n\n\n#!/bin/bash\nset -ex\nbash ./path/to/script.sh\n\n\n\n\nThe \nset -ex\n line is recommended for every multi-line Bash script, to make your scripts easier to debug.\n\n\n\nYou can of course run non Bash scripts too, e.g. a Ruby script:\n\n\n\n#!/bin/bash\nset -ex\nruby ./path/to/script.rb\n\n\n\n\nExamples\n\n\n\nAt this point you already have the Script step in your Workflow, and you just have to write the\nscript to install the dependency. How do you do that? Exactly the same way you would on\nyour own Mac / Linux, in your Terminal / Command Line!\n\n\n\nbrew\n on macOS\n\n\n\nE.g. to install \ncmake\n with a script step, on macOS, using \nbrew\n:\n\n\n\n#!/bin/bash\nset -ex\nbrew install cmake\n\n\n\n\nActually, the whole Script content could be as short as:\n\n\n\nbrew install cmake\n\n\n\n\nWhich is exactly how you would use \nbrew\n on your Mac, but you'll most likely\nadd more content to the Script step sooner or later; the first\nexample is a more future proof Bash script template.\n\n\n\napt-get\n on Linux\n\n\n\nE.g. to install \ncmake\n with a script step, on Linux, using \napt-get\n:\n\n\n\n#!/bin/bash\nset -ex\nsudo apt-get install -y cmake\n\n\n\n\n!!! note \nDon't forget the \n-y\n flag for \napt-get\n!\n\nIf you don't add the \n-y\n (\nyes\n) flag to the \napt-get\n command, \napt-get\n will\npresent a prompt which you have to accept or deny \nmanually\n.\nThis is not a problem on your own Linux machine, but in a CI environment\nyou can't provide manual input for \napt-get\n. To prevent this issue,\nand to auto accept the prompt, just use the \n-y\n flag, as shown in the example.\n\n\n\nAdvanced option: use \ndeps\n in \nbitrise.yml\n\n\n\nInstead of installing your tool inside the Script step, you can use the \ndeps\n option\nof the \nbitrise.yml\n. If you declare \ndeps\n \nfor a given Step\n,\nthe \nBitrise CLI\n\nwill check if that tool is installed, and will install it for you if required.\n\n\n\n!!! note \nAvailable dependency managers\n\nThis method is the preferred way of handling (step) dependencies, as the Bitrise CLI\nwill not (re)install the specified tool(s) if it's already available.\nThat said, there are tools which are not available in the supported dependency managers,\nor you need a version of the tool which is not available in the dependency manager.\nIn those cases you should simply install the tool inside the Script, as described above.\n\n\n\nAn example, installing \ncmake\n with either \napt-get\n (where \napt-get\n is available),\nor with \nbrew\n (on macOS):\n\n\n\ndeps:\n  brew:\n  - name: cmake\n  apt_get:\n  - name: cmake\n\n\n\n\nA minimal \nbitrise.yml\n for demonstration:\n\n\n\nformat_version: 1.2.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:\n        deps:\n          brew:\n          - name: cmake\n          apt_get:\n          - name: cmake\n        inputs:\n          - content: |-\n              #!/bin/bash\n              set -ex\n              which cmake\n\n\n\n\nAn advanced tip: if you want to declare a dependency which might be available from\nanother source (not through the package manager), then you might also want to declare the\nrelated \nbinary name\n. If that matches the package name (like in case of \ncmake\n) this is\ncompletely optional, but in case the package does not match the binary name you can\ndeclare it with \nbin_name\n. An example is AWS CLI, where the package name in both\npackage managers is \nawscli\n, but the binary itself is \naws\n.\n\n\n\nA minimal \nbitrise.yml\n for demonstration:\n\n\n\nformat_version: 1.3.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\nworkflows:\n  test:\n    steps:\n    - script:\n        deps:\n          brew:\n          - name: awscli\n            bin_name: aws\n          apt_get:\n          - name: awscli\n            bin_name: aws\n        inputs:\n          - content: |-\n              #!/bin/bash\n              set -ex\n              which aws\n\n\n\n\nConditional execution\n\n\n\nAdditionally, you can use Environment Variables in your scripts too.\nAs an example, using the \nPR\n environment variable\n(but you can use any \nAvailable Environment Variable\n,\nlike the ones exposed by previous steps in the Workflow),\nto run different scripts in case of a Pull Request and a non Pull Request build:\n\n\n\n#!/bin/bash\nset -ex\n\nif [[ \n$PR\n == \ntrue\n ]] ; then\n  echo \n=\n Pull Request mode/build!\n\n  bash ./path/to/in-case-of-pull-request.sh\nelse\n  echo \n=\n Not Pull Request mode/build!\n\n  bash ./path/to/not-pull-request.sh\nfi\n\n\n\n\nNote: if you \ndon't\n want to run any part of the Step/script based on a variable (like \n$PR\n),\nyou don't have to implement the check in the script. You can use the \nrun_if\n expression in\nthe \nbitrise.yml\n directly to declare in which case(s) the Step should run. Additionally,\n\nrun_if\n can be added to any step, not just to Script steps.\nYou can find more information about \nrun_if\n expressions\nin \nthis guide\n.", 
            "title": "Install Any Additional Tool"
        }, 
        {
            "location": "/optimize-your-build-times/", 
            "text": "You can improve your build times with the following tips.\n\n\n\nFeel free to suggest other ways of optimization!\n\n\n\nInclude your dependencies in your repository\n\n\n\nIncluding your dependencies (like CocoaPods) in your repository can speed up your builds.\nOnce the \ngit clone\n of your repository is done, everything will be in place to do your build.\n\n\n\nFor example, in case of CocoaPods, you can delete the CocoaPods Install step from your workflow\nif you include your \nPods\n directory \nand\n the CocoaPods generated \n.xcworkspace\n file in your repository.\n\n\n\nYou can read more about the pros \n cons of including your dependencies in your repository at:\n\nShould I commit my dependencies into my repository?\n\n\n\nUse the Build Cache\n\n\n\nIn some cases using the \nBuild Cache\n feature can also help to speed up your builds.\nNote: the efficiency of the Build Cache depends on the size of the files you want to cache,\nas well as on the number of files you want to cache.\nFor more information see the \nBuild Cache documentation\n.\n\n\n\nTurn off the \nClean build\n option of Xcode steps\n\n\n\nAll of our Xcode steps (Xcode Test, Xcode Archive and Xcode Analyze) have a \nDo a clean Xcode build ...?\n option.\nYou can usually turn off this option without causing any issues.\n\n\n\nBy turning off \nclean build\n you can speed up subsequent Xcode steps.\nThe first one will still have to do a full, clean build, because there's no build cache at the time it runs\n(as every build runs in a brand new, clean Virtual Machine, as descibed in \nCode Security\n),\nbut subsequent Xcode steps can use the build cache of the previous Xcode step(s), reducing the compilation time of the step.\n\n\n\nOther\n\n\n\nFeel free to suggest other ways of optimization!\n\n\n\n\n\nGuarding Against Long Compiles", 
            "title": "Optimize your build times"
        }, 
        {
            "location": "/skip-a-build/", 
            "text": "If you want to skip a specific commit, to not to start a build,\nall you have to do is to include either \n[skip ci]\n or \n[ci skip]\n\nin the commit message.\n\n\n\nFor example, the commit message:\n\n\n\nThis is not important, please [skip ci]\n\n\n\n\nwon't start a build, nor will:\n\n\n\nI just changed the README\n\n[ci skip]\n\n\n\n\n!!! warning \nOnly the head/last commit message is checked!\n\n\nIf you push more than one commit\n, only the last (\nhead\n) commit's\nmessage will be checked for the skip ci pattern!\n\n\n\nIf you'd decide that you still want to start a build you'll have to\neither rebase that commit (e.g. just change its commit message), or push another commit.\n\n\n\n!!! note \nYou can push an empty commit\n\nGit allows to create and push empty commits, so if you'd decide that you\nstill want to build a skipped build you can do \ngit commit --allow-empty -m \nI decided to run this\n\non the related branch and push the commit.\n\n\n\nPull Requests\n\n\n\nSkip CI works for Pull Requests too, but a little bit differently, due to how Pull Requests are\nhandled on the git source code hosting services.\n\n\n\nIn short, what you have to know is that Pull Requests are virtual/temporary \ncommits\n / \nbranches\n.\nIn case of GitHub there's actually a pull request related \nvirtual branch\n (ref), which, if you know\nits name, you can \nfetch\n through \ngit\n (if you add the related \nrefs/\n to your git \nfetch\n config).\nThis \nbranch\n (ref) is also removed / made unaccessible after you close the pull request.\nOther services like Bitbucket doesn't even create this virtual branch / ref, the pull request is just\na virtual data but can't be accessed through \ngit\n directly.\n\n\n\n!!! note \nWhat's the commit message of a Pull Request?\n\nIn any case this means that \nthe Pull Request itself\n is treated as a (virtual) commit,\nwhere \nthe commit message is the title + description of the Pull Request\n and\nnot the commit(s) of the pull request!\n\n\n\nThis means that, \nif you want to skip a pull request\n, you have to include the Skip CI\npattern \nin the Pull Request's title or description\n, and not in the commit's message!\n\n\n\nOnce you decide to not to skip the Pull Request / more commits in the pull request\n\nyou can simply remove the\nSkip CI pattern from the Pull Request's title or description, which should automatically\ntrigger a new build with the latest commit, and all future commits of the pull request\nwill be built too (unless you add a Skip CI pattern again).", 
            "title": "Skip a Build (skip ci)"
        }, 
        {
            "location": "/use-bitrise-yml-from-repository/", 
            "text": "Storing the build configuration (\nbitrise.yml\n) in your repository can be a great idea.\nIt has its own PROs and CONs of course, so you have to decide it yourself\nwhether this solution is a good fit for your project or not.\n\n\n\nThings to keep in mind!\n\n\n\nYou can find a discussion about what are the advantages and\ndisadvantages of this approach \non GitHub\n.\nTo highlight a few things to keep in mind if you'd want to store and use\nthe \nbitrise.yml\n from your repository:\n\n\n\nTrigger Map is better to be managed on bitrise.io\n\n\n\nYou can of course store the \ntrigger_map\n (or \nTriggers\n on the web UI)\nin your repository (in \nbitrise.yml\n), but if you do that you'll lose\nthe ability to \nignore\n patterns. This is because \nbitrise.io\n\nhave to evaluate the Trigger map \nbefore\n the repository would be cloned\nin order to be able to avoid starting a build based on the Trigger map.\n\n\n\nThe source code is never stored on \nbitrise.io\n,\n(see \nCode Security - Source code\n for more information),\nso if you store the trigger map in your repository, the only way to check it\nis to clone it first. Even if you prepare your \ntrigger_map\n in your repository to ignore\npatterns, \nbitrise.io\n will start a build to clone\nthe repository, before it could abort it.\n\n\n\nIn contrast, if you specify the Trigger Map on \nbitrise.io\n,\nyou can ignore patterns in a way that it won't even start a build.\n\n\n\nYou can't change the build configuration of a commit\n\n\n\nIf you use the \nbitrise.yml\n from the repository, that means that when you\nrebuild a specific commit, it will use the same \nbitrise.yml\n every time,\nthe one stored in the repository for that git commit.\n\n\n\nThe only way to change the configuration\n is to checkout the related\nbranch, change the \nbitrise.yml\n, commit the changes,\npush and start a \nnew\n build (rebuild of a commit won't work,\nthat will always get the same \nbitrise.yml\n, the one stored at the commit).\n\n\n\nIf you store your build configuration on \nbitrise.io\n\nyou can always rebuild any commit with a new build configuration,\n\nthe configuration is not tied to the commit / state of the repository\n.\nYou can simply change a parameter and hit \nrebuild\n, the new build\nwill use the latest configuration from \nbitrise.io\n.\n\n\n\nYou can't edit the configuration in the Workflow Editor on bitrise.io\n\n\n\nThe Workflow Editor on \nbitrise.io\n can only be used\nto visualize and edit the configuration stored on \nbitrise.io\n.\n\n\n\nThe \noffline workflow editor\n\nof course can be used, so this is probably not a huge issue - and we're\nworking on it to make it as streamlined as possible - but might\nmake it harder to get started (as you have to install the Bitrise CLI\nlocally).\n\n\n\nPull Requests can run builds with any custom configuration\n\n\n\nWhen someone sends a Pull Request they can modify the \nbitrise.yml\n\nin your repository any way they like it. A recent trend for example\nis to send pull requests which run a bitcoin miner, as long as\nthat's possible. This can make \nyour\n builds to queue, until you\nabort the related build or it hits the build time limit.\n\n\n\nExample to use bitrise.yml from the repository\n\n\n\nThere are quite a few ways to accomplish this, as all you need is:\n\n\n\n\n\nDefine a \nwrapper\n build config on \nbitrise.io\n,\nwhich defines how and from where your \nbitrise.yml\n will be retrieved.\nE.g. you could store the \nbitrise.yml\n in a \nGitHub Gist\n\ntoo, not just in your repository. In this example we'll use the configuration\nfrom the repository, so the \nwrapper\n configuration on \nbitrise.io\n\nwill define how the repository should be retrieved. Note: this also allows\nmore customization, for example if the repository have to be accessed through\na VPN, you can configure that in the \nwrapper\n config and it will work.\n\n\nRun the build configuration (\nbitrise.yml\n) with the \nBitrise CLI\n.\nThis is the same runner which runs any other build on the \nbitrise.io\n\nbuild virtual machines, so it's always preinstalled and ready to be used.\n\n\n\n\n\nThe example here is really simple to setup, should work in most cases (unless\nyou need a VPN for cloning the repository for example), but \nit also requires\nyou to maintain the Trigger Map on \nbitrise.io\n instead\nof in the repository\n, as that is the recommended solution.\n\n\n\nStep by step:\n\n\n\n\n\nCreate an app on \nbitrise.io\n, or if you already have it registered\nopen it.\n\n\nGo to the \nWorkflow\n tab to open the Workflow Editor.\n\n\nIn the Workflow Editor switch to \nbitrise.yml\n mode\n\n\nIn the \nbitrise.yml\n mode:\n\n\n\nIf you already have a configuration which you want to use, download the \nbitrise.yml\n first,\nand save it into the \nroot\n of your repository.\n\nThere's a button to quickly download the current \nbitrise.yml\n.\n\n\nOnce you're ready to replace your configuration on bitrise.io,\ncopy the \nbitrise.yml content for bitrise.io\n from below and paste\nit into the editor on \nbitrise.io\n (in \nbitrise.yml\n mode of the editor)\n\n\n\n\n\n\nSave the changes.\n\n\n\n\n\n!!! note \nAfter downloading the original bitrise.yml from bitrise.io\n\nThe original \nbitrise.yml\n you downloaded from \nbitrise.io\n\nmost likely includes the steps to retrieve your repository.\nThese steps will be redundant, as you will define how the repository should be accessed\nin the \nwrapper\n config on \nbitrise.io\n,\nso go ahead and remove the \nactivate-ssh-key\n and \ngit-clone\n\nsteps from it before you would commit it into your repository.\n\n\n\nbitrise.yml content for bitrise.io\n\n\n\n---\nformat_version: 1.4.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\ntrigger_map:\n- push_branch: \n*\n\n  workflow: ci\n- pull_request_target_branch: \n*\n\n  workflow: ci\n\nworkflows:\n  _run_from_repo:\n    steps:\n    - activate-ssh-key:\n        run_if: '{{getenv \nSSH_RSA_PRIVATE_KEY\n | ne \n}}'\n    - git-clone: {}\n    - script:\n        title: continue from repo\n        inputs:\n        - content: |-\n            #!/bin/bash\n            set -ex\n            bitrise run \n${BITRISE_TRIGGERED_WORKFLOW_ID}\n\n  ci:\n    after_run:\n    - _run_from_repo\n\n  another-workflow:\n    after_run:\n    - _run_from_repo\n\n\n\n\n\nHow this works:\n\n\n\nThis setup splits the build configuration into two parts:\n\n\n\n\n\nThe \nwrapper\n config on \nbitrise.io\n which\n\ndefines how the repository have to be retrieved\n (e.g. through a Git Clone),\nwhich workflows are exposed for \nbitrise.io\n builds,\nand defines the automatic \nTrigger mapping\n.\n\n\nYour build configuration (\nbitrise.yml\n), stored in your repository,\nwhich \ndefines what should happen during the builds.\n\n\n\n\n\nThis \nwrapper\n configuration\n\ndefines a common workflow \n_run_from_repo\n,\nwhich will activate an SSH key (if specified), Git Clone the repository,\nand then switch to use the \nbitrise.yml\n from the repository\nby running \nbitrise run \n${BITRISE_TRIGGERED_WORKFLOW_ID}\n.\n\n\n\nThis common workflow (\n_run_from_repo\n) is then used through other workflows, like\n\nci\n and \nanother-workflow\n, using the \nafter_run\n\n\nworkflow chaining\n\nmechanism. Those workflows do not have any steps, the only thing\nthe \nci\n and \nanother-workflow\n workflows do is running the\ncommon \n_run_from_repo\n workflow.\n\n\n\nThe trick is \nbitrise run \n${BITRISE_TRIGGERED_WORKFLOW_ID}\n.\nThe \nBITRISE_TRIGGERED_WORKFLOW_ID\n environment variable is set to the\n\nentry\n workflow, \nthe one which started the build.\n\nSo, by running the \nci\n workflow, the \nbitrise run \n${BITRISE_TRIGGERED_WORKFLOW_ID}\n\ncommand will be the same as \nbitrise run \nci\n.\n\n\n\nThis makes it super simple and quick to expose workflows from your \nbitrise.yml\n (stored in your\nrepository) to \nbitrise.io\n, all you have to do is:\n\n\n\n\n\nDefine the workflow in your \nbitrise.yml\n (in your repository).\n\n\nClone the \nci\n workflow (or the \nanother-workflow\n) with a name matching the workflow\nin your \nbitrise.yml\n (in your repository), or create a new empty workflow\nwith a matching name and add the \n_run_from_repo\n as an \nafter_run\n workflow.\n\nNote: in the Workflow Editor UI you can quickly clone a workflow by\nselecting the workflow, then clicking the \nadd new workflow\n (\n+\n) button.\n\n\n\n\n\nStep by step usage guide of the wrapper config:\n\n\n\nFor example, to add a new \ndeploy\n workflow and to expose it for \nbitrise.io\n builds,\nonce you \nprepared your wrapper config on bitrise.io\n:\n\n\n\n\n\nCreate a \ndeploy\n workflow \nin your \nbitrise.yml\n (in your repository, and don't forget to commit and push\nthe \nbitrise.yml\n changes!)\n\n\nThen create a new workflow with the same name (\ndeploy\n) \non \nbitrise.io\n\n\nMake sure that the \ndeploy\n workflow on \nbitrise.io\n has\nthe \n_run_from_repo\n as an \nafter_run\n workflow.\n\n\nDefine \nTriggers\n for the \ndeploy\n workflow \non \nbitrise.io\n\nif you want to automate the triggering of that workflow.\n\n\n\n\n\nFollowing the steps above, for example to run \ndeploy\n for every code push on \nmaster\n you should\nhave a configuration like this \non \nbitrise.io\n:\n\n\n\n---\nformat_version: 1.4.0\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\n\ntrigger_map:\n- push_branch: \nmaster\n\n  workflow: deploy\n- push_branch: \n*\n\n  workflow: ci\n- pull_request_target_branch: \n*\n\n  workflow: ci\n\nworkflows:\n  _run_from_repo:\n    steps:\n    - activate-ssh-key:\n        run_if: '{{getenv \nSSH_RSA_PRIVATE_KEY\n | ne \n}}'\n    - git-clone: {}\n    - script:\n        title: continue from repo\n        inputs:\n        - content: |-\n            #!/bin/bash\n            set -ex\n            bitrise run \n${BITRISE_TRIGGERED_WORKFLOW_ID}\n\n  deploy:\n    after_run:\n    - _run_from_repo\n\n  ci:\n    after_run:\n    - _run_from_repo\n\n  another-workflow:\n    after_run:\n    - _run_from_repo\n\n\n\n\n\nThis configuration will run the \ndeploy\n workflow \nfrom your repository\n for every\ncode push on the \nmaster\n branch, the \nci\n workflow \nfrom your repository\n for\nevery code push on other branches as well as for Pull Requests,\nand it will never run \nanother-workflow\n automatically, but you will be able\nto start manual builds with \nanother-workflow\n, which will invoke\nthe \nanother-workflow\n workflow \nfrom the \nbitrise.yml\n in your repository\n.", 
            "title": "Use bitrise.yml from repository"
        }, 
        {
            "location": "/xcodebuild-export-options/", 
            "text": "If you create a new iOS app on \nbitrise.io\n\nthe generated default workflow wil include our \nXcode Archive\n step.\nThis step can manage to archive and export your iOS app.\n\n\n\nA bit of history and technical info\n\n\n\nIf the step is used with \nXcode 6\n it'll generate the following (legacy) command to export\nthe \nipa\n of your app (you can see it in the step's log):\n\n\n\nxcodebuild -exportArchive \\\n    -exportFormat ipa \\\n    -archivePath \n/var/folders/lb/8n5bn9k975qgw662jpqdy7mm0000gn/T/bitrise-xcarchive.YnAMfpzJ/ios-simple-objc.xcarchive\n \\\n    -exportPath \n/Users/vagrant/deploy/ios-simple-objc.ipa\n \\\n    -exportProvisioningProfile \nXyz\n\n\n\n\n\nBack in the days of Xcode 6 this was everything you had to do; just specify the format to be \nipa\n\nand set the required paths and the Provisioning Profile to be used for code signing the \nipa\n.\n\n\n\nXcode 7\n introduced a lot of additional archive feature and the support for\ndefining more complex archive parameters. This meant that although Xcode 7 still supports\nthe old parameters, it's now declared as \ndeprecated\n, and you'd get\nthe following warning if you'd use the old parameters instead of the new \n-exportOptionsPlist\n parameter:\n\n\n\nxcodebuild: WARNING: -exportArchive without -exportOptionsPlist is deprecated\n\n\n\n\nThe export command's \nnew version\n expects a Plist file (\n-exportOptionsPlist\n),\nwhich should include all the archive parameters (including code signing type/method,\nand other parameters like enable/disable Bitcode). The full command looks like this:\n\n\n\nxcodebuild -exportArchive \\\n    -archivePath \n/var/folders/lb/8n5bn9k975qgw662jpqdy7mm0000gn/T/bitrise-xcarchive.QbpHVvNx/ios-simple-objc.xcarchive\n \\\n    -exportPath \n/var/folders/lb/8n5bn9k975qgw662jpqdy7mm0000gn/T/bitrise-xcarchive.aCvNPRAi\n \\\n    -exportOptionsPlist \n/Users/vagrant/deploy/export_options.plist\n\n\n\n\n\nBy default the \nXcode Archive\n step generates the minimal sufficient Plist file,\nwith only the export \nmethod\n defined in it (unless you specify the \nexport_options_path\n input,\nwe'll get back to this a bit later):\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\n!DOCTYPE plist PUBLIC \n-//Apple Computer//DTD PLIST 1.0//EN\n \nhttp://www.apple.com/DTDs/PropertyList-1.0.dtd\n\n\nplist version=\n1.0\n\n\ndict\n\n    \nkey\nmethod\n/key\n\n    \nstring\ndevelopment\n/string\n\n\n/dict\n\n\n/plist\n\n\n\n\n\nAbout the Xcode Archive step generated export options\n\n\n\nThe default \ngenerated\n export options Plist file only specifies\nthe \nexport method\n (\napp-store\n, \nad-hoc\n, \nenterprise\n or \ndevelopment\n)\nbased on the provisioning profile embedded in the \n.xcarchive\n (which is generated by the \nxcodebuild archive\n\ncommand, also performed by the \nXcode Archive\n step, right before the \nxcodebuild -exportArchive\n command).\n\n\n\nThe embedded provisioning profile depends on your code sign settings in your project.\nYou can force the desired code signing configuration\nwith \nXcode Archive\n step's \nforce_code_sign_identity\n and \nforce_provisioning_profile\n inputs.\nYou can find more information about these options in the \niOS Code Signing\n article.\n\n\n\nEvery other export option which can be defined in the Plist is optional.\n\n\n\nUse your own export options\n\n\n\nIn case of the default export_options.plist does not fit your needs,\nyou can specify your own export options too.\nTo do this create a plist file (in your repository) with the options you want to use.\n\n\n\n!!! note \nAvailable export options\n\nYou can get a list of all available options by calling \nxcodebuild -h\n -\ncheck the \nAvailable keys for -exportOptionsPlist:\n section of the printed help.\n\n\n\nThese are the options you can select in Xcode when you export the ipa manually.\n\n\n\nThe \nrecommanded\n way is to \nput this generated plist file in your project's repository\n.\nThen you can set \nXcode Archive\n step's \nexport_options_path\n input\nto the path of your plist file (e.g. \n./path/to/export-options.plist\n).\n\n\n\nDisable bitcode in ipa\n\n\n\nBy default uploadBitcode export options is set to YES\n, unless you specifically disable\nit in the export options Plist.\nIf it does not fit your requirements you have to use your own export options,\ninstead of the archive steps generated one.\n\n\n\nYour export options plist should look like:\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\n!DOCTYPE plist PUBLIC \n-//Apple Computer//DTD PLIST 1.0//EN\n \nhttp://www.apple.com/DTDs/PropertyList-1.0.dtd\n\n\nplist version=\n1.0\n\n\ndict\n\n    \nkey\nmethod\n/key\n\n    \nstring\napp-store\n/string\n\n    \nkey\nuploadBitcode\n/key\n\n    \nfalse/\n\n\n/dict\n\n\n/plist\n\n\n\n\n\n!!! note \nCode Signing note\n\nOf course, if you set the \nmethod\n to \napp-store\n then you have to upload / use\nan App Store code signing Identity \n Provisioning Profile (it have to be\navailable in the system).\n\n\n\nRelated issues:\n\n\n\nERROR ITMS-90635: Invalid Mach-O Format\n\n\n\nTransporter Error Output: ERROR ITMS-90635: Invalid Mach-O Format.\n...\nVerify that all of the targets for a platform have a consistent value for the ENABLE_BITCODE build setting.\n...\n\n\n\n\nThis error occurs if you have different \nENABLE_BITCODE\n settings\nin your (sub)projects, including the projects generated by CocoaPods for example.\n\n\n\nIf you use CocoaPods you can \noverride the \nENABLE_BITCODE\n in the pod projects\n by adding\nthe following section to your \nPodfile\n:\n\n\n\nFor CocoaPods 1.0+:\n\n\n\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['ENABLE_BITCODE'] = 'NO'\n    end\n  end\nend\n\n\n\n\nFor CocoaPods 0.39 and below:\n\n\n\npost_install do |installer|\n  installer.project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['ENABLE_BITCODE'] = 'NO'\n    end\n  end\nend", 
            "title": "Xcode Archive: export options"
        }, 
        {
            "location": "/bitrise-tools/", 
            "text": "List of Open Source tools maintained by the Bitrise team.\n\n\n\n!!! note \nWhere can I find the repositories?\n\nFor historical reasons the core Bitrise CLI tools live in \ngithub.com/bitrise-io\n,\nbut most of our tools, and every new tool we create lives in\nthe \ngithub.com/bitrise-tools\n,\nand the CLI core components (plugins, etc.)\nin the \ngithub.com/bitrise-core\n GitHub organization.\n\n\n\nCore, Bitrise CLI tools\n\n\n\n\n\nbitrise\n -\nthe Bitrise CLI, which is used on \nbitrise.io\n\nto run the builds, as well as you can install it on your own Mac/Linux and run your the build locally!\n\n\nstepman\n -\nused for managing the Step Library, including\ndownloading and sharing steps.\n\n\nenvman\n -\nenvironment variable manager, can be used independently\nand Bitrise CLI uses it to isolate and manage environment variables during the build.\n\n\n\n\n\nBitrise CLI plugins\n\n\n\n\n\nAnalytics plugin\n\n\n\n\n\nInfrastructure\n\n\n\n\n\nbitrise-machine\n -\nManage bitrise CLI runner hosts (virtual machines). Create, destroy, cleanup based on configuration.\n\n\nbitrise-bridge\n -\nResponsible for \nbridging\n a Bitrise CLI command\nfrom a remote host to the local Bitrise CLI;\neither directly or by creating a Docker container and running the Bitrise CLI command in it.\n\n\ncmd-bridge\n -\nHelps bridging an outside (generic) command (e.g. any command, through SSH) into a host. Useful in cases\nwhere the command have to be performed in a specific environment, e.g. the iOS Simulator\ncan't be started from an SSH session, it have to be started from a logged in \nGUI\n user.\nIn this case you start \ncmd-bridge\n's server in the environment, and then\nyou can use \ncmd-bridge\n through SSH or another way to send commands to the running\n\ncmd-bridge\n server, which will perform the commands in its context / the environment\nit is running in.\n\n\ngarden\n -\nA tool to manage your template (plan) based directories.\nYou can perform a setup (plant) by running garden grow,\nwhich'll create your garden (directories) based on your plans (temlates).\n\n\n\n\n\niOS\n\n\n\n\n\ncodesigndoc\n -\nYour friendly iOS Code Signing Doctor.\n\n\n\n\n\nGeneric\n\n\n\n\n\ndepman\n -\nSuper Simple Dependency Manager\n\n\nreleaseman\n -\nYour friendly Release Manager\n\n\n\n\n\nGo\n\n\n\nGo / golang related tools.\n\n\n\n\n\ngows\n -\nGo Workspace / Environment Manager, to easily manage the Go Workspace during development.\n\n\ngoinst\n -\nGo Install command line tools in an isolated environment.\n\n\n\n\n\nServer / service\n\n\n\n\n\nbitrise webhooks\n -\nBitrise Webhooks processor. Transforms various incoming webhooks (GitHub, Bitbucket, Slack, ...)\nto \nbitrise.io\n's Build Trigger API format, and calls it to start a build.\n\n\nDATapi\n -\nA very simple data series storage service.\nStore and retrieve data series in a quick and simple way, based on timestamp and category of the data.\n\n\n\nDATapi Ruby Client", 
            "title": "Bitrise Tools"
        }, 
        {
            "location": "/workflow-editor-doesnt-load/", 
            "text": "This can happen if you modified the \nbitrise.yml\n / workflow configuration in a way which crashes the Workflow Editor UI.\n\n\n\nIf this would happen please \ncontact us\n so we can fix the issue in the UI code,\nthen you can fix the \nbitrise.yml\n through our API.\n\n\n\nYou can find an example of how the API works \non GitHub\n.\nIn short, you can use a simple \ncurl\n call to download \n to upload an app's config / \nbitrise.yml\n to \nbitrise.io\n.\n\n\n\nWith the Bitrise API you can download the \nbitrise.yml\n from \nbitrise.io\n even if it breaks the Workflow Editor UI,\nfix it locally and then upload the fixed \nbitrise.yml\n with another API call. For this all you need is a Personal Access Token, which you can generate on your \naccount's security tab\n.\n\n\n\nTo download the \nbitrise.yml\n please check the \nrelated section of the Bitrise API documentation\n.\n\n\n\n!!! note \nWhere to get the App Slug and API Token?\n\nYou can find both the app's App Slug and the API Token on the \nCode\n tab of the app\non \nbitrise.io\n.\n\n\n\nSave the \nbitrise.yml\n into a file, fix it, then you can upload it with another \ncurl\n call.\n\n\n\nTo upload the \nbitrise.yml\n please also follow the \nrelated part of the Bitrise API documentation\n.\n\n\n\nNote: make sure that you set the right \npath/to/bitrise.yml\n - specify the path of\nthe \nbitrise.yml\n file where you saved the fixed \nbitrise.yml\n!", 
            "title": "Workflow Editor doesn't load"
        }, 
        {
            "location": "/auto-deploy-middleman-project/", 
            "text": "This tutorial helps you create a basic static website project (e.g. a Blog) with \nMiddleman\n,\nconnect and deploy it with Bitrise.\n\n\n\n1. Create and clone a repository on Github\n\n\n\nTo create a new repository on Github, \nclick here\n.\nYou need to sign in with your Github account, or sign up if you don't have one yet.\nOnce you created your repository, clone it.\n\n\n\n2. Install Middleman\n\n\n\nMiddleman is distributed using the RubyGems package manager.\nThis means you will need both the Ruby language runtime installed and RubyGems to begin using Middleman.\n\n\n\nMacOS comes prepackaged with Ruby, however, some of the Middleman's dependencies need to be compiled\nduring installation and on macOS that requires Xcode.\nXcode can be installed via the \nMac App Store\n.\nAlternately you can just install the Xcode Command Line Tools, that should be enough\nif you don't want to install the full Xcode.app.\n\n\n\nOnce you have Ruby and Xcode (Command Line Tools), execute the following from the command line:\n\n\n\ngem install middleman\n\n\n\n\nThis will install Middleman, its dependencies and the command-line tools for using Middleman.\n\n\n\n3. Create a Middleman project\n\n\n\nTo create a Middleman project, navigate to the root folder of your repository and execute the following from the command line:\n\n\n\nmiddleman init my_new_project\n\n\n\n\nOnce the setup is finished, commit and push your changes.\n\n\n\n4. Connect your repository with Bitrise\n\n\n\nTo connect your repository with Bitrise, visit the \nBitrise\n site.\nYou need to sign in with your Bitrise account, or sign up if you don't have one yet.\nOnce you're signed in, select \nAdd new App\n in the top dropdown menu.\n\n\n\nIn the first step, you need to select the provider, where you store your code, in this case, GitHub.\n\n\n\nIn the second step, you will see a list of all your repositories on GitHub. Select the one you just created.\n\n\n\nIn the third step, you will get an alert, since the repository you are connecting is not an Xcode project.\nSelect \nConfigure Manually\n, then enter the branch name \nmaster\n.\n\n\n\n5. Prepare your Workflow\n\n\n\nOnce you created your project, select it in the \nDashboard\n\nand select the \nWorkflow\n tab from the top menu.\nWe are going to add a bash script that will be executed on each build.\nFirst, delete all the automatically created steps (if any).\nNext, we need to add new steps.\nYou can add new steps by clicking on the \n+\n sign button between steps / in the step list and selecting the step\nfrom the step list popup. Add the following steps to your Workflow, in this order:\n\n\n\n\n\nActivate SSH key\n - unless you used the public, non SSH URL of the repository during the Add New App process\n\n\nGit Clone Repository\n\n\nScript\n\n\n\n\n\nSelect the \nScript\n step and add the following lines:\n\n\n\n#!/bin/bash\nset -ex\nbundle install\nbundle exec middleman build --verbose\n\n\n\n\nThe above code installs the dependencies specified in your \nGemfile\n, and runs a Middleman build on the virtual machine.\n\n\n\n6. Deploy to Amazon S3: Add an Amazon S3 bucket sync to your Workflow steps\n\n\n\nNow we are going to add and customize an Amazon S3 bucket sync to the Workflow steps.\nClick on the \nAdd new Step\n button and select \nAmazon S3 bucket sync\n from the step list.\n\n\n\nSelect the step to customize it.\n\n\n\n\n\nEnter your AWS access key\n\n\nYour AWS secret key\n\n\nAnd enter a name for your S3 bucket.\n\n\nFor your local path, enter the following: \n$BITRISE_SOURCE_DIR/build/\n\n\n\n\n\nThis will select the \ncontents\n of the build folder in the project source path on the virtual machine.\nIt will be uploaded on every build.\n\n\n\nFor access control, enter \npublic-read\n or \nprivate\n, as advised.\n\n\n\n!!! note \nAlternative deploy destinations\n\nYou can of course use \nHeroku\n, GitHub pages or any other service\nas your deployment target.\nYou can find a more complex setup, deploying to \nHeroku\n,\n\non our Blog\n\n\n\n7. Run build manually\n\n\n\nOnce the configuration of your Workflow is complete,\nyou can run a build manually by clicking on the \nStart/Schedule a build\n button on the app's page (where you see the\n\nBuilds\n, \nWorkflow\n, \nTeam\n, ... tabs).\n\n\n\n8. Run builds automatically\n\n\n\nIf you chose GitHub when adding your repository, each code change (commit) on GitHub will automatically trigger a Bitrise build.\nOtherwise you can find more information about how you can setup a Webhook, to trigger builds\nautomatically for code push, pull request and tags \nhere\n.", 
            "title": "Auto deploy your Middleman blog / static website"
        }, 
        {
            "location": "/build-with-fake/", 
            "text": "To add support for your \nFAKE\n build scripts,\nopen your app's \nWorkflow Editor on bitrise.io\n\nand add a \nScript\n step to your workflow.\n\n\n\nBelow you can find an example script content to perform a build with FAKE,\n\nmake sure you fill out the parameters at the top of the script\n!\n\n\n\n#!/bin/bash\nset -ex\n\n# Fill out these parameters:\n# You should use the same directory that you set in your build script for the FAKE dll\noutput_directory=tools\nfake_build_script=build.fsx\nfake_target_name=\nfake_option_flags=\n\n# ---\n\nfake_exe=\n${output_directory}/FAKE/tools/fake.exe\n\n\nif [ ! -f \n${fake_exe}\n ]; then\n  printf \n\\e[34mInstalling FAKE\\e[0m\\n\n\n  nuget install FAKE -OutputDirectory \n${output_directory}\n -ExcludeVersion -NoCache -NonInteractive\nfi\n\ncommand=(\nmono\n \n${fake_exe}\n)\n\nif [ -n \n$fake_build_script\n ] ; then\n  command+=(\n${fake_build_script}\n)\nfi\n\nif [ -n \n$fake_target_name\n ] ; then\n  command+=(\n${fake_target_name}\n)\nfi\n\nif [ -n \n$fake_option_flags\n ] ; then\n  command+=(\n${fake_option_flags}\n)\nfi\n\nprintf \n\\e[34mExecuting ${fake_build_script}\\e[0m\\n\n\n$(IFS=' '; echo \n${command[*]}\n)\n\n\n\n\nYou should update the \noutput_directory\n and \nfake_build_script\n variables for your needs and you are ready to go!\n\n\n\n!!! note\nYou should set the \noutput_directory\n to the same directory where your build script will search for the FAKE dlls.", 
            "title": "Build with FAKE (F# Make)"
        }, 
        {
            "location": "/community-created/", 
            "text": "If you write a tutorial or blog post about Bitrise feel free to\n\nadd it to this list yourself\n\nor \ncontact us\n and we'll add it for you!\n\n\n\nEnglish\n\n\n\nGetting Started\n\n\n\n\n\nHow to implement mobile continuous integration(CI) and delivery(CD) using bitrise.io\n\n\n\n\n\niOS\n\n\n\n\n\nLet's automate Swift builds with Bitrise\n\n\nThe Road to Bitrise\n - \nswitching from Jenkins\n\n\nBitrise and Carthage - a simple guide about how to use Carthage on Bitrise\n\n\n\n\n\nAndroid\n\n\n\n\n\nSeamless Android Builds With Bitrise. Offload Your System\n\n\nHow to automate Android build process on Bitrise CI (part 1)\n\n\nHow to automate Android build process on Bitrise CI (part 2)\n\n\nHow to Connect Physical Devices to Bitrise.io\n - \nOpen STF\n integration\n\n\n\n\n\nXamarin\n\n\n\n\n\njfarrell.net\n tutorial series\n\n\n\nWelcome to Bitrise\n\n\nGetting Started with Bitrise\n\n\nUnderstanding Workflows\n\n\n\n\n\n\nXamarin project setup on Bitrise.io\n - \nyoutube video\n\n\nXamarin Continuous Integration with Bitrise.io\n - \nXamarin project setup guide with Code Signing notes\n\n\n(Xamarin) Continuous Integration and Deployment with Bitrise\n - \ngetting started guide\n\n\nMotz Codes Live: Continuous Integration \n Deployment for Xamarin with Bitrise\n - \nyoutube video, detailed guide\n\n\n\n\n\nReact Native\n\n\n\n\n\nTesting in React Native\u200a\u2014\u200aJest \n Detox\n\n\nHow to automate your React Native deployment workflow using Bitrise\n\n\nContinuous Integration for React Native Apps With Fastlane and Bitrise (iOS)\n\n\nSnowflake: React Native app Continuous Integration with Bitrise.io\n - \ndetailed setup guide with youtube videos\n\n\nBitrise + CodePush + React Native = Ideal Mobile CI Setup?\n\n\n\n\n\nCordova\n\n\n\n\n\nHow to build Cordova-based Android project on bitrise.io\n\n\n\n\n\nmacOS app\n\n\n\n\n\nContinuous happiness for Mac\n - \nbuild your Mac projects on Bitrise\n\n\n\n\n\nOther\n\n\n\n\n\nImproved Continuous Integration With Bitrise \u2013 R\u00e9my Chantenay (Travelex)\n\n\nI was trying to setup a macOS Server for continuous integration. Now I am a happy Bitrise user.\n\n\nThe Trials of Mobile Automation at InVision\n - \nChatOps with Slack and Bitrise\n\n\nHow to send commit changes by email once CI build passes?\n\n\nContinuous integration made easy with Bitrise\n - \nintro to Step development\n\n\nHow to Create Bitrise Step in Go \u2013 Flutter Example\n - \nStep development in Golang\n\n\n\n\n\nJapanese\n\n\n\n\n\nReactNative \u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092 Bitrise \u3067\u30d3\u30eb\u30c9\u3059\u308b\n - \nBuild ReactNative app with Bitrise\n\n\nbitrise + deploygate\u3067titanium\u30a2\u30d7\u30ea\u8a55\u4fa1\u74b0\u5883\u3092\u4f5c\u308b\n - \nTitanium, Bitrise and deploygate\n\n\nBitrise\u3067iTunesConnect\u306b\u81ea\u52d5\u3067ipa\u30d5\u30a1\u30a4\u30eb\u3092\u30d3\u30eb\u30c9\niOS\u30ea\u30ea\u30fc\u30b9\u624b\u9806\n - \nAutomate the deployment of iOS apps to iTunesConnect\n\n\nBitrise\u306eScheduled Build\u3092\u4f7f\u3063\u3066\u30ad\u30e5\u30fc\u304c\u8a70\u307e\u308b\u554f\u984c\u3092\u6539\u5584\u3059\u308b\n - \nUse Bitrise's Scheduled Build to optimize build times\n\n\nBITRISE\u3092\u7528\u3044\u305fAndroid\u30a2\u30d7\u30ea\u306e\u81ea\u52d5\u914d\u5e03\n - \nAutomatic distribution of Android apps using Bitrise\n\n\niOS\u7528\u306eCI\u30b5\u30fc\u30d3\u30b9Bitrise\u3092\u4f7f\u3063\u3066\u307f\u305f\n - \nDetailed introduction guide\n\n\niOS\u30a2\u30d7\u30ea\u7528\u306eCI\u74b0\u5883\u3092\u4f5c\u308d\u3046\n - \nUsing Bitrise to deploy iOS apps to Deploygate\n\n\nAndroid\u30a2\u30d7\u30ea\u958b\u767a\u7528\u306eCI\u74b0\u5883\u3092\u4f5c\u308d\u3046\n - \nUsing Bitrise to deploy Android apps to Deploygate\n\n\nBITRISE\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\n - \nSlideShare\n\n\nCircleCI\u306eiOS\u30d3\u30eb\u30c9\u304c\u6709\u6599\u30d7\u30e9\u30f3\u5316\u3059\u308b\u3089\u3057\u3044\u306e\u3067\u3001Bitrise\u306e\u7121\u6599\u30d7\u30e9\u30f3\u306b\u4e57\u308a\u63db\u3048\u3066\u307f\u305f\n - \nMigrating a CircleCI configuration to Bitrise\n\n\niOS\u7528\u306eCI\u30b5\u30fc\u30d3\u30b9\u300cBitrise\u300d\u3092\u4f7f\u3063\u305f\u30e1\u30e2\n - \nNotes about using Bitrise for iOS Continuous Integration\n\n\n\u4ffa\u7684Bitrise\u6d3b\u7528\u8853\n\n\niOS\u5bfe\u5fdc\u306eCI\u30b5\u30fc\u30d3\u30b9\u300cBitrise\u300d\u3092\u4f7f\u3063\u3066\u307f\u305f\n - \nSlideShare\n\n\nBitrise,fastlane,Crashlytics\u3067iOS\u30a2\u30d7\u30ea\u306e\u30c6\u30b9\u30c8\u914d\u5e03\u3092\u81ea\u52d5\u5316\u3059\u308b\n - \nBitrise + fastlane, automate testing \n deployment (to Crashlytics) of iOS apps\n\n\nXcode iOS CI Tutorial Bitrise\u7de8 -Amarron Blog\n\n\nfastlane\u3068Bitrise\u3067iOS\u30a2\u30d7\u30ea\u306eCI\u59cb\u3081\u307e\u3057\u305f\n - \nCI with Bitrise and fastlane\n\n\n\n\n\nPortuguese\n\n\n\n\n\nComo implementar mobile continuous integration(CI) e delivery(CD) usando bitrise.io\n\n\n\n\n\nPersian\n\n\n\n\n\n\u0641\u06cc\u0644\u0645 \u0622\u0645\u0648\u0632\u0634\u06cc \u2013 \u0627\u062f\u063a\u0627\u0645 \u0648 \u062a\u062d\u0648\u06cc\u0644 \u0645\u062f\u0627\u0648\u0645 \u0628\u0627 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 Bitrise\n - \nVideo tutorial about CI/CD with Bitrise", 
            "title": "Community Created Tutorials"
        }, 
        {
            "location": "/bitrise-app-deployment/", 
            "text": "Bitrise has an integrated App Deployment system you can use for App and other build artifact file distribution.\n\n\n\nWith this you can distribute your iOS and Android app, over the air, for your testers (\neven for those who don't have a Bitrise account\n)\nor you can just use it for archiving your App and other build artifact files (these files will\nbe available on the related Build's details page).\n\n\n\nHow does it work?\n\n\n\nIf you want to distribute your iOS App through Bitrise all you need in your App's Workflow,\nis an \nXcode Archive\n step to generate the iOS app IPA,\nand a \nDeploy to Bitrise.io\n step to distribute it.\n\n\n\nFor Android apps, use the \nGradle Runner\n step to generate the APK, and use the\n\nDeploy to Bitrise.io\n step to deploy it.\n\n\n\nFor Xamarin apps use the \nXamarin Archive step\n to create the iOS/Android app,\nand use the \nDeploy to Bitrise.io\n step to deploy it.\n\n\n\nFor any other project type, just use the step(s) or script(s) which\ncan generate the app, and use the \nDeploy to Bitrise.io\n step to deploy it.\n\n\n\nOne important thing if you use custom steps/scripts\n: the \nDeploy to Bitrise.io\n\nstep by default deploys apps from the \n$BITRISE_DEPLOY_DIR\n directory, so make sure that you\nmove the generated app there, or set the \nDeploy directory or file path\n input\nof the \nDeploy to Bitrise.io step\n to point to the location of the app file.\n\n\n\nIf the app file (\n.ipa\n / \n.apk\n) is available, the \nDeploy to Bitrise.io\n step will\nupload it for the Build and \nit will be listed on the Build's details page\n.\nDepending on the \nnotification settings\n you set for the \nDeploy to Bitrise.io\n step,\nBitrise.io will also send emails for the Team of the app.\n\n\n\nFor each deployed app you'll see an information and notifications card on the Build's page,\nwhere you can check the details of the App (title, bundle id, version number, size, etc.)\nand you can download or install the App right from the Build's page.\n\n\n\nIf you built your iOS App\n with a Development or Ad-Hock Provisioning Profile,\nan additional section will be presented with a list of allowed device identifiers (UDID).\n\n\n\nIf you or a team member of your App's team register a device for\nhis/her Bitrise account (you can do this on your \nAccount Settings page\n in the \nTest Devices\n section)\nand the device's identifier can be found in the Provisioning Profile,\nthen instead of just presenting the identifier in the list you'll see the user who registered the device and the device's name.\n\n\n\nVisiting the Build page from an iOS device (which you registered for your account)\nand you'll see an \nInstall\n button instead of the \nDownload\n button.\nWith this \nyou can install the App on your device directly from Bitrise\n.\n\n\n\nFor Android apps you don't have to register your test devices\n,\nas Android apps don't have per-device install restrictions. You'll, however,\nhave to enable the \nUnknown Sources\n option in Android to be able to\ninstall the app/apk from outside of the Google Play Store.\n\n\n\nPublic App install page\n\n\n\nIf you enable the \nPublic install page\n option (of the \nDeploy to Bitrise.io\n step)\nfor the App, then a \nlong, random URL\n will be available for you,\nwhich you \ncan be sent even to people who are not registered on Bitrise.io\n.\n\n\n\nOpening this link you'll see a base description of the\nApp (title, version, size, supported devices) and an \nInstall\n\nbutton if you visit the page from an iOS or Android device (depending on the app's\nplatform of course).\n\n\n\nYou can share this page with anyone, even if they don't have a Bitrise account,\nbut \nyou have to make it sure that they'll actually be able to install it\n -\nif you don't use an Enterprise Provisioning Profile to build your App,\nyou have to add every device identifier (UDID) to the Provisioning Profile (just like you do on your Mac),\nthe iOS App can't be installed on any other device, only on the ones which were\nincluded in the Provisioning Profile the build was signed with.\n\n\n\nYou can enable or disable the App's public install page any time from the related Build page\n\nand \nyou can also set the default state\n (enabled or disabled) \nin your App's Workflow\n\n(select the \nDeploy to Bitrise.io\n step and set the \nEnable public page for the App?\n to \nfalse\n\nif you don't want to automatically enable this feature).\n\n\n\nIf you disable the Public install page for the App, then only your App's team members will be able to install the App from Bitrise,\nfrom the Build's detail page!\n\n\n\nNotifications and install invites\n\n\n\nOn the Build's page you can send install invites for your testers.\nYou can either send invites for a group of your team (testers, developers, admins or owner) or\n(if the \nPublic install page\n option is enabled) you can send install invites to any email address.\n\n\n\nKeep in mind that the install invite email contains the URL of the Public install page.\n\nIf you invite someone who's not in your App's team and then disable the Public install page,\nthey won't be able to access the install page!\nThose who are in your App's team will be redirected to the Build's page if the Public install page is disabled.\n\n\n\nYou can specify the list of groups and emails for automatic install invite notification\n in the App's Workflow.\nSimilarly to the Public page option just select the \nDeploy to Bitrise.io\n step in your Workflow\nand specify the list of groups and emails to automatically notify in the \nNotify: User Groups\n and \nNotify: Emails\n options.\n\n\n\nKeep in mind that if you disable the \nPublic install page\n option,\nBitrise won't send install invite emails for the emails you specify,\nonly to those who are in the App's Team,\nbecause in this case only your team members can access the App (on the Build's page).", 
            "title": "Bitrise OTA App Deployment"
        }, 
        {
            "location": "/deploy-to-testfairy-with-bitrise/", 
            "text": "If you are looking for a deployment service that also gives you lots of insights\nabout your application, then \nTestFairy\n is a great service to check out.\n\n\n\nWhat is TestFairy?\n\n\n\nWhen testing apps in the crowd, you never know what exactly was tested and what exactly went wrong on the client side.\nTestFairy solves this problem by providing a video of everything that happened on the mobile device,\nincluding detailed internal metrics such as CPU, memory, GPS, network, logs, crash reports, and a lot more.\nTo get these insights on iOS you need to \nintegrate their iOS SDK into your app\n.\n\n\n\nUpload your app to TestFairy through Bitrise\n\n\n\nTo deploy your app on the TestFairy platform you just simply need to add the \nTestFairy\n step\nto your app's workflow (on \nbitrise.io\n).\n\n\n\n\n\n\nThe only required parameter you have to add is your API Key on TestFairy.\nTo get it you should navigate to your \naccount preferences\n on TestFairy\nand find the key under your API Key menu.\n\n\n\n!!! note\nYou can also enable or disable the email notifications and set the tester groups you would like to notify.\nThere's an option to make your users always upgrade to the latest build by enabling Auto update in the step,\nand you can also start recording video and set the length of it.\n\n\n\nReady to go!\n\n\n\nThere's nothing else you need to do,\nsimply work on your awesome app and we ensure your app is automatically deployed to TestFairy every time you update your code.", 
            "title": "Deploy to TestFairy with Bitrise"
        }, 
        {
            "location": "/publish-your-app-to-appaloosa/", 
            "text": "Would you like to \nbeta test\n and \ndeploy\n your app to 1 or thousands of users?\n\nAppaloosa\n helps you distribute your mobile apps privately,\ncollect feedback and analyse your deployment's efficiency. \nCheck it out!\n\n\n\nWhat is Appaloosa?\n\n\n\nAppaloosa is a simple and secure enterprise App Store.\nThey help mobile \n digital teams build, test and deploy their apps privately.\n\n\n\nYou can manage your apps on Android, iOS and Windows Phone, all in the same place.\nAppaloosa also provides a native app store to increase your users' engagement.\nThey will receive a push notification on each update of the app and be able to test and use the latest version of your mobile apps.\n\n\n\nAppaloosa also gives you great insight on the efficiency of your deployment\nwith download and usage stats as well as feedbacks and ratings from the users.\n\n\n\nThey are entreprise ready with LDAP, OAuth, SAML and Active Directory integrations\nas well as a RESTful API. \nGet in touch\n for more details.\nPlus your mobile apps can be targeted to groups of users or distributed to all collaborators.\n\n\n\nBuild with Bitrise, Deploy to Appaloosa\n\n\n\nTo deploy your app on Appaloosa, simply add the Appaloosa step to your application's workflow.\nIf you don't already have an account on Appaloosa, it will be created on the go.\n\n\n\n\n\n\n\n\nAs a \nregistered user\n you simply need your \nstore id\n and \nAPI Key\n.\n\n\nAs an \nunregistered user\n, an \nemail address\n is enough.\n\n\nOptionally you can provide a \ndescription\n, \nscreenshot\n urls (up to 5) and, if registered, \ngroup ids\n.\n\n\n\n\n\nWith Bitrise and Appaloosa, you can focus on your mobile app development and we take care of the rest!", 
            "title": "Publish your app to Appaloosa"
        }, 
        {
            "location": "/hipchat-message/", 
            "text": "You can send \nHipChat\n messages during your build.\n\n\n\nYou can, for example, send a \nHipChat\n message with the Build's \nbitrise.io\n URL,\nthe build's status (at the point where you include the HipChat step - usually it's best to\nmake it the very last step of the Workflow) and with the Public Install Page for the app.\n\n\n\nTo do this all you have to do is:\n\n\n\n\n\nadd a \nSend HipChat message\n step to your app's Workflow, after the \nDeploy to Bitrise.io step\n,\n\n\nfill out the required inputs (authentication token, the room's ID you want to send the message to,\ncolor of the message, ...),\n\n\nand in the \nMessage\n input field you can include environment variables\ndefined by Bitrise and by the steps which run before the HipChat Message step.\n\n\n\n\n\n!!! note\nIf you click into any Step input field, an \nInsert Variable\n button will appear.\nWith this you can insert environment variables defined by Bitrise\n(for example the App's title, the Build's unique ID or the Build's URL on Bitrise)\nand environment variables exported by Steps which ran before this step\n(for example an Xcode Build's status or the generated IPA path).\n\n\n\nFill out the HipChat steps' required input fields, and for the HipChat Message\nstep's \nMessage\n input include the build's url with the \n$BITRISE_BUILD_URL\n environment variable,\nthe build's status at that point with the \n$BITRISE_BUILD_STATUS\n variable,\nand the related Public Install Page URL with \n$BITRISE_PUBLIC_INSTALL_PAGE_URL\n.\n\n\n\nAn example \nMessage\n input:\n\n\n\nYour build's details can be found at: $BITRISE_BUILD_URL,\nand the Public Install page at: $BITRISE_PUBLIC_INSTALL_PAGE_URL\n\nBuild status: $BITRISE_BUILD_STATUS\n\n\n\n\nThat's all. Once you configure your Workflow this way and start a new build,\nyou'll be notified about the build and deploy on HipChat,\nincluding both the build's details url and the app's Public Install Page url.", 
            "title": "HipChat message with build status and details"
        }, 
        {
            "location": "/adding-a-bitbucket-webhook/", 
            "text": "To have Bitrise automatically start a build every time you push code into your repository you\ncan set up a webhook at your code hosting service which will automatically\ntrigger a build on Bitrise with the code you push to your repository.\n\n\n\n!!! note \nIf you have a Bitbucket webhook already set up for your app ...\n\nIf you have a Bitbucket webhook already set up for your app,\nsimply skip to the \ntriggers\n section\nand edit your current one according to the screenshot there.\n\n\n\nGet the webhook URL for Bitbucket\n\n\n\nNavigate to the \nCode\n tab of your app's page and select \nBitbucket\n from the dropdown at the webhooks section.\n\n\n\n\n\n\nCopy the webhook URL for the selected service.\n\n\n\nSetup webhook on Bitbucket\n\n\n\nNavigate to your Bitbucket repository and select \nSettings\n.\n\n\n\n\n\n\nSelect \nWebhooks\n from the left.\n\n\n\n\n\n\nSelect \nAdd Webhook\n\n\n\n\n\n\nPaste the Bitbucket Webhook URL from Bitrise to the \nURL\n and add a \nTitle\n.\n\n\n\n\n\n\nChoose from triggers\n\n\n\nSelect \nChoose from a full list of triggers\n.\n\n\n\n\n\n\nSelect Repository \nPush\n and Pull Request \nCreated\n and \nUpdated\n triggers. After you are ready press the \nSave\n button and you are ready to roll!", 
            "title": "Adding a Bitbucket webhook"
        }, 
        {
            "location": "/deploy-your-xamarin-app/", 
            "text": "After successfully adding your Xamarin application we will create a default workflow (build configuration) for you.\nThis workflow includes a \nDeploy to bitrise.io\n step by default.\n\n\n\nBuilding the default workflow will checkout your git repository,\narchive your application and move all the generated applications ( \nipa\n / \napk\n ) to the deployment folder.\nAfter the archive the \nDeploy to bitrise.io\n step will upload these files to Bitrise.\n\n\n\nWe will not just upload your application,\nbut send out an email to your team as well.\nThey can simply open the email from their mobile device and install the application from there.\nAlso you can send out the build to any tester by providing their email address.\n\n\n\nBut what if you are already using or want to use another deployment service?\n\n\n\nBesides the default Bitrise deployment we have \ndozens of other services integrated\n to Bitrise.\nYou can simply modify your workflow and add the ones you would like to,\nlike \nHockeyApp\n, \nAppaloosa\n\nor \nTestFairy\n -\njust filter by the \ndeploy\n tag in the list to see all the available deployment steps.\n\n\n\nSimply add the integration Step you want to use instead of the \nDeploy to bitrise.io\n step or after that\n(but in any case after the \nXamarin Archive\n step, as that's the step which generates the\ndeployable artifact - \n.ipa\n, \n.apk\n, ...), and fill out the parameters of the step.\n\n\n\nThe next time you start a build your app will be deployed to the service of your choice!\n\n\n\nCode signing\n\n\n\nXamarin.Android\n\n\n\nFor Xamarin Android project code signing see the \nCreate signed APK on bitrise.io\n tutorial.\n\n\n\nXamarin.iOS\n\n\n\nWork in progress\n - this section will be updated soon.\n\n\n\nRight now the best way to get started with Xamarin.iOS code signing\nis to run \ncodesigndoc\n\nand upload the files it generates, or to manually upload the code signing\nfiles you use locally.\n\n\n\nCode signing files can be uploaded to \nbitrise.io\n\nin the app's Workflow Editor, under the \nCode signing \n Files\n section of the editor.", 
            "title": "Deploy your Xamarin app"
        }, 
        {
            "location": "/run-your-tests-in-the-xamarin-test-cloud/", 
            "text": "To add \nXamarin Test Cloud\n to your Xamarin application,\ngo to your app's \nWorkflow\n tab on \nbitrise.io\n to open the Workflow Editor.\n\n\n\nXamarin Test Cloud for iOS apps\n\n\n\nIn the Workflow Editor \nadd\n\nthe \nXamarin Test Cloud for iOS\n step to the workflow.\nAfter adding the step you should set the following parameters:\n\n\n\n\n\nPath to Xamarin UITest Project\n: The relative path to your test project \n(relative to the repository's root directory)\n\n\nUser email\n: Your Xamarin user's email address\n\n\nApi key\n: Your Xamarin Test Cloud API key\n\n\nDevice selection id\n: The device id that you would like to use\n\n\n\n\n\nXamarin Test Cloud for Android apps\n\n\n\nIn the Workflow Editor \nadd\n\nadd the \nXamarin Test Cloud for Android\n step to the workflow.\nAfter adding the step you should set the following parameters:\n\n\n\n\n\nPath to Xamarin UITest Project\n: The relative path to your test project \n(relative to the repository's root directory)\n\n\nUser email\n: Your Xamarin user's email address\n\n\nApi key\n: Your Xamarin Test Cloud API key\n\n\nDevice selection id\n: The device id that you would like to use", 
            "title": "Run your tests in the Xamarin Test Cloud 2"
        }, 
        {
            "location": "/getting-started/", 
            "text": "We are getting started here.", 
            "title": "Getting started"
        }, 
        {
            "location": "/some-new-content/", 
            "text": "Here a new conrtenet", 
            "title": "Some new content new version"
        }, 
        {
            "location": "/testing-if-it-works/", 
            "text": "Open the \nbitrise.yml\n file of your project.\n\n\n    ``` javascript\n    var akarmi = 6\n    ```\n\n\n\n\n\n\n\n\n\nFind the step in which you wish to use a template expression.\n\n\n\n\n\n\nAdd an \nopts\n field to the \ncontent\n of the step.\n\n\n\n\n\n\nAdd the \nis_template\n attribute to \nopts\n and set {++ sit++} its value to \ntrue\n.\n\n\n\n\n\n\nAdd the template expression to the step's \ncontent\n.\n\n\n\n\n\n\n\n\nBefore you start\n\n\nBefore setting up IPA export, make sure that:\n\n\n\n\nyour code signing files have been collected: we recommend using our \ncodesigndoc\n tool.\n\n\nyou have the \nCertificate and profile installer\n step in your workflow\n\n\n\n\n\n\n\n\nBefore you start\n\n\nBefore setting up IPA export, make sure that:\n\n\n\n\nyour code signing files have been collected: we recommend using our \ncodesigndoc\n tool.\n\n\nyou have the \nCertificate and profile installer\n step in your workflow\n\n\n\n\n\n\n\n\nBefore you start\n\n\nBefore setting up IPA export, make sure that:\n\n\n\n\nyour code signing files have been collected: we recommend using our \ncodesigndoc\n tool.\n\n\nyou have the \nCertificate and profile installer\n step in your workflow\n\n\n\n\n\n\n\n\nBefore you start\n\n\nBefore setting up IPA export, make sure that:\n\n\n\n\nyour code signing files have been collected: we recommend using our \ncodesigndoc\n tool.\n\n\nyou have the \nCertificate and profile installer\n step in your workflow", 
            "title": "Testing if it Works"
        }
    ]
}